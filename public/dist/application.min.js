'use strict';
// Init the application configuration module for AngularJS application
var ApplicationConfiguration = function () {
    // Init module configuration options
    var applicationModuleName = 'nutrition-manager';
    var applicationModuleVendorDependencies = [
        'ngResource',
        'ngAnimate',
        'ui.router',
        'ui.bootstrap',
        'ui.utils'
    ];
    // Add a new vertical module
    var registerModule = function (moduleName) {
        // Create angular module
        angular.module(moduleName, []);
        // Add the module to the AngularJS configuration file
        angular.module(applicationModuleName).requires.push(moduleName);
    };
    return {
        applicationModuleName: applicationModuleName,
        applicationModuleVendorDependencies: applicationModuleVendorDependencies,
        registerModule: registerModule
    };
}();'use strict';
//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);
// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config([
    '$locationProvider',
    function ($locationProvider) {
        $locationProvider.hashPrefix('!');
    }
]);
//Then define the init function for starting up the application
angular.element(document).ready(function () {
    //Fixing facebook bug with redirect
    if (window.location.hash === '#_=_')
        window.location.hash = '#!';
    //Then init the app
    angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('plans');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('foods');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');'use strict';

//ApplicationConfiguration.registerModule('customDirectives', []);

angular.module('core').directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
    // contains
    function contains(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    return true;
                }
            }
        }
        return false;
    }

    // add
    function add(arr, item) {
        arr = angular.isArray(arr) ? arr : [];
        for (var i = 0; i < arr.length; i++) {
            if (angular.equals(arr[i], item)) {
                return arr;
            }
        }
        arr.push(item);
        return arr;
    }

    // remove
    function remove(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    arr.splice(i, 1);
                    break;
                }
            }
        }
        return arr;
    }

    // http://stackoverflow.com/a/19228302/1458162
    function postLinkFn(scope, elem, attrs) {
        // compile with `ng-model` pointing to `checked`
        $compile(elem)(scope);

        // getter / setter for original model
        var getter = $parse(attrs.checklistModel);
        var setter = getter.assign;

        // value added to list
        var value = $parse(attrs.checklistValue)(scope.$parent);

        // watch UI checked change
        scope.$watch('checked', function(newValue, oldValue) {
            if (newValue === oldValue) {
                return;
            }
            var current = getter(scope.$parent);
            if (newValue === true) {
                setter(scope.$parent, add(current, value));
            } else {
                setter(scope.$parent, remove(current, value));
            }
        });

        // watch original model change
        scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
            scope.checked = contains(newArr, value);
        }, true);
    }

    return {
        restrict: 'A',
        priority: 1000,
        terminal: true,
        scope: true,
        compile: function(tElement, tAttrs) {
            if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
                throw 'checklist-model should be applied to `input[type="checkbox"]`.';
            }

            if (!tAttrs.checklistValue) {
                throw 'You should provide `checklist-value`.';
            }

            // exclude recursion
            tElement.removeAttr('checklist-model');

            // local scope var storing individual checkbox model
            tElement.attr('ng-model', 'checked');

            return postLinkFn;
        }
    };
}]);

/**
 * Created by jason on 9/7/14.
 */

angular.module('core').directive('sortable', ['$parse', '$compile', function($parse, $compile) {
    return {
        scope: {
            start: '@',
            startcallback: '=',
            update: '@',
            disableallelementsbydefault: '=',
            updatecallback: '=',
            rootsortableelement:'@'
        },

        link: function (scope, element, attrs, ctrl) {
            scope.updateEvent = function(e, ui){
                scope.$apply(scope.updatecallback(e, ui));
            };

            scope.startEvent = function(e, ui){
                scope.$apply(scope.startcallback(e, ui));
            };

            var sortableElement = jQuery(element).find(scope.rootsortableelement);

//            jQuery(document).loaded(function(){
//                if(scope.disableallelementsbydefault === true){
//                    jQuery('.ui-sortable').find('.panel-default').addClass('disabled');
//                }
//            });


            jQuery(sortableElement).sortable({
                start: scope.startEvent,
                update: scope.updateEvent,
                cancel:".disabled"
            });

        }
    }

}]);

var chartControllerScope = null;

angular.module('core')
    .controller('ChartController',['$scope', function($scope) {
        chartControllerScope = $scope;

        $scope.chart = null;
        $scope.columns = [];
        $scope.types = {};
        $scope.axis = {};
        $scope.axes = {};
        $scope.xValues= null;
        $scope.xTick = null;
        $scope.names = null;
        $scope.colors = null;
        $scope.grid = null;
        $scope.legend = null;
        $scope.tooltip = null;
        $scope.chartSize = null;
        $scope.colors = null;
        $scope.jsonKeys = null;



        this.showGraph = function() {
            var config = {};
            config.bindto = "#"+$scope.bindto;
            config.data = {}

            if ($scope.chartData && $scope.chartColumns) {
                $scope.$watchCollection('chartData', function() {
                    loadChartData();
                });
                $scope.jsonKeys = {};
                $scope.jsonKeys.value=[];
                angular.forEach($scope.chartColumns, function(column) {
                    $scope.jsonKeys.value.push(column.id);
                    addColumnProperties(column.id ,column.type, column.name, column.color);
                });
                if ($scope.chartX) {
                    $scope.jsonKeys.x=$scope.chartX.id;
                }
                config.data.keys=$scope.jsonKeys;
                config.data.json=$scope.chartData;
            }

            if ($scope.xValues) {
                config.data.x=$scope.xValues;
            }
            if ($scope.columns) {
                config.data.columns = $scope.columns;
            }
            config.data.types = $scope.types;
            config.data.axes = $scope.axes;
            if ($scope.names) {
                config.data.names = $scope.names;
            }
            if ($scope.colors) {
                config.data.colors = $scope.colors;
            }
            if ($scope.showLabels && $scope.showLabels === "true") {
                config.data.labels=true;
            }
            if ($scope.showSubchart && $scope.showSubchart === "true") {
                config.subchart = {"show":true};
            }
            if ($scope.enableZoom && $scope.enableZoom === "true") {
                config.zoom = {"enabled":true};
            }
            config.axis = $scope.axis;
            if ($scope.xTick) {
                config.axis.x.tick = $scope.xTick;
            }
            if ($scope.grid != null) {
                config.grid = $scope.grid;
            }
            if ($scope.legend != null) {
                config.legend = $scope.legend;
            }
            if ($scope.tooltip != null) {
                config.tooltip = $scope.tooltip;
            }
            if ($scope.chartSize != null) {
                config.size = $scope.chartSize;
            }
            if ($scope.colors != null) {
                config.color = {"pattern":$scope.colors};
            }
            $scope.chart = c3.generate(config);
        };

        this.addColumn = function(column,columnType,columnName,columnColor) {
            $scope.columns.push(column);
            addColumnProperties(column[0], columnType, columnName, columnColor);
        };

        this.addYAxis = function(yAxis) {
            $scope.axes = yAxis;
            if (!$scope.axis.y2) {
                $scope.axis.y2={"show":true};
            }
        };

        this.addXAxisValues = function(xValues) {
            $scope.xValues = xValues;
        };

        this.addAxisProperties = function(id,axis) {
            $scope.axis[id]=axis;
        };

        this.addXTick = function(tick) {
            $scope.xTick = tick;
        };

        this.rotateAxis = function() {
            $scope.axis.rotated = true;
        };

        this.addGrid = function(axis) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if ($scope.grid[axis] == null) {
                $scope.grid[axis] = {};
            }
            $scope.grid[axis].show = true;
        };

        this.addGridLine = function(axis,value,text) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if (axis === "x") {
                if ($scope.grid.x == undefined) {
                    $scope.grid.x = {};
                }
                if ($scope.grid.x.lines == undefined) {
                    $scope.grid.x.lines = [];
                }
            } else {
                if ($scope.grid.y == undefined) {
                    $scope.grid.y = {};
                }
                if ($scope.grid.y.lines == undefined) {
                    $scope.grid.y.lines = [];
                }

            }
            if (axis === "y2") {
                $scope.grid.y.lines.push({"value":value,"text":text,"axis":"y2"});
            } else {
                $scope.grid[axis].lines.push({"value":value,"text":text})
            }
        };

        this.addLegend = function(legend) {
            $scope.legend = legend;
        };

        this.addTooltip = function(tooltip) {
            $scope.tooltip = tooltip;
        };

        this.addSize = function(chartSize) {
            $scope.chartSize = chartSize;
        };

        this.addColors = function(colors) {
            $scope.colors = colors;
        };

        function addColumnProperties(id, columnType, columnName, columnColor) {
            if (columnType !== undefined) {
                $scope.types[id]=columnType;
            }
            if (columnName !== undefined) {
                if ($scope.names === null) {
                    $scope.names = {};
                }
                $scope.names[id]=columnName;
            }
            if (columnColor !== undefined) {
                if ($scope.colors === null) {
                    $scope.colors = {};
                }
                $scope.colors[id]=columnColor;
            }
        }

        function loadChartData() {
            var data = {};
            data.keys=$scope.jsonKeys;
            data.json=$scope.chartData;

            $scope.chart.load(data);
        }
    }])
    .directive('c3chart', function($timeout) {
        var chartLinker = function(scope,element,attrs,chartCtrl) {
            // Trick to wait for all rendering of the DOM to be finished.
            $timeout(function() {
                chartCtrl.showGraph()
            });
        };

        return {
            "restrict": "E",
            "controller":"ChartController",
            "scope": {
                "bindto":"@bindtoId",
                "showLabels":"@showLabels",
                "showSubchart":"@showSubchart",
                "enableZoom":"@enableZoom",
                "chartData":"=chartData",
                "chartColumns":"=chartColumns",
                "chartX":"=chartX"
            },
            "template":"<div><div id='{{bindto}}'></div><div ng-transclude></div></div>",
            "replace":true,
            "transclude":true,
            "link": chartLinker
        }
    })
    .directive('chartColumn', function() {
        var columnLinker = function(scope,element,attrs,chartCtrl) {
            var column = attrs['columnValues'].split(",");
            column.unshift(attrs['columnId']);
            chartCtrl.addColumn(column,attrs['columnType'],attrs['columnName'],attrs['columnColor']);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": columnLinker
        }
    })
    .directive('chartAxes', function() {
        var axesLinker = function(scope,element,attrs,chartCtrl) {
            var x = attrs['valuesX'];
            if (x) {
                chartCtrl.addXAxisValues(x);
            }

            var y = attrs['y'];
            var y2 = attrs['y2'];
            var yAxis = {};
            if (y2) {
                var items = y2.split(",");
                for (item in items) {
                    yAxis[items[item]] = "y2";
                }
                if (y) {
                    var items = y.split(",");
                    for (item in items) {
                        yAxis[items[item]] = "y";
                    }
                }
                chartCtrl.addYAxis(yAxis);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axesLinker
        }
    })
    .directive('chartAxis', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var rotate = attrs['axisRotate'];
            if (rotate) {
                chartCtrl.rotateAxis();
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }

    })
    .directive('chartAxisX', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};

            var type=attrs['axisType'];
            if (type) {
                axis.type=type;
            }
            // TODO has a strange effect on the graph, need to evaluate
            var height = attrs['axisHeight'];
            if (height) {
                axis.height=height;
            }
            chartCtrl.addAxisProperties('x',axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartAxisY', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var id=attrs['axisId'];
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};
            if (id === 'y2') {
                axis.show=true;
            }
            var paddingTop = attrs['paddingTop'];
            var paddingBottom = attrs['paddingBottom'];
            if (paddingTop | paddingBottom) {
                paddingTop = (paddingTop) ? paddingTop : 0;
                paddingBottom = (paddingBottom)? paddingBottom : 0;
                axis.padding = {"top":parseInt(paddingTop),"bottom":parseInt(paddingBottom)};
            }
            var rangeMax = attrs['rangeMax'];
            var rangeMin = attrs['rangeMin'];
            if (rangeMax) {
                axis.max = parseInt(rangeMax);
            }
            if (rangeMin) {
                axis.min = parseInt(rangeMin);
            }

            chartCtrl.addAxisProperties(id,axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartGrid', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var showX = attrs["showX"];
            if (showX && showX === "true") {
                chartCtrl.addGrid("x");
            }
            var showY = attrs["showY"];
            if (showY && showY === "true") {
                chartCtrl.addGrid("y");
            }
            var showY2 = attrs["showY2"];
            if (showY2 && showY2 === "true") {
                chartCtrl.addGrid("y2");
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker,
            "transclude": true,
            "template": "<div ng-transclude></div>"
        }
    })
    .directive('chartGridOptional', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var axisId = attrs["axisId"];
            var value = attrs["gridValue"];
            var text = attrs["gridText"];

            chartCtrl.addGridLine(axisId,value,text);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker
        }
    })
    .directive('chartAxisXTick', function() {
        var tickLinker = function(scope,element,attrs,chartCtrl) {
            var tick = {};

            var count = attrs['tickCount'];
            if (count) {
                tick.count = count;
            }

            // TODO, dit lijkt nog niet echt iets te doen
            var format = attrs['tickFormat'];
            if (format) {
                tick.format = format;
            }

            var culling = attrs['tickCulling'];
            if (culling) {
                tick.culling = culling;
            }

            var rotate = attrs['tickRotate'];
            if (rotate) {
                tick.rotate = rotate;
            }

            var fit = attrs['tickFit'];
            if (fit) {
                tick.fit = fit;
            }

            chartCtrl.addXTick(tick);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tickLinker
        }

    })
    .directive('chartLegend', function() {
        var legendLinker = function(scope,element,attrs,chartCtrl) {
            var legend = null;
            var show = attrs["showLegend"];
            if (show && show === "false") {
                legend = {"show":false};
            } else {
                var position = attrs["legendPosition"];
                if (position) {
                    legend = {"position":position};
                }
            }

            if (legend != null) {
                chartCtrl.addLegend(legend);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": legendLinker
        }

    })
    .directive('chartTooltip', function() {
        var tooltipLinker = function(scope,element,attrs,chartCtrl) {
            var tooltip = null;
            var show = attrs["showTooltip"];
            if (show && show === "false") {
                tooltip = {"show":false};
            } else {
                var grouped = attrs["groupTooltip"];
                if (grouped && grouped === "false") {
                    tooltip = {"grouped":false};
                }
            }

            if (tooltip != null) {
                chartCtrl.addTooltip(tooltip);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tooltipLinker
        }

    })
    .directive('chartSize', function() {
        var sizeLinker = function(scope,element,attrs,chartCtrl) {
            var chartSize = null;
            var width = attrs["chartwidth"];
            var height = attrs["chartheight"]
            if (width || height) {
                chartSize = {};
                if (width) {
                    chartSize.width = parseInt(width);
                }
                if (height) {
                    chartSize.height = parseInt(height);
                }
                chartControllerScope.chartSize = chartSize;
            }
        };

        return {
            //"require":"^c3chart",
            //"restrict":"E",
            //"scope": {},
            "replace":true,
            "link": sizeLinker
        }

    })
    .directive('chartColors', function() {
        var colorsLinker = function(scope,element,attrs,chartCtrl) {
            var pattern = attrs["colorPattern"];
            if (pattern) {
                chartCtrl.addColors(pattern.split(","));
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": colorsLinker
        }

    });

// Configuring the Plans module
angular.module('plans').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Plans', 'plans', 'dropdown', '/plans(/create)?');
        Menus.addSubMenuItem('topbar', 'plans', 'List Plans', 'plans');
        Menus.addSubMenuItem('topbar', 'plans', 'New Plan', 'plans/create');
    }
]);
// Configuring the Articles module
angular.module('foods').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Foods', 'foods', 'dropdown', '/foods(/create)?');
        Menus.addSubMenuItem('topbar', 'foods', 'List Foods', 'foods');
        Menus.addSubMenuItem('topbar', 'foods', 'New Food', 'foods/create');
    }
]);'use strict';

// Setting up route
angular.module('plans').config(['$stateProvider',
    function($stateProvider) {
        // Plans state routing
        $stateProvider.
            state('listPlans', {
                url: '/plans',
                templateUrl: 'modules/plans/views/list-plans.client.view.html'
            }).
            state('createPlan', {
                url: '/plans/create',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('createPlan2', {
                url: '/plans/create/:planDateForCreate',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('viewPlan', {
                url: '/plans/:planId',
                //templateUrl: 'modules/plans/views/view-plan.client.view.html'
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('editPlan', {
                url: '/plans/:planId/edit',
                //templateUrl: 'modules/plans/views/edit-plan.client.view.html'
                templateUrl: 'modules/plans/views/create-plan.client.view.html'
            });
    }
]);
'use strict';

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
    Plan = mongoose.model('Plan'),
    Food = mongoose.model('Food'),
    Activity = mongoose.model('Activity'),
    NutritionProfile = mongoose.model('NutritionProfile'),
    _ = require('lodash');

/**
 * Get the error message from error object
 */
var getErrorMessage = function(err) {
    var message = '';

    if (err.code) {
        switch (err.code) {
            case 11000:
            case 11001:
                message = 'plan already exists';
                break;
            default:
                message = 'Something went wrong';
        }
    } else {
        for (var errName in err.errors) {
            if (err.errors[errName].message) message = err.errors[errName].message;
        }
    }

    return message;
};

/**
 * Create a plan
 */
exports.create = function(req, res) {
    var planClient = req.body;
    var planClientPlanDate = planClient.planDateForDB;
    var planDateYear = planClient.planDateYear;
    var planDateMonth = planClient.planDateMonth;
    var planDateDay = planClient.planDateDay;

    //check if already existing plan in database for this plan date
    //if so, just update the plan, not create new one
    Plan.findOne({'planDateYear': planDateYear, 'planDateMonth': planDateMonth, 'planDateDay': planDateDay, 'user': req.user.id}).exec(function(err, planDb) {
        if (err) {
            return res.send(400, {
                message: getErrorMessage(err)
            });
        } else {
            var planToSave = planDb;

            if (planDb !== null && planDb !== 'undefined' && planDb !== undefined) {
                for(var i = 0; i < planClient.meals.length; i++){
                    planDb.meals.push(planClient.meals[i]);
                }

                planToSave.userRoles = req.user.roles;

            }
            else{
                var plan = new Plan(req.body);
                plan.user = req.user;
                plan.userRoles = req.user.roles;
                plan.planDateAsUtc = planClientPlanDate;
                plan.planDateNonUtc = planClient.planDateForDB;
                plan.planDateYear = planClient.planDateYear;
                plan.planDateMonth = planClient.planDateMonth;
                plan.planDateDay = planClient.planDateDay;
                plan.planDateAsMili = planClient.planDateAsMili;
                plan.planDateAsConcat = planClient.planDateAsConcat;

                planToSave = plan;
            }

            planToSave.planDateForDB = planClient.planDateForDB;

            planToSave.save(function(err) {
                if (err) {
                    return res.send(400, {
                        message: getErrorMessage(err)
                    });
                } else {
                    res.jsonp(planToSave);
                }
            });
        }
    });
};

/**
 * Show the current plan
 */
exports.read = function(req, res) {
    res.jsonp(req.plan);
};

/**
 * Update a plan
 */
exports.update = function(req, res) {
    var plan = req.plan;
    plan = _.extend(plan, req.body);

    plan.save(function(err) {
        if (err) {
            return res.send(400, {
                message: getErrorMessage(err)
            });
        } else {
            res.jsonp(plan);
        }
    });
};

/**
 * Delete a plan
 */
exports.delete = function(req, res) {
    var plan = req.plan;

    plan.remove(function(err) {
        if (err) {
            return res.send(400, {
                message: getErrorMessage(err)
            });
        } else {
            res.jsonp(plan);
        }
    });
};

/**
 * List of Plans
 */
exports.list = function(req, res) {
    Plan.find({
        user:req.user.id // Search Filters
    })
        .sort({
            planDateAsMili: -1
        })
        .populate('user', 'displayName').exec(function(err, plans) {
            if (err) {
                return res.send(400, {
                    message: getErrorMessage(err)
                });
            } else {
                res.jsonp(plans);



            }
        });

};

/**
 * Plan middleware
 */
exports.planByID = function(req, res, next, id) {
    Plan.findById(id).populate('user', 'displayName').exec(function(err, plan) {
        if (err) return next(err);
        if (!plan) return next(new Error('Failed to load plan ' + id));

        plan.userRoles = req.user.roles;
        req.plan = plan;
        next();


    });
};


exports.planByDate = function(req, res, next, planDate) {
    if(req.user) {
        var split = planDate.split('_');
        var month = parseInt(split[0]);
        var day = parseInt(split[1]);
        var year = parseInt(split[2]);

        var range = req.param("dateRange");
        var dateRange = 1;
        if (range) {
            dateRange = parseInt(range);
        }

        if (dateRange <= 1) {
            Plan.findOne({'planDateYear': year, 'planDateMonth': month, 'planDateDay': day, 'user': req.user.id}).exec(function (err, plan) {
                if (err) return next(err);
                //if (!activity) return next(new Error('Failed to load activity with date: ' + activityDate));
                res.jsonp(plan);
            });
        }
        else {
            NutritionProfile.findOne({
                user: req.user.id // Search Filters
            }).exec(function (err, nutritionProfile) {
                if (err) {
                    return res.send(400, {
                        message: getErrorMessage(err)
                    });
                }
                else {
                    Plan.find({'planDateYear': year, 'planDateMonth': month, 'planDateDay': {$lt: day + 7, $gte: day}, 'user': req.user.id}).exec(function (err, plans) {
                        if (err) return next(err);

                        else {
                            var bmr = calculateBmr(nutritionProfile);

                            var plansDict = [];

                            for (var i = 0; i < plans.length; i++) {
                                var singlePlan = plans[i];

                                var dateForDict = singlePlan.planDateYear + '_' + singlePlan.planDateMonth + '_' + singlePlan.planDateDay;
                                plansDict.push({
                                    planDate: dateForDict,
                                    plan: singlePlan
                                });

                                for (var nMeal = 0; nMeal < singlePlan.meals.length; nMeal++){
                                    doMealTotaling(singlePlan.meals[nMeal]);
                                }

                                calculatePlanTotalMacros(singlePlan);
                            }

                            Activity.find({'planDateYear': year, 'planDateMonth': month, 'planDateDay': {$lt: day + 7, $gte: day}, 'user': req.user.id}).exec(function (err, activities) {
                                if (err) return next(err);

                                if(activities && activities.length > 0) {
                                    for(var act = 0; act < activities.length; act++){
                                        var activityFromDb = activities[act];

                                        var activityPlanDt = activityFromDb.planDateYear + '_' + activityFromDb.planDateMonth + '_' + activityFromDb.planDateDay;

                                        for (var a = 0; a < plansDict.length; a++) {
                                            if (plansDict[a].planDate == activityPlanDt) {
                                                var deficit = calculateDeficit(plansDict[a].plan, activityFromDb, bmr);
                                                plansDict[a].plan.deficit = deficit;
                                            }
                                        }
                                    }
                                }

                                res.jsonp(plans);

                            });


                        }
                    });
                }
            });



        }
    }
};

var doMealTotaling = function(meal){
    var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

    for(var i = 0; i < meal.foods.length; i++){
        var foodCarbs = meal.foods[i].carbohydrates;

        carbsTotal += foodCarbs;
        fatTotal += meal.foods[i].fat;
        proteinTotal += meal.foods[i].protein;
        caloriesTotal += meal.foods[i].calories;
        sodiumTotal += meal.foods[i].sodium;
    }

    meal.totalCarbohydrates = carbsTotal;
    meal.totalProtein = proteinTotal;
    meal.totalCalories = caloriesTotal;
    meal.totalFat = fatTotal;
    meal.totalSodium = sodiumTotal;
};

var calculatePlanTotalMacros = function(plan){
    var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

    for (var i = 0; i < plan.meals.length; i++){
        carbsTotal += plan.meals[i].totalCarbohydrates;
        fatTotal += plan.meals[i].totalFat;
        proteinTotal += plan.meals[i].totalProtein;
        caloriesTotal += plan.meals[i].totalCalories;
    }

    plan.totalPlanCarbs = carbsTotal;
    plan.totalPlanFat = fatTotal;
    plan.totalPlanProtein = proteinTotal;
    plan.totalPlanCalories = caloriesTotal;

    //calculate totals as percent
    var macroTotals = carbsTotal + fatTotal + proteinTotal;
    plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
    plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
    plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;
};

var calculateDeficit = function(nutritionPlan, activityPlan, bmr){
    var additionalCaloriesExpended = 300;
    var caloriesOut = 300;

    if (activityPlan){
        caloriesOut = activityPlan.totalCaloriesBurned + bmr;

    }

    var caloriesIn = nutritionPlan.totalPlanCalories;

    return -(caloriesIn - caloriesOut - additionalCaloriesExpended);

};

//BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
//BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
var calculateBmr = function(nutritionProfile){
    var age = nutritionProfile.age;
    var weightInLbs = nutritionProfile.weight;
    var heightFeet = nutritionProfile.heightFeet;
    var heightInches = nutritionProfile.heightInches;
    var totalHeight = (heightFeet * 12) + heightInches;
    var gender = nutritionProfile.sex;

    //convert weight from lbs to kg:
    // kg = (weight in lbs) * .454
    var weightInKg = weightInLbs * .454;

    //convert height from inches to cms
    //height in cms = (height in inches * 2.54)
    var heightInCms = totalHeight * 2.54

    var bmr = 0;

    //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
    if(gender == "Male"){
        bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
    }
    //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
    else{
        bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
    }

    return bmr;
};

/**
 * plan authorization middleware
 */
exports.hasAuthorization = function(req, res, next) {
    if (req.plan.user.id !== req.user.id) {
        return res.send(403, {
            message: 'User is not authorized'
        });
    }
    next();
};




//Plans service used for communicating with the plans REST endpoints
angular.module('plans').factory('Plans', ['$resource',
    function($resource) {
        return $resource('plans/:planId', {
            planId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);'use strict';
// Setting up route
angular.module('core').config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        // Redirect to home view when route not found
        $urlRouterProvider.otherwise('/');
        // Home state routing
        $stateProvider.state('home', {
            url: '/',
            templateUrl: 'modules/core/views/home.client.view.html'
        });
    }
]);'use strict';
angular.module('core').controller('HeaderController', [
    '$scope',
    'Authentication',
    'Menus',
    function ($scope, Authentication, Menus) {
        $scope.authentication = Authentication;
        $scope.isCollapsed = false;
        $scope.menu = Menus.getMenu('topbar');
        $scope.toggleCollapsibleMenu = function () {
            $scope.isCollapsed = !$scope.isCollapsed;
        };
        // Collapsing the menu after navigation
        $scope.$on('$stateChangeSuccess', function () {
            $scope.isCollapsed = false;
        });
    }
]);

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module(ApplicationConfiguration.applicationModuleName).service(
    "CoreUtilities",
    function( $http, $q ) {

        // Return public API.
        return({
            calculateDeficit: calculateDeficit,
            doMealTotaling: doMealTotaling,
            calculatePlanTotalMacros: calculatePlanTotalMacros

        });


        // ---
        // PUBLIC METHODS.
        // ---


        function calculateDeficit(nutritionPlan, activityPlan, nutritionProfile){
            var bmr = calculateBmr(nutritionProfile);

            var additionalCaloriesExpended = 300;
            var caloriesOut = additionalCaloriesExpended + bmr;

            if (activityPlan && typeof activityPlan == 'object'){
                caloriesOut = activityPlan.totalCaloriesBurned + bmr + additionalCaloriesExpended;

            }

            var caloriesIn = nutritionPlan.totalPlanCalories;

            return -(caloriesIn - caloriesOut);

        };


        // ---
        // PRIVATE METHODS.
        // ---


        //BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
        //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
        function calculateBmr(nutritionProfile){
            var age = nutritionProfile.age;
            var weightInLbs = nutritionProfile.weight; //TODO get most recent weight instead of static one
            var heightFeet = nutritionProfile.heightFeet;
            var heightInches = nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = nutritionProfile.sex;

            //convert weight from lbs to kg:
            // kg = (weight in lbs) * .454
            var weightInKg = weightInLbs * .454;

            //convert height from inches to cms
            //height in cms = (height in inches * 2.54)
            var heightInCms = totalHeight * 2.54

            var bmr = 0;

            //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
            if(gender == "Male"){
                bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
            }
            //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
            else{
                bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
            }

            return bmr;
        };

        function doMealTotaling(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        function calculatePlanTotalMacros(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates;
                fatTotal += plan.meals[i].totalFat;
                proteinTotal += plan.meals[i].totalProtein;
                caloriesTotal += plan.meals[i].totalCalories;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
            plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
            plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;


        };

        function handleSuccess( response ) {

            //dailyDashboardData.activityPlan = response.data;

            // return dailyDashboardData;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('core').service(
    "CoreService",
    function( $http, $q ) {

        var planDate, weeklyPlanDate;
        var dailyDashboardData = {};
        var weeklyDashboardData = {};

        // Return public API.
        return({
            getDailyDashboardData: getDailyDashboardData,
            getWeeklyDashboardData: getWeeklyDashboardData
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function getDailyDashboardData(planDateIn) {
            planDate = planDateIn;

            var request = $http({
                method: "get",
                url: "/plans/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleNutritionPlanSuccess, handleError ) );
        }

        function getWeeklyDashboardData(planDateIn) {
            weeklyPlanDate = planDateIn;


            var request = $http({
                method: "get",
                url: "/plans/" + weeklyPlanDate + '/' + 7,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleWeeklyNutritionPlanSuccess, handleError ) );
        }






        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleNutritionPlanSuccess( response ) {

            dailyDashboardData.nutritionPlan = response.data;

            var request = $http({
                method: "get",
                url: "/activities/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleActivityPlanSuccess, handleError ) );
        }

        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleWeeklyNutritionPlanSuccess( response ) {

            weeklyDashboardData.weeklyNutritionPlan = response.data;

            return weeklyDashboardData;
        }

        function handleActivityPlanSuccess( response ) {

            dailyDashboardData.activityPlan = response.data;

            return dailyDashboardData;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
'use strict';


angular.module('core').controller('HomeController', ['$scope', 'Authentication', 'Activities', 'CoreService', 'NutritionProfile', 'Progress',
    function($scope, Authentication, Activities, CoreService, NutritionProfile, Progress) {
        // This provides Authentication context.
        $scope.authentication = Authentication;
        window.scope = $scope;

        var additionalCaloriesExpended = 300;
        $scope.activityPlan = null;
        $scope.nutritionPlan = null;

        $scope.nutritionProfile = NutritionProfile.get(function () {
            $scope.bmr = calculateBmr();

            $scope.getDailyDashboardData();

            $scope.getWeeklyDashboardData();
        });

        $scope.weeklyDashboardView = 'charts';

        //TODO: move into service
        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'}

        ];

        var todaysDate = (new Date()).toUTCString();
        var dt = new Date(todaysDate);
        var year = dt.getFullYear();
        var month = dt.getMonth();
        var day = dt.getDate();

        $scope.planDate = new Date(todaysDate);
        $scope.planDateForDb = month + '_' + day + '_' + year;
        $scope.planDateDisplay = (month + 1) + '/' + day +'/' + year;

        //TODO: move into service
        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.openPlanDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.planDateOpened = true;
        };


        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        //initialize weekly plan dates to send to DB
        var dWeeklyPlanDate = new Date();
        var dayOfWeek = dWeeklyPlanDate.getDay();
        var year = dWeeklyPlanDate.getFullYear();
        var month = dWeeklyPlanDate.getMonth();
        var day = dWeeklyPlanDate.getDate();
        day = day - dayOfWeek;
        var startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        var endWeeklyDt;

        var checkIfChangeWeeklyData = function(){
            var endWeeklyYear = endWeeklyDt.getFullYear();
            var endWeeklyMonth = endWeeklyDt.getMonth();
            var endWeeklyDay = endWeeklyDt.getDate();
            var endWeeklyDateMili = (new Date(endWeeklyYear, endWeeklyMonth, endWeeklyDay)).getTime();

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();
            var startWeeklyDateMili = (new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay)).getTime();

            var currentWeeklyYear = $scope.planDate.getFullYear();
            var currentWeeklyMonth = $scope.planDate.getMonth();
            var currentWeeklyDay = $scope.planDate.getDate();

            var currentWeeklyDateMili = (new Date(currentWeeklyYear, currentWeeklyMonth, currentWeeklyDay)).getTime();

            var currentExceedsEndDt = currentWeeklyDateMili > endWeeklyDateMili;

            var currentBelowStartDt = false;
            if(!currentExceedsEndDt){
                currentBelowStartDt = currentWeeklyDateMili < startWeeklyDateMili;
            }

            if(currentExceedsEndDt || currentBelowStartDt){
                setNewWeeklyStartDt();
            }

            return currentExceedsEndDt || currentBelowStartDt;
        };

        var setNewWeeklyStartDt = function(){
            var dayOfWeek = $scope.planDate.getDay();
            var year = $scope.planDate.getFullYear();
            var month = $scope.planDate.getMonth();
            var day = $scope.planDate.getDate();
            day = day - dayOfWeek;
            startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        }

        $scope.planDateChanged = function(){
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){

                $scope.getWeeklyDashboardData();
            }
        };

        $scope.nextDayClick = function(){
            $scope.planDate = new Date($scope.planDate.setDate($scope.planDate.getDate() + 1));
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        $scope.prevDayClick = function(){
            $scope.planDate = new Date($scope.planDate.setDate($scope.planDate.getDate() - 1));
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];



        $scope.getWeeklyDashboardData = function()
        {

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();

            $scope.weeklyDateDisplay = (startWeeklyMonth + 1) + '/' + startWeeklyDay;

            endWeeklyDt = new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay);
            endWeeklyDt.setDate(endWeeklyDt.getDate() + 6);

            var startDateFormatted = startWeeklyYear + '_' + startWeeklyMonth + '_' + startWeeklyDay;
            var endDateFormatted = endWeeklyDt.getFullYear() + '_' + endWeeklyDt.getMonth() + '_' + endWeeklyDt.getDate();

            $scope.progress = Progress.query({
                    startDate: startDateFormatted,
                    endDate: endDateFormatted
                },
                function(u, getResponseHeaders)
                {


                    if(u.length > 0) {
                        $scope.weeklyNutritionPlanList = u;
                        var weeklyProteinTotal = 0;
                        var weeklyCarbsTotal = 0;
                        var weeklyFatTotal = 0;
                        var weeklyCaloriesTotal = 0;
                        var weeklyDeficitTotal = 0;

                        var len = $scope.weeklyNutritionPlanList.length;

                        for (var w = 0; w < len; w++) {
                            var item = $scope.weeklyNutritionPlanList[w];

                            var dPlanDate = new Date(item.planDateYear, item.planDateMonth, item.planDateDay);
                            var planDateDayOfWeek = days[dPlanDate.getDay()];
                            item.dayOfWeek = planDateDayOfWeek;


                            weeklyProteinTotal += item.totalPlanProteinAsPercent;
                            weeklyCarbsTotal += item.totalPlanCarbsAsPercent;
                            weeklyFatTotal += item.totalPlanFatAsPercent;
                            weeklyCaloriesTotal += item.totalPlanCalories;
                            weeklyDeficitTotal += item.deficit;
                        }

                        $scope.weeklyProteinAverage = weeklyProteinTotal / len;
                        $scope.weeklyCarbsAverage = weeklyCarbsTotal / len;
                        $scope.weeklyFatAverage = weeklyFatTotal / len;
                        $scope.weeklyCaloriesAverage = weeklyCaloriesTotal / len;
                        $scope.weeklyDeficitAverage = weeklyDeficitTotal / len;

                        getWeeklyMacrosChartData();

                        showWeeklyCaloriesDeficitChart();

                        showAverageWeeklyMacrosChart();
                    }
                    else{
                        $scope.weeklyNutritionPlanList = null;
                    }
                }
            );
        };

        $scope.getDailyDashboardData = function() {
            CoreService.getDailyDashboardData($scope.planDateForDb).then(function(data){

                var dPlanDate = new Date($scope.planDate.getFullYear(), $scope.planDate.getMonth(), $scope.planDate.getDate());
                var planDateDayOfWeek = days[dPlanDate.getDay()];
                $scope.planDayOfWeek = planDateDayOfWeek;

                if (data.nutritionPlan !== 'null'){
                    var plan = data.nutritionPlan;
                    for (var nMeal = 0; nMeal < plan.meals.length; nMeal++){
                        doMealTotaling(plan.meals[nMeal]);
                    }

                    calculatePlanTotalMacros(plan);

                    $scope.nutritionPlan = plan;
                }
                else{
                    $scope.nutritionPlan = null;
                }

                if(data.activityPlan !== 'null'){
                    $scope.activityPlan = data.activityPlan;
                    $scope.totalCaloriesBurned = $scope.activityPlan.totalCaloriesBurned + additionalCaloriesExpended;
                }
                else{
                    $scope.activityPlan = null;
                    $scope.totalCaloriesBurned = additionalCaloriesExpended;
                }


                if($scope.nutritionPlan) {
                    showDailyMacrosChart();
                }


            });
        };

        var showWeeklyCaloriesDeficitChart = function() {
            var caloriesList = [];
            var deficitList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                caloriesList.push(dayItem.totalPlanCalories);
                deficitList.push(parseInt(dayItem.deficit));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyCaloriesChart';
            config.data = {};
            config.data.json = {};
            config.data.json.calories = caloriesList;
            config.data.json.deficit = deficitList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"calories":"bar", "deficit": "bar"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#dailyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = $scope.nutritionPlan.totalPlanProteinAsPercent;
            config.data.json.carbs = $scope.nutritionPlan.totalPlanCarbsAsPercent;
            config.data.json.fat = $scope.nutritionPlan.totalPlanFatAsPercent;
            config.axis = {"y":{"label":{"text":"Daily Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var showAverageWeeklyMacrosChart = function() {
            var config = {};
            config.bindto = '#weeklyAverageMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.weeklyProteinAverage);
            config.data.json.carbs = parseInt($scope.weeklyCarbsAverage);
            config.data.json.fat = parseInt($scope.weeklyFatAverage);
            config.axis = {"y":{"label":{"text":"Weekly Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var getWeeklyMacrosChartData = function() {
            var fatList = [];
            var carbsList = [];
            var proteinList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                proteinList.push(parseInt(dayItem.totalPlanProteinAsPercent));
                carbsList.push(parseInt(dayItem.totalPlanCarbsAsPercent));
                fatList.push(parseInt(dayItem.totalPlanFatAsPercent));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.Protein = proteinList;
            config.data.json.Carbs = carbsList;
            config.data.json.Fat = fatList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"Protein":"line", "Carbs": "line", "Fat": "line"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        $scope.calculateDeficit = function(nutritionPlan, activityPlan){
            if(nutritionPlan) {
                var caloriesOut = additionalCaloriesExpended + $scope.bmr;

                if (activityPlan){
                    caloriesOut += activityPlan.totalCaloriesBurned;

                }

                var caloriesIn = nutritionPlan.totalPlanCalories;

                return -(caloriesIn - caloriesOut);
            }
        };

        //TODO: move into service
        var doMealTotaling = function(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        //TODO: move into service
        var calculatePlanTotalMacros = function(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates;
                fatTotal += plan.meals[i].totalFat;
                proteinTotal += plan.meals[i].totalProtein;
                caloriesTotal += plan.meals[i].totalCalories;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
            plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
            plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;
        };

        //BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
        //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
        var calculateBmr = function(){
            var age = $scope.nutritionProfile.age;
            var weightInLbs = $scope.nutritionProfile.weight;
            var heightFeet = $scope.nutritionProfile.heightFeet;
            var heightInches = $scope.nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = $scope.nutritionProfile.sex;

            //convert weight from lbs to kg:
            // kg = (weight in lbs) * .454
            var weightInKg = weightInLbs * .454;

            //convert height from inches to cms
            //height in cms = (height in inches * 2.54)
            var heightInCms = totalHeight * 2.54

            var bmr = 0;

            //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
            if(gender == "Male"){
                bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
            }
            //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
            else{
                bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
            }

            return bmr;
        };




    }


]);





//Menu service used for managing  menus
angular.module('core').service('Menus', [function () {
    // Define a set of default roles
    this.defaultRoles = ['user'];
    // Define the menus object
    this.menus = {};
    // A private function for rendering decision
    var shouldRender = function (user) {
        if (user) {
            for (var userRoleIndex in user.roles) {
                for (var roleIndex in this.roles) {
                    if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
                        return true;
                    }
                }
            }
        } else {
            return this.isPublic;
        }
        return false;
    };
    // Validate menu existance
    this.validateMenuExistance = function (menuId) {
        if (menuId && menuId.length) {
            if (this.menus[menuId]) {
                return true;
            } else {
                throw new Error('Menu does not exists');
            }
        } else {
            throw new Error('MenuId was not provided');
        }
        return false;
    };
    // Get the menu object by menu id
    this.getMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        return this.menus[menuId];
    };
    // Add new menu object by menu id
    this.addMenu = function (menuId, isPublic, roles) {
        // Create the new menu
        this.menus[menuId] = {
            isPublic: isPublic || false,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        };
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        delete this.menus[menuId];
    };
    // Add menu item object
    this.addMenuItem = function (menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Push new menu item
        this.menus[menuId].items.push({
            title: menuItemTitle,
            link: menuItemURL,
            menuItemType: menuItemType || 'item',
            menuItemClass: menuItemType,
            uiRoute: menuItemUIRoute || '/' + menuItemURL,
            isPublic: isPublic || this.menus[menuId].isPublic,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        });
        // Return the menu object
        return this.menus[menuId];
    };
    // Add submenu item object
    this.addSubMenuItem = function (menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === rootMenuItemURL) {
                // Push new submenu item
                this.menus[menuId].items[itemIndex].items.push({
                    title: menuItemTitle,
                    link: menuItemURL,
                    uiRoute: menuItemUIRoute || '/' + menuItemURL,
                    isPublic: isPublic || this.menus[menuId].isPublic,
                    roles: roles || this.defaultRoles,
                    shouldRender: shouldRender
                });
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenuItem = function (menuId, menuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
                this.menus[menuId].items.splice(itemIndex, 1);
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeSubMenuItem = function (menuId, submenuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
                if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
                    this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
                }
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    //Adding the topbar menu
    this.addMenu('topbar');
}]);'use strict';
// Config HTTP Error Handling
angular.module('users').config([
    '$httpProvider',
    function ($httpProvider) {
        // Set the httpProvider "not authorized" interceptor
        $httpProvider.interceptors.push([
            '$q',
            '$location',
            'Authentication',
            function ($q, $location, Authentication) {
                return {
                    responseError: function (rejection) {
                        switch (rejection.status) {
                            case 401:
                                // Deauthenticate the global user
                                Authentication.user = null;
                                // Redirect to signin page
                                $location.path('signin');
                                break;
                            case 403:
                                // Add unauthorized behaviour
                                break;
                        }
                        return $q.reject(rejection);
                    }
                };
            }
        ]);
    }
]);'use strict';
// Setting up route
angular.module('users').config([
    '$stateProvider',
    function ($stateProvider) {
        // Users state routing
        $stateProvider.state('profile', {
            url: '/settings/profile',
            templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
        }).state('password', {
            url: '/settings/password',
            templateUrl: 'modules/users/views/settings/change-password.client.view.html'
        }).state('accounts', {
            url: '/settings/accounts',
            templateUrl: 'modules/users/views/settings/social-accounts.client.view.html'
        }).state('signup', {
            url: '/signup',
            templateUrl: 'modules/users/views/signup.client.view.html'
        }).state('signin', {
            url: '/signin',
            templateUrl: 'modules/users/views/signin.client.view.html'
        });
    }
]);
'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication',
    function($scope, $http, $location, Authentication) {
        $scope.authentication = Authentication;

        //If user is signed in then redirect back home
        if ($scope.authentication.user) $location.path('/');

        $scope.signup = function() {
            $http.post('/auth/signup', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;

                //And redirect to the index page
                $location.path('/');
            }).error(function(response) {
                $scope.error = response.message;
            });
        };

        $scope.signin = function() {
            $http.post('/auth/signin', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;

                //And redirect to the index page
                $location.path('/');
                location.reload();
            }).error(function(response) {
                $scope.error = response.message;
            });
        };
    }
]);
angular.module('users').controller('SettingsController', [
    '$scope',
    '$http',
    '$location',
    'Users',
    'Authentication',
    function ($scope, $http, $location, Users, Authentication) {
        $scope.user = Authentication.user;
        // If user is not signed in then redirect back home
        if (!$scope.user)
            $location.path('/');
        // Check if there are additional accounts
        $scope.hasConnectedAdditionalSocialAccounts = function (provider) {
            for (var i in $scope.user.additionalProvidersData) {
                return true;
            }
            return false;
        };
        // Check if provider is already in use with current user
        $scope.isConnectedSocialAccount = function (provider) {
            return $scope.user.provider === provider || $scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider];
        };
        // Remove a user social account
        $scope.removeUserSocialAccount = function (provider) {
            $scope.success = $scope.error = null;
            $http.delete('/users/accounts', { params: { provider: provider } }).success(function (response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.user = Authentication.user = response;
            }).error(function (response) {
                $scope.error = response.message;
            });
        };
        // Update a user profile
        $scope.updateUserProfile = function () {
            $scope.success = $scope.error = null;
            var user = new Users($scope.user);
            user.$update(function (response) {
                $scope.success = true;
                Authentication.user = response;
            }, function (response) {
                $scope.error = response.data.message;
            });
        };
        // Change user password
        $scope.changeUserPassword = function () {
            $scope.success = $scope.error = null;
            $http.post('/users/password', $scope.passwordDetails).success(function (response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.passwordDetails = null;
            }).error(function (response) {
                $scope.error = response.message;
            });
        };
    }
]);'use strict';
// Authentication service for user variables
angular.module('users').factory('Authentication', [function () {
    var _this = this;
    _this._data = { user: window.user };
    return _this._data;
}]);'use strict';
// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', [
    '$resource',
    function ($resource) {
        return $resource('users', {}, { update: { method: 'PUT' } });
    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('foods').config(['$stateProvider',
    function($stateProvider) {
        // Foods state routing
        $stateProvider.
            state('listFoods', {
                url: '/foods',
                templateUrl: 'modules/foods/views/list-foods.client.view.html'
            }).
            state('createFood', {
                url: '/foods/create',
                templateUrl: 'modules/foods/views/create-food.client.view.html'
            }).
            state('viewFood', {
                url: '/foods/:foodId',
                templateUrl: 'modules/foods/views/view-food.client.view.html'
            }).
            state('editFood', {
                url: '/foods/:foodId/edit',
                templateUrl: 'modules/foods/views/edit-food.client.view.html'
            });
    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('foods').controller('FoodsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Foods',
    function($scope, $stateParams, $location, Authentication, Foods) {
        window.scope = $scope;

        // $scope.authentication = Authentication;
        $scope.servings = 1;

        $scope.servingsChange = function(food){
            if ($scope.servings > 0) {
                food.gramsDisplay = $scope.servings * food.grams;
                food.caloriesDisplay = $scope.servings * food.calories;
                food.fatDisplay = $scope.servings * food.fat;
                food.saturatedFatDisplay = $scope.servings * food.saturatedFat;
                food.transfatDisplay = $scope.servings * food.transfat;
                food.cholesterolDisplay = $scope.servings * food.cholesterol;
                food.sodiumDisplay = $scope.servings * food.sodium;
                food.carbohydratesDisplay = $scope.servings * food.carbohydrates;
                food.fiberDisplay = $scope.servings * food.fiber;
                food.sugarDisplay = $scope.servings * food.sugar;
                food.proteinDisplay = $scope.servings * food.protein;
                food.vitaminADisplay = $scope.servings * food.vitaminA;
                food.vitaminCDisplay = $scope.servings * food.vitaminC;
                food.calciumDisplay = $scope.servings * food.calcium;
                food.ironDisplay = $scope.servings * food.iron;

                $scope.totalFatDailyPercentageDisplay = (food.fatDisplay / 65) * 100;
                $scope.saturatedFatDailyPercentageDisplay = (food.saturatedFatDisplay / 20) * 100;
                $scope.cholesterolDailyPercentageDisplay = (food.cholesterolDisplay / 300) * 100;
                $scope.sodiumDailyPercentageDisplay = (food.sodiumDisplay / 2400) * 100;
                $scope.totalCarbohydratesDailyPercentageDisplay = (food.carbohydratesDisplay / 300) * 100;
                $scope.fiberDailyPercentageDisplay = (food.fiberDisplay / 25) * 100;
            }

        };

        $scope.create = function() {
            var food = new Foods({
                name: this.name,
                calories: this.calories,
                protein: $scope.protein,
                fat: $scope.fat,
                carbohydrates: $scope.carbohydrates,
                grams: $scope.grams,
                type: $scope.type,
                sodium: $scope.sodium,
                fiber: $scope.fiber,
                sugar: $scope.sugar,
                cholesterol: $scope.cholesterol,
                vitaminA: $scope.vitaminA,
                vitaminC: $scope.vitaminC,
                calcium: $scope.calcium,
                iron: $scope.iron,
                saturatedFat: $scope.saturatedFat,
                transfat: $scope.transfat
                //milliliters: $scope.milliliters
            });
            food.$save(function(response) {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            this.name = '';
            this.sodium = '';
            this.saturatedFat = '';
            this.fiber = '';
            this.sugar = '';
            this.transfat = '';
            this.vitaminA = '';
            this.vitaminC = '';
            this.cholesterol = '';
            this.calcium = '';
            this.iron = '';
            this.calories = '';
            this.protein = '';
            this.fat = '';
            this.carbohydrates = '';
            this.grams = '';
            this.type = '';
            //this.milliliters = '';
        };

        $scope.update = function() {
            var food = $scope.food;

            food.$update(function() {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.remove = function(food) {
            if (confirm("Are you sure you want to delete this food?")) {
                if (food) {
                    food.$remove();

                    for (var i in $scope.foods) {
                        if ($scope.foods[i] === food) {
                            $scope.foods.splice(i, 1);
                        }
                    }
                } else {
                    $scope.food.$remove(function () {
                        $location.path('foods');
                    });
                }
            }
        };

        $scope.find = function() {
            $scope.foods = Foods.query();


        };

        $scope.findOne = function() {
            $scope.food = Foods.get({
                foodId: $stateParams.foodId
            },function(){
                $scope.calculateDailyPercentages($scope.food);

                $scope.food.gramsDisplay = $scope.food.grams;
                $scope.food.caloriesDisplay = $scope.food.calories;
                $scope.food.fatDisplay = $scope.food.fat;
                $scope.food.saturatedFatDisplay = $scope.food.saturatedFat;
                $scope.food.transfatDisplay = $scope.food.transfat;
                $scope.food.cholesterolDisplay = $scope.food.cholesterol;
                $scope.food.sodiumDisplay = $scope.food.sodium;
                $scope.food.carbohydratesDisplay = $scope.food.carbohydrates;
                $scope.food.fiberDisplay = $scope.food.fiber;
                $scope.food.sugarDisplay = $scope.food.sugar;
                $scope.food.proteinDisplay = $scope.food.protein;
                $scope.food.vitaminADisplay = $scope.food.vitaminA;
                $scope.food.vitaminCDisplay = $scope.food.vitaminC;
                $scope.food.calciumDisplay = $scope.food.calcium;
                $scope.food.ironDisplay = $scope.food.iron;

                $scope.totalFatDailyPercentageDisplay = $scope.totalFatDailyPercentage;
                $scope.saturatedFatDailyPercentageDisplay = $scope.saturatedFatDailyPercentage;
                $scope.cholesterolDailyPercentageDisplay = $scope.cholesterolDailyPercentage;
                $scope.sodiumDailyPercentageDisplay = $scope.sodiumDailyPercentage;
                $scope.totalCarbohydratesDailyPercentageDisplay = $scope.totalCarbohydratesDailyPercentage;
                $scope.fiberDailyPercentageDisplay = $scope.fiberDailyPercentage;

                showDailyMacrosChart();
            });
        };

        $scope.calculateDailyPercentages = function(food) {
            $scope.totalFatDailyPercentage = (food.fat / 65) * 100;
            $scope.saturatedFatDailyPercentage = (food.saturatedFat / 20) * 100;
            $scope.cholesterolDailyPercentage = (food.cholesterol / 300) * 100;
            $scope.sodiumDailyPercentage = (food.sodium / 2400) * 100;
            $scope.totalCarbohydratesDailyPercentage = (food.carbohydrates / 300) * 100;
            $scope.fiberDailyPercentage = (food.fiber / 25) * 100;
        };

        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#macrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.food.proteinDisplay);
            config.data.json.carbs = parseInt($scope.food.carbohydratesDisplay);
            config.data.json.fat = parseInt($scope.food.fatDisplay);
            config.axis = {"y":{"label":{"text":"Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 280, height: 280};
            $scope.chart = c3.generate(config);
        };

    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

//Foods service used for communicating with the foods REST endpoints
angular.module('foods').factory('Foods', ['$resource',
    function($resource) {
        return $resource('foods/:foodId', {
            foodId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);


/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('nutritionProfile');


/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Nutrition Profile service used for communicating with the Nutrition Profile REST endpoint
angular.module('nutritionProfile').factory('NutritionProfile', ['$resource',
    function($resource) {

        return $resource('nutritionProfile', {
            // nutritionProfileId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });

    }
]);
//
//angular.module('nutritionProfile').factory('NutritionProfile', function($http) {
//    return {
//        get : function() {
//            return $http.get('/api/nutritionProfile');
//        },
//        create : function(nutritionProfile) {
//            return $http.post('/api/nutritionProfile', nutritionProfile);
//        }
//    }
//});

/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('nutritionProfile').config(['$stateProvider',
    function($stateProvider) {
        // nutritionProfile state routing
        $stateProvider.
            state('listNutritionProfile', {
                url: '/nutritionProfile',
                templateUrl: 'modules/nutrition-profile/views/edit-nutritionProfile.client.view.html'
            });
    }
]);


'use strict';

angular.module('nutritionProfile').controller('NutritionProfileController', ['$scope', '$stateParams', '$location', 'Authentication', 'NutritionProfile', '$timeout',
    function($scope, $stateParams, $location, Authentication, NutritionProfile, $timeout) {
        window.scope = $scope;

        $scope.sexOptions = [
            'Male',
            'Female'
        ];

        $scope.heightFeetOptions = [ 1, 2, 3, 4, 5, 6, 7, 8];
        $scope.heightInchesOptions = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];


        $scope.create = function() {
            var nutritionProfile = new NutritionProfile({
                proteinPercentageTarget: $scope.nutritionProfile.proteinPercentageTarget,
                carbohydratesPercentageTarget: $scope.nutritionProfile.carbohydratesPercentageTarget,
                fatPercentageTarget: $scope.nutritionProfile.fatPercentageTarget,
                deficitTarget: $scope.nutritionProfile.deficitTarget,
                age: $scope.nutritionProfile.age,
                sex: $scope.nutritionProfile.sex,
                weight: $scope.nutritionProfile.weight,
                heightFeet: $scope.nutritionProfile.heightFeet,
                heightInches: $scope.nutritionProfile.heightInches,
                restingHeartRate: $scope.nutritionProfile.restingHeartRate,
                bodyFatPercentage: $scope.nutritionProfile.bodyFatPercentage
            });
            nutritionProfile.$save(function(response) {

                $scope.nutritionProfile = response;

                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.update = function() {
            var nutritionProfile = $scope.nutritionProfile;

            if (!nutritionProfile._id) {
                $scope.create();
            }
            else {
                nutritionProfile.$update(function () {
                    $scope.success = true;

                    $timeout(function(){$scope.success = false;}, 3000);
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }

        }

        $scope.findOne = function () {
            $scope.nutritionProfile = NutritionProfile.get({
                userId: user ? user._id : null
            }, function () {

            });
        };


    }
]);

'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('activities');


/**
 * Created by jason on 9/8/14.
 */
// Configuring the Articles module
angular.module('activities').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Activities', 'activities', 'dropdown', '/activities(/create)?');
        Menus.addSubMenuItem('topbar', 'activities', 'List Activities', 'activities');
        Menus.addSubMenuItem('topbar', 'activities', 'New Activity', 'activities/create');
    }
]);
/**
 * Created by jason on 9/8/14.
 */

'use strict';

// Setting up route
angular.module('activities').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listActivities', {
                url: '/activities',
                templateUrl: 'modules/activities/views/list-activities.client.view.html'
            }).
            state('createActivity', {
                url: '/activities/create',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('createActivity2', {
                url: '/activities/create/:planDateForCreate',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('viewActivity', {
                url: '/activities/:activityId',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('editActivity', {
                url: '/activities/:activityId/edit',
                templateUrl: 'modules/activities/views/edit-activity.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/9/14.
 */

'use strict';

//Activities service used for communicating with the activities REST endpoints
angular.module('activities').factory('Activities', ['$resource',
    function($resource) {
        return $resource('activities/:activityId', {
            activityId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);
/**
 * Created by jason on 9/8/14.
 */

'use strict';

angular.module('activities').controller('ActivitiesController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'Activities', 'NutritionProfile',
    function($scope, $stateParams, $timeout, $location, Authentication, Activities, NutritionProfile) {
        window.scope = $scope;
        $scope.showPlanEditableErrorMsg = false;
        $scope.isSortingEnabled = false;
        var sortingBtnTxtOptions = ['Enable Sorting', 'Disable Sorting'];
        $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
        var isSortingEnabled = false;

        $scope.authentication = Authentication;
        $scope.nutritionProfile = NutritionProfile.get();

        $scope.activityTypeCategories = [
            'Endurance', 'Strength', 'Balance', 'Flexibility'
        ];


        // $scope.planDateParam = $routeParams.planDateForCreate;


        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'}

        ];

        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.environments = [
            {id: 0, name: 'Outdoors'},
            {id: 1, name: 'Indoors'}
        ];

        $scope.intensityList = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        ];

        $scope.directionList = ['Ascending', 'Descending'];

//        $scope.activityFieldsList = ['planDate', 'steps', 'weight', 'duration', 'distance', 'averageHeartRate',
//            'activityType', 'averageSpeed', 'intensity', ];

        $scope.selectedDirection = 'Descending';

        $scope.calculateTotalCaloriesBurned = function(){
            var total = 0;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];
                var calories = activity.caloriesBurned;

                total += calories;
            }

            $scope.plan.totalCaloriesBurned = total;
        };

        //formulate for calculating calories burned for men:
        // [(Age x 0.2017) — (Weight x 0.09036) + (Heart Rate x 0.6309) — 55.0969] x Time / 4.184.
        //formulate for calculating calories burned for women:
        // [(Age x 0.074) — (Weight x 0.05741) + (Heart Rate x 0.4472) — 20.4022] x Time / 4.184.
        $scope.calculateCalories = function(activity){
            var age = $scope.nutritionProfile.age;
            var weight = $scope.nutritionProfile.weight;
            var heightFeet = $scope.nutritionProfile.heightFeet;
            var heightInches = $scope.nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = $scope.nutritionProfile.sex;

            var averageHeartRate = parseInt(activity.averageHeartRate);
            var duration = parseInt(activity.duration);

            var caloriesBurned = 0;

            if(duration > 0) {
                if (!averageHeartRate){
                    averageHeartRate = 120;
                }

                if (gender === 'Male') {
                    caloriesBurned = (((age * 0.2017) - (weight * 0.09036) + (averageHeartRate * 0.6309) - 55.0969) * duration) / 4.184;
                }
                else {
                    caloriesBurned = (((age * 0.074) - (weight * 0.05741) + (averageHeartRate * 0.4472) - 20.4022) * duration) / 4.184;

                }
            }
            else{
                if(!averageHeartRate || averageHeartRate <= 0){
                    var steps = activity.steps;
                    if(steps > 0) {
                        var caloriesBurnedInMile = 0.57 * weight;
                        var stepsInMiles = steps / 2000;

                        caloriesBurned = stepsInMiles * caloriesBurnedInMile;
                    }
                }
            }

            activity.caloriesBurned = caloriesBurned;

            $scope.calculateTotalCaloriesBurned();
        };

        $scope.isActivityEndurance = function(activity){
            var activityTypeId = activity.activityType;

            var type = $scope.activityTypesDictionary[activityTypeId].type;

            return type === 0;
        };

        $scope.isActivityDistanceRelated = function(activity){
            var activityTypeId = activity.activityType;

            var type = $scope.activityTypesDictionary[activityTypeId].name;

            return type === 'Running' || type === 'Walking';
        };

        $scope.toggleSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').removeClass('disabled');
                isSortingEnabled = true;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[1];
            }
            else{
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
            }
        };

        $scope.setSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;

            }

        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.plan.activities.splice(end, 0,
                $scope.plan.activities.splice(start, 1)[0]);

            $scope.$apply();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };

        $scope.create = function() {
            var planDateAsString = $scope.plan.planDateNonUtc.toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();


            var plan = new Activities({
                planDateForDB: planDateAsString,
                planDateAsMili: planDate.getTime(),
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                totalCaloriesBurned: $scope.plan.totalCaloriesBurned,
                activities: $scope.plan.activities
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = response.planDateNonUtc;
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.totalCaloriesBurned = 0;
            $scope.plan.activities = [];
        };

        $scope.copyPlan = function(planCopyModel){
            var plan = new Activities({
                planDate: planCopyModel.planDate,
                activities: planCopyModel.activities
            });
            plan.$save(function(response) {
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.createActivity = function(){
            var model = {
                name: '',
                activityType: 28,
                activityName: 'Walking',
                steps: 0,
                intensity: 1,
                distance: 0,
                equipment: 0,
                duration: 0,
                averageHeartRate: 0,
                caloriesBurned: 0,
                averageSpeed: 0,
                reps: 0,
                sets: 0,
                weight: 0,
                isVisible: true,
                isEditable: true
            };

            $scope.plan.activities.push(model);

            $scope.calculateCalories(model);

            $timeout(function(){$scope.setSorting();}, 100);
        };

        $scope.editActivity = function(activity){
            activity.isEditable = true;
            activity.isVisible = !activity.isVisible;
        };

        $scope.saveActivity = function(activity){
            activity.isEditable = false;
            activity.isVisible = !activity.isVisible;
        };



        $scope.deleteActivity = function(activity){
            if (confirm("Are you sure you want to delete this activity?")) {
                for (var i in $scope.plan.activities) {
                    if ($scope.plan.activities[i] === activity) {
                        $scope.plan.activities.splice(i, 1);
                    }
                }
            }
        };



        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.activities) {
                    if ($scope.activities[i] === plan) {
                        $scope.activities.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('activities');
                });
            }
        };

        $scope.saveActivityPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];

                activity.isEditable = false;

                var isStrengthActivity = $scope.activityTypesDictionary[activity.activityType].type === 1;

                if (isStrengthActivity){
                    activity.steps = 0;
                    activity.averageSpeed = 0;
                    activity.distance = 0;
                }
            }

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('activities');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;
            plan.totalCaloriesBurned = plan.totalCaloriesBurned;
            plan.planDateAsMili = planDate.getTime();

            plan.$update(function() {
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);
                $timeout(function(){$scope.setSorting();}, 100);

            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.activities = Activities.query(
                function(u, getResponseHeaders)
                {

                }
            );


        };

        $scope.findOne = function() {
            if ($stateParams.activityId) {
                $scope.plan = Activities.get({
                    activityId: $stateParams.activityId
                }, function (u, getResponseHeaders) {
                    if (!$scope.plan.planDateNonUtc){
                        $scope.plan.planDateNonUtc = $scope.plan.planDate;
                    }

                    $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

                    $scope.calculateTotalCaloriesBurned();

                });
            }
            else{
                $scope.plan =  {data: null, activities: null, planDate: new Date(), planDateNonUtc: new Date()};
                $scope.plan.activities = [];

                //todo use ngRouter instead of this horrible method for extracting url param
                var urlSplit = $location.path().split('/');
                if(urlSplit.length >= 3){
                    var dateParam;

                    if(urlSplit.length == 4) {
                        dateParam = urlSplit[3];
                    }
                    else{
                        dateParam = urlSplit[2];
                    }

                    if(dateParam.indexOf('_') !== -1){
                        var dateParamSplit = dateParam.split('_');

                        var dateDay = parseInt(dateParamSplit[1]);
                        var dateYear = parseInt(dateParamSplit[2]);
                        var dateMonth = parseInt(dateParamSplit[0]);

                        $scope.plan.planDate = new Date(dateYear, dateMonth, dateDay);
                        $scope.plan.planDateNonUtc = new Date(dateYear, dateMonth, dateDay);
                    }
                }

                $scope.createActivity();

            }
        };


        $scope.toggleActivityVisibility = function(activity){
            activity.isVisible = !activity.activity;
        };


        var checkIfPlanEditable = function(){
            var isPlanEditable = false;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var planActivity = $scope.plan.activities[i];

                if (planActivity.isEditable){
                    isPlanEditable = true;
                    break;
                }
            }

            return isPlanEditable;
        };

        //sorting code
        // data
        $scope.orderByField = 'planDateAsMili';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('bodyStats');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('bodyStats').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Body Stats', 'bodyStats', 'dropdown', '/body-stats(/create)?');
        Menus.addSubMenuItem('topbar', 'bodyStats', 'List Body Stats', 'body-stats');
        Menus.addSubMenuItem('topbar', 'bodyStats', 'New Body Stat', 'body-stats/create');
    }
]);

/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Setting up route
angular.module('bodyStats').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listBodyStats', {
                url: '/body-stats',
                templateUrl: 'modules/body-stats/views/list-body-stats.client.view.html'
            }).
            state('createBodyStat', {
                url: '/body-stats/create',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('viewBodyStat', {
                url: '/body-stats/:bodyStatId',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('editBodyStat', {
                url: '/body-stats/:bodyStatId/edit',
                templateUrl: 'modules/body-stats/views/edit-body-stat.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/19/14.
 */

'use strict';

//Body Stats service used for communicating with the body stats REST endpoints
angular.module('bodyStats').factory('BodyStats', ['$resource',
    function($resource) {
        return $resource('body-stats/:bodyStatId', {
            bodyStatId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

/**
 * Created by jason on 9/19/14.
 */
'use strict';

angular.module('bodyStats').controller('BodyStatsController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'BodyStats',
    function($scope, $stateParams, $timeout, $location, Authentication, BodyStats) {
        window.scope = $scope;
        $scope.showPlanEditableErrorMsg = false;


        $scope.authentication = Authentication;


        $scope.directionList = ['Ascending', 'Descending'];
        $scope.selectedDirection = 'Descending';

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.create = function() {
            var planDateAsString = $scope.plan.planDateNonUtc.toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            var plan = new BodyStats({
                planDateForDB: planDateAsString,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                planDateAsMili: planDate.getTime(),
                weight: $scope.plan.weight,
                bodyFatPercentage: $scope.plan.bodyFatPercentage
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = response.planDateNonUtc;
                $location.path('body-stats/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.bodyFatPercentage = 0;
            $scope.plan.weight = 0;
        };


        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.bodyStats) {
                    if ($scope.bodyStats[i] === plan) {
                        $scope.bodyStats.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('body-stats');
                });
            }
        };

        $scope.saveBodyStatPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('body-stats');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();


            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;
            plan.planDateAsMili = planDate.getTime();
            plan.weight = plan.weight;
            plan.bodyFatPercentage = plan.bodyFatPercentage;

            plan.$update(function() {
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);


            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.bodyStats = BodyStats.query(
                function(u, getResponseHeaders)
                {

                }
            );


        };

        $scope.findOne = function() {
            if ($stateParams.bodyStatId) {
                $scope.plan = BodyStats.get({
                    bodyStatId: $stateParams.bodyStatId
                }, function (u, getResponseHeaders) {
                    if (!$scope.plan.planDateNonUtc){
                        $scope.plan.planDateNonUtc = $scope.plan.planDate;
                    }

                    $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;


                });
            }
            else{
                $scope.plan =  {weight: null, bodyFatPercentage: null, planDate: new Date(), planDateNonUtc: new Date()};


            }
        };



        //sorting code
        // data
        $scope.orderByField = 'planDateAsMili';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('progress');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('progress').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Progress', 'progress', 'dropdown', '/progress(/create)?');
        Menus.addSubMenuItem('topbar', 'progress', 'Show Progress', 'progress');
        //Menus.addSubMenuItem('topbar', 'progress', 'New Body Stat', 'body-stats/create');
    }
]);

'use strict';

// Setting up route
angular.module('progress').config(['$stateProvider',
    function($stateProvider) {
        // progress state routing
        $stateProvider.
            state('listProgress', {
                url: '/progress',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('createProgress', {
                url: '/progress/create',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('viewProgress', {
                url: '/progress/:progressId',
                //templateUrl: 'modules/progress/views/view-progress.client.view.html'
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('editProgress', {
                url: '/progress/:progressId/edit',
                //templateUrl: 'modules/progress/views/edit-progress.client.view.html'
                templateUrl: 'modules/progress/views/create-progress.client.view.html'
            });
    }
]);

'use strict';

//progress service used for communicating with the progress REST endpoints
angular.module('progress').factory('Progress', ['$resource',
    function($resource) {
        return $resource('progress/:progressId', {
            progressId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

/**
 * Created by jason on 9/4/14.
 */
'use strict';

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
    Plan = mongoose.model('Plan'),
    Food = mongoose.model('Food'),
    Activity = mongoose.model('Activity'),
    BodyStats = mongoose.model('BodyStats'),
    NutritionProfile = mongoose.model('NutritionProfile'),
    _ = require('lodash');

/**
 * Get the error message from error object
 */
var getErrorMessage = function(err) {
    var message = '';

    if (err.code) {
        switch (err.code) {
            case 11000:
            case 11001:
                //  message = 'user nutrition profile already exists';
                break;
            default:
                message = 'Something went wrong';
        }
    } else {
        for (var errName in err.errors) {
            if (err.errors[errName].message) message = err.errors[errName].message;
        }
    }

    return message;
};

exports.progressByID = function(req, res){
    var startDate = req.param("progressId");
    var split = startDate.split('_');
    var planDateMonth = parseInt(split[1]);
    var planDateDay = parseInt(split[2]);
    var planDateYear = parseInt(split[0]);

    NutritionProfile.findOne({
        user: req.user.id // Search Filters
    }).exec(function (err, nutritionProfile) {
        if (err) {
            return res.send(400, {
                message: getErrorMessage(err)
            });
        }
        else {
            Plan.findOne({
                    'user': req.user.id,
                    'planDateYear': planDateYear,
                    'planDateMonth': planDateMonth,
                    'planDateDay': planDateDay
                }
            )
                .exec(function (err, plan) {
                    if (err) return next(err);

                    else {
                        var bmr = calculateBmr(nutritionProfile);

                        var singlePlan = plan;

                        for (var nMeal = 0; nMeal < singlePlan.meals.length; nMeal++) {
                            doMealTotaling(singlePlan.meals[nMeal]);
                        }

                        calculatePlanTotalMacros(singlePlan);

                        Activity.findOne({
                            'user': req.user.id,
                            'planDateYear': planDateYear,
                            'planDateMonth': planDateMonth,
                            'planDateDay': planDateDay})
                            .exec(function (err, activity) {
                                if (err) return next(err);

                                else {
                                    var deficit = calculateDeficit(singlePlan, activity, bmr);
                                    plan.deficit = deficit;

                                    res.jsonp(plan);
                                }

                            });
                    }
                });
        }
    });
};

exports.list = function(req, res){
    if(req.user) {
        var startDate = req.param("startDate");
        var split = startDate.split('_');
        var startDateMonth = parseInt(split[1]);
        var startDateDay = parseInt(split[2]);
        var startDateYear = parseInt(split[0]);

        var endDate = req.param("endDate");
        var split2 = endDate.split('_');
        var endDateMonth = parseInt(split2[1]);
        var endDateDay = parseInt(split2[2]);
        var endDateYear = parseInt(split2[0]);

        var endDateAsConcat = parseInt(endDateYear + '' + (endDateMonth < 10 ? '0' + endDateMonth : endDateMonth) + '' + (endDateDay < 10 ? '0' + endDateDay : endDateDay));
        var startDateAsConcat = parseInt(startDateYear + '' + (startDateMonth < 10 ? '0' + startDateMonth : startDateMonth) + '' + (startDateDay < 10 ? '0' + startDateDay : startDateDay));

        //var miliPadding = 76000000;

        //var endDateAsMili = new Date(new Date(endDateYear,endDateMonth,endDateDay).toUTCString()).getTime() + miliPadding;
        //var startDateAsMili = new Date(new Date(startDateYear,startDateMonth,startDateDay).toUTCString()).getTime();
        //planDate

        NutritionProfile.findOne({
            user: req.user.id // Search Filters
        }).exec(function (err, nutritionProfile) {
            if (err) {
                return res.send(400, {
                    message: getErrorMessage(err)
                });
            }
            else {
                Plan.find({
                        'user': req.user.id,
                        'planDateAsConcat': {$gte: startDateAsConcat, $lte: endDateAsConcat}
                    }
                )
                    .sort({
                        planDateAsMili: 1 //Sort by Date Added DESC
                    }).exec(function (err, plans) {
                        if (err) return next(err);

                        else {
                            getProgress(res, req, plans, nutritionProfile, endDateYear, startDateYear, endDateMonth, startDateMonth, endDateDay, startDateDay);
                        }
                    });
            }
        });
    }


};

var getProgress = function(res, req, plans, nutritionProfile, endDateYear, startDateYear, endDateMonth, startDateMonth, endDateDay, startDateDay){
    var bmr = calculateBmr(nutritionProfile);

    var plansDict = [];

    for (var i = 0; i < plans.length; i++) {
        var singlePlan = plans[i];

        var dateForDict = singlePlan.planDateYear + '_' + singlePlan.planDateMonth + '_' + singlePlan.planDateDay;
        plansDict.push({
            planDate: dateForDict,
            plan: singlePlan
        });

        for (var nMeal = 0; nMeal < singlePlan.meals.length; nMeal++) {
            doMealTotaling(singlePlan.meals[nMeal]);
        }

        calculatePlanTotalMacros(singlePlan);

    }

//                        BodyStats.find({'planDateYear': {$lte: endDateYear, $gte: startDateYear}, 'planDateMonth': {$lte: endDateMonth, $gte: startDateMonth}, 'planDateDay': {$lte: endDateDay, $gte: startDateDay}, 'user': req.user.id})
//                            .sort({
//                                planDateYear: 1, //Sort by Date Added DESC
//                                planDateMonth: 1, //Sort by Date Added DESC
//                                planDateDay: 1 //Sort by Date Added DESC
//                            })
//                            .exec(function (err, bodyStats) {
//                            if (err) return next(err);
//
//                            var bodyStatsNonZeroList = [];
//
//                            for (var i = 0; i < plansDict.length; i++) {
//                                if(bodyStats && bodyStats.length > 0) {
//                                    var isPlanWeightMatchFound = false;
//
//                                    for(var b = 0; b < bodyStats.length; b++){
//                                        var bodyStatFromDb = bodyStats[b];
//
//                                        var bodyStatPlanDt = bodyStatFromDb.planDateYear + '_' + bodyStatFromDb.planDateMonth + '_' + bodyStatFromDb.planDateDay;
//
//                                        if (plansDict[i].planDate == bodyStatPlanDt) {
//                                            bodyStatsNonZeroList.push(
//                                                {
//                                                    dateYear: plansDict[i].plan.planDateYear,
//                                                    dateMonth: plansDict[i].plan.planDateMonth,
//                                                    dateDay: plansDict[i].plan.planDateDay,
//                                                    weight: bodyStatFromDb.weight
//                                                }
//                                            );
//
//                                            plansDict[i].plan.bodyWeight = bodyStatFromDb.weight;
//
//                                            isPlanWeightMatchFound = true;
//                                           // break;
//                                        }
//                                    }
//
//                                    if(!isPlanWeightMatchFound){
//                                        plansDict[i].plan.bodyWeight = bodyStatsNonZeroList[bodyStatsNonZeroList.length - 1].weight;
//
//                                        bodyStatsNonZeroList.push(plansDict[i].plan.bodyWeight);
//                                    }
//                                }
//
//                            }
//
//                            Activity.find({'planDateYear': {$lte: endDateYear, $gte: startDateYear}, 'planDateMonth': {$lte: endDateMonth, $gte: startDateMonth}, 'planDateDay': {$lte: endDateDay, $gte: startDateDay}, 'user': req.user.id}).exec(function (err, activities) {
//                                if (err) return next(err);
//
//                                for (var i = 0; i < plansDict.length; i++) {
//                                    var activityFoundPlan = null;
//
//                                    if(activities && activities.length > 0) {
//                                        for(var act = 0; act < activities.length; act++){
//                                            var activityFromDb = activities[act];
//
//                                            var activityPlanDt = activityFromDb.planDateYear + '_' + activityFromDb.planDateMonth + '_' + activityFromDb.planDateDay;
//
//                                            if (plansDict[i].planDate == activityPlanDt) {
//                                                activityFoundPlan = activities[act];
//                                            }
//                                        }
//                                    }
//
//                                    var deficit = calculateDeficit(plansDict[i].plan, activityFoundPlan, bmr);
//                                    plansDict[i].plan.deficit = deficit;
//                                }
//
//                                res.jsonp(plans);
//
//                            });
//
//
//                        });
//


    Activity.find({'planDateYear': {$lte: endDateYear, $gte: startDateYear}, 'planDateMonth': {$lte: endDateMonth, $gte: startDateMonth}, 'planDateDay': {$lte: endDateDay, $gte: startDateDay}, 'user': req.user.id}).exec(function (err, activities) {
        if (err) return next(err);

        for (var i = 0; i < plansDict.length; i++) {
            var activityFoundPlan = null;

            if(activities && activities.length > 0) {
                for(var act = 0; act < activities.length; act++){
                    var activityFromDb = activities[act];

                    var activityPlanDt = activityFromDb.planDateYear + '_' + activityFromDb.planDateMonth + '_' + activityFromDb.planDateDay;

                    if (plansDict[i].planDate == activityPlanDt) {
                        activityFoundPlan = activities[act];
                    }
                }
            }

            var deficit = calculateDeficit(plansDict[i].plan, activityFoundPlan, bmr);
            plansDict[i].plan.deficit = deficit;
        }

        res.jsonp(plans);

    });
}


exports.progressByDate = function(req, res, next){
    var test = "test";
};

exports.create = function(req, res){
    var test = "test";
};

exports.update = function(req, res){
    var test = "test";
};

exports.delete = function(req, res){
    var test = "test";
};


/**
 * Show the current profile
 */
exports.read = function(req, res) {
    NutritionProfile.findOne({
        user:req.user.id // Search Filters
    }).exec(function(err, nutritionProfile) {
        if (err) {
            return res.send(400, {
                message: getErrorMessage(err)
            });
        } else {
            res.jsonp(nutritionProfile);
        }
    });
};


/**
 * Plan middleware
 */
exports.progressByStartDateAndEndDate = function(req, res, next, startDate) {

};


var calculateDeficit = function(nutritionPlan, activityPlan, bmr){
    var additionalCaloriesExpended = 300;
    var caloriesOut = additionalCaloriesExpended + bmr;

    if (activityPlan){
        caloriesOut = activityPlan.totalCaloriesBurned + bmr + additionalCaloriesExpended;

    }

    var caloriesIn = nutritionPlan.totalPlanCalories;

    return -(caloriesIn - caloriesOut);

};

//BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
//BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
var calculateBmr = function(nutritionProfile){
    var age = nutritionProfile.age;
    var weightInLbs = nutritionProfile.weight; //TODO get most recent weight instead of static one
    var heightFeet = nutritionProfile.heightFeet;
    var heightInches = nutritionProfile.heightInches;
    var totalHeight = (heightFeet * 12) + heightInches;
    var gender = nutritionProfile.sex;

    //convert weight from lbs to kg:
    // kg = (weight in lbs) * .454
    var weightInKg = weightInLbs * .454;

    //convert height from inches to cms
    //height in cms = (height in inches * 2.54)
    var heightInCms = totalHeight * 2.54

    var bmr = 0;

    //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
    if(gender == "Male"){
        bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
    }
    //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
    else{
        bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
    }

    return bmr;
};


var doMealTotaling = function(meal){
    var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

    for(var i = 0; i < meal.foods.length; i++){
        var foodCarbs = meal.foods[i].carbohydrates;

        carbsTotal += foodCarbs;
        fatTotal += meal.foods[i].fat;
        proteinTotal += meal.foods[i].protein;
        caloriesTotal += meal.foods[i].calories;
        sodiumTotal += meal.foods[i].sodium;
    }

    meal.totalCarbohydrates = carbsTotal;
    meal.totalProtein = proteinTotal;
    meal.totalCalories = caloriesTotal;
    meal.totalFat = fatTotal;
    meal.totalSodium = sodiumTotal;
};

var calculatePlanTotalMacros = function(plan){
    var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

    for (var i = 0; i < plan.meals.length; i++){
        carbsTotal += plan.meals[i].totalCarbohydrates;
        fatTotal += plan.meals[i].totalFat;
        proteinTotal += plan.meals[i].totalProtein;
        caloriesTotal += plan.meals[i].totalCalories;
    }

    plan.totalPlanCarbs = carbsTotal;
    plan.totalPlanFat = fatTotal;
    plan.totalPlanProtein = proteinTotal;
    plan.totalPlanCalories = caloriesTotal;

    //calculate totals as percent
    var macroTotals = carbsTotal + fatTotal + proteinTotal;
    plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
    plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
    plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;
};

///**
// * user authorization middleware
// */
//exports.hasAuthorization = function(req, res, next) {
//    if (req.plan.user.id !== req.user.id) {
//        return res.send(403, {
//            message: 'User is not authorized'
//        });
//    }
//    next();
//};