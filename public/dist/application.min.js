'use strict';
// Init the application configuration module for AngularJS application
var ApplicationConfiguration = function () {
    // Init module configuration options
    var applicationModuleName = 'nutrition-manager';
    var applicationModuleVendorDependencies = [
        'ngResource',
        'ngAnimate',
        'ui.router',
        'ui.bootstrap',
        'ui.utils'
    ];
    // Add a new vertical module
    var registerModule = function (moduleName) {
        // Create angular module
        angular.module(moduleName, []);
        // Add the module to the AngularJS configuration file
        angular.module(applicationModuleName).requires.push(moduleName);
    };
    return {
        applicationModuleName: applicationModuleName,
        applicationModuleVendorDependencies: applicationModuleVendorDependencies,
        registerModule: registerModule
    };
}();'use strict';
//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);
// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config([
    '$locationProvider',
    function ($locationProvider) {
        $locationProvider.hashPrefix('!');
    }
]);
//Then define the init function for starting up the application
angular.element(document).ready(function () {
    //Fixing facebook bug with redirect
    if (window.location.hash === '#_=_')
        window.location.hash = '#!';
    //Then init the app
    angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('plans');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('foods');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');'use strict';

//ApplicationConfiguration.registerModule('customDirectives', []);

angular.module('core').directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
    // contains
    function contains(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    return true;
                }
            }
        }
        return false;
    }

    // add
    function add(arr, item) {
        arr = angular.isArray(arr) ? arr : [];
        for (var i = 0; i < arr.length; i++) {
            if (angular.equals(arr[i], item)) {
                return arr;
            }
        }
        arr.push(item);
        return arr;
    }

    // remove
    function remove(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    arr.splice(i, 1);
                    break;
                }
            }
        }
        return arr;
    }

    // http://stackoverflow.com/a/19228302/1458162
    function postLinkFn(scope, elem, attrs) {
        // compile with `ng-model` pointing to `checked`
        $compile(elem)(scope);

        // getter / setter for original model
        var getter = $parse(attrs.checklistModel);
        var setter = getter.assign;

        // value added to list
        var value = $parse(attrs.checklistValue)(scope.$parent);

        // watch UI checked change
        scope.$watch('checked', function(newValue, oldValue) {
            if (newValue === oldValue) {
                return;
            }
            var current = getter(scope.$parent);
            if (newValue === true) {
                setter(scope.$parent, add(current, value));
            } else {
                setter(scope.$parent, remove(current, value));
            }
        });

        // watch original model change
        scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
            scope.checked = contains(newArr, value);
        }, true);
    }

    return {
        restrict: 'A',
        priority: 1000,
        terminal: true,
        scope: true,
        compile: function(tElement, tAttrs) {
            if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
                throw 'checklist-model should be applied to `input[type="checkbox"]`.';
            }

            if (!tAttrs.checklistValue) {
                throw 'You should provide `checklist-value`.';
            }

            // exclude recursion
            tElement.removeAttr('checklist-model');

            // local scope var storing individual checkbox model
            tElement.attr('ng-model', 'checked');

            return postLinkFn;
        }
    };
}]);

angular.module(ApplicationConfiguration.applicationModuleName).filter('filterFoodsByPartialText', function (CoreUtilities) {
    // function that's invoked each time Angular runs $digest()
    // pass in `item` which is the single Object we'll manipulate
    return function (foodsAry, foodText) {
        var newFoods = CoreUtilities.getFoods(foodText);

        return newFoods.then(getRetrievedFoodsFromDb);
    };

    var getRetrievedFoodsFromDb = function(response){
        return response.data;
    };
});

/**
 * Created by jason on 9/7/14.
 */

angular.module('core').directive('sortable', ['$parse', '$compile', function($parse, $compile) {
    return {
        scope: {
            start: '@',
            startcallback: '=',
            update: '@',
            disableallelementsbydefault: '=',
            updatecallback: '=',
            rootsortableelement:'@'
        },

        link: function (scope, element, attrs, ctrl) {
            scope.updateEvent = function(e, ui){
                scope.$apply(scope.updatecallback(e, ui));
            };

            scope.startEvent = function(e, ui){
                scope.$apply(scope.startcallback(e, ui));
            };

            var sortableElement = jQuery(element).find(scope.rootsortableelement);

//            jQuery(document).loaded(function(){
//                if(scope.disableallelementsbydefault === true){
//                    jQuery('.ui-sortable').find('.panel-default').addClass('disabled');
//                }
//            });


            jQuery(sortableElement).sortable({
                start: scope.startEvent,
                update: scope.updateEvent,
                cancel:".disabled"
            });

        }
    }

}]);

var chartControllerScope = null;

angular.module('core')
    .controller('ChartController',['$scope', function($scope) {
        chartControllerScope = $scope;

        $scope.chart = null;
        $scope.columns = [];
        $scope.types = {};
        $scope.axis = {};
        $scope.axes = {};
        $scope.xValues= null;
        $scope.xTick = null;
        $scope.names = null;
        $scope.colors = null;
        $scope.grid = null;
        $scope.legend = null;
        $scope.tooltip = null;
        $scope.chartSize = null;
        $scope.colors = null;
        $scope.jsonKeys = null;



        this.showGraph = function() {
            var config = {};
            config.bindto = "#"+$scope.bindto;
            config.data = {}

            if ($scope.chartData && $scope.chartColumns) {
                $scope.$watchCollection('chartData', function() {
                    loadChartData();
                });
                $scope.jsonKeys = {};
                $scope.jsonKeys.value=[];
                angular.forEach($scope.chartColumns, function(column) {
                    $scope.jsonKeys.value.push(column.id);
                    addColumnProperties(column.id ,column.type, column.name, column.color);
                });
                if ($scope.chartX) {
                    $scope.jsonKeys.x=$scope.chartX.id;
                }
                config.data.keys=$scope.jsonKeys;
                config.data.json=$scope.chartData;
            }

            if ($scope.xValues) {
                config.data.x=$scope.xValues;
            }
            if ($scope.columns) {
                config.data.columns = $scope.columns;
            }
            config.data.types = $scope.types;
            config.data.axes = $scope.axes;
            if ($scope.names) {
                config.data.names = $scope.names;
            }
            if ($scope.colors) {
                config.data.colors = $scope.colors;
            }
            if ($scope.showLabels && $scope.showLabels === "true") {
                config.data.labels=true;
            }
            if ($scope.showSubchart && $scope.showSubchart === "true") {
                config.subchart = {"show":true};
            }
            if ($scope.enableZoom && $scope.enableZoom === "true") {
                config.zoom = {"enabled":true};
            }
            config.axis = $scope.axis;
            if ($scope.xTick) {
                config.axis.x.tick = $scope.xTick;
            }
            if ($scope.grid != null) {
                config.grid = $scope.grid;
            }
            if ($scope.legend != null) {
                config.legend = $scope.legend;
            }
            if ($scope.tooltip != null) {
                config.tooltip = $scope.tooltip;
            }
            if ($scope.chartSize != null) {
                config.size = $scope.chartSize;
            }
            if ($scope.colors != null) {
                config.color = {"pattern":$scope.colors};
            }
            $scope.chart = c3.generate(config);
        };

        this.addColumn = function(column,columnType,columnName,columnColor) {
            $scope.columns.push(column);
            addColumnProperties(column[0], columnType, columnName, columnColor);
        };

        this.addYAxis = function(yAxis) {
            $scope.axes = yAxis;
            if (!$scope.axis.y2) {
                $scope.axis.y2={"show":true};
            }
        };

        this.addXAxisValues = function(xValues) {
            $scope.xValues = xValues;
        };

        this.addAxisProperties = function(id,axis) {
            $scope.axis[id]=axis;
        };

        this.addXTick = function(tick) {
            $scope.xTick = tick;
        };

        this.rotateAxis = function() {
            $scope.axis.rotated = true;
        };

        this.addGrid = function(axis) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if ($scope.grid[axis] == null) {
                $scope.grid[axis] = {};
            }
            $scope.grid[axis].show = true;
        };

        this.addGridLine = function(axis,value,text) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if (axis === "x") {
                if ($scope.grid.x == undefined) {
                    $scope.grid.x = {};
                }
                if ($scope.grid.x.lines == undefined) {
                    $scope.grid.x.lines = [];
                }
            } else {
                if ($scope.grid.y == undefined) {
                    $scope.grid.y = {};
                }
                if ($scope.grid.y.lines == undefined) {
                    $scope.grid.y.lines = [];
                }

            }
            if (axis === "y2") {
                $scope.grid.y.lines.push({"value":value,"text":text,"axis":"y2"});
            } else {
                $scope.grid[axis].lines.push({"value":value,"text":text})
            }
        };

        this.addLegend = function(legend) {
            $scope.legend = legend;
        };

        this.addTooltip = function(tooltip) {
            $scope.tooltip = tooltip;
        };

        this.addSize = function(chartSize) {
            $scope.chartSize = chartSize;
        };

        this.addColors = function(colors) {
            $scope.colors = colors;
        };

        function addColumnProperties(id, columnType, columnName, columnColor) {
            if (columnType !== undefined) {
                $scope.types[id]=columnType;
            }
            if (columnName !== undefined) {
                if ($scope.names === null) {
                    $scope.names = {};
                }
                $scope.names[id]=columnName;
            }
            if (columnColor !== undefined) {
                if ($scope.colors === null) {
                    $scope.colors = {};
                }
                $scope.colors[id]=columnColor;
            }
        }

        function loadChartData() {
            var data = {};
            data.keys=$scope.jsonKeys;
            data.json=$scope.chartData;

            $scope.chart.load(data);
        }
    }])
    .directive('c3chart', function($timeout) {
        var chartLinker = function(scope,element,attrs,chartCtrl) {
            // Trick to wait for all rendering of the DOM to be finished.
            $timeout(function() {
                chartCtrl.showGraph()
            });
        };

        return {
            "restrict": "E",
            "controller":"ChartController",
            "scope": {
                "bindto":"@bindtoId",
                "showLabels":"@showLabels",
                "showSubchart":"@showSubchart",
                "enableZoom":"@enableZoom",
                "chartData":"=chartData",
                "chartColumns":"=chartColumns",
                "chartX":"=chartX"
            },
            "template":"<div><div id='{{bindto}}'></div><div ng-transclude></div></div>",
            "replace":true,
            "transclude":true,
            "link": chartLinker
        }
    })
    .directive('chartColumn', function() {
        var columnLinker = function(scope,element,attrs,chartCtrl) {
            var column = attrs['columnValues'].split(",");
            column.unshift(attrs['columnId']);
            chartCtrl.addColumn(column,attrs['columnType'],attrs['columnName'],attrs['columnColor']);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": columnLinker
        }
    })
    .directive('chartAxes', function() {
        var axesLinker = function(scope,element,attrs,chartCtrl) {
            var x = attrs['valuesX'];
            if (x) {
                chartCtrl.addXAxisValues(x);
            }

            var y = attrs['y'];
            var y2 = attrs['y2'];
            var yAxis = {};
            if (y2) {
                var items = y2.split(",");
                for (item in items) {
                    yAxis[items[item]] = "y2";
                }
                if (y) {
                    var items = y.split(",");
                    for (item in items) {
                        yAxis[items[item]] = "y";
                    }
                }
                chartCtrl.addYAxis(yAxis);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axesLinker
        }
    })
    .directive('chartAxis', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var rotate = attrs['axisRotate'];
            if (rotate) {
                chartCtrl.rotateAxis();
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }

    })
    .directive('chartAxisX', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};

            var type=attrs['axisType'];
            if (type) {
                axis.type=type;
            }
            // TODO has a strange effect on the graph, need to evaluate
            var height = attrs['axisHeight'];
            if (height) {
                axis.height=height;
            }
            chartCtrl.addAxisProperties('x',axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartAxisY', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var id=attrs['axisId'];
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};
            if (id === 'y2') {
                axis.show=true;
            }
            var paddingTop = attrs['paddingTop'];
            var paddingBottom = attrs['paddingBottom'];
            if (paddingTop | paddingBottom) {
                paddingTop = (paddingTop) ? paddingTop : 0;
                paddingBottom = (paddingBottom)? paddingBottom : 0;
                axis.padding = {"top":parseInt(paddingTop),"bottom":parseInt(paddingBottom)};
            }
            var rangeMax = attrs['rangeMax'];
            var rangeMin = attrs['rangeMin'];
            if (rangeMax) {
                axis.max = parseInt(rangeMax);
            }
            if (rangeMin) {
                axis.min = parseInt(rangeMin);
            }

            chartCtrl.addAxisProperties(id,axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartGrid', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var showX = attrs["showX"];
            if (showX && showX === "true") {
                chartCtrl.addGrid("x");
            }
            var showY = attrs["showY"];
            if (showY && showY === "true") {
                chartCtrl.addGrid("y");
            }
            var showY2 = attrs["showY2"];
            if (showY2 && showY2 === "true") {
                chartCtrl.addGrid("y2");
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker,
            "transclude": true,
            "template": "<div ng-transclude></div>"
        }
    })
    .directive('chartGridOptional', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var axisId = attrs["axisId"];
            var value = attrs["gridValue"];
            var text = attrs["gridText"];

            chartCtrl.addGridLine(axisId,value,text);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker
        }
    })
    .directive('chartAxisXTick', function() {
        var tickLinker = function(scope,element,attrs,chartCtrl) {
            var tick = {};

            var count = attrs['tickCount'];
            if (count) {
                tick.count = count;
            }

            // TODO, dit lijkt nog niet echt iets te doen
            var format = attrs['tickFormat'];
            if (format) {
                tick.format = format;
            }

            var culling = attrs['tickCulling'];
            if (culling) {
                tick.culling = culling;
            }

            var rotate = attrs['tickRotate'];
            if (rotate) {
                tick.rotate = rotate;
            }

            var fit = attrs['tickFit'];
            if (fit) {
                tick.fit = fit;
            }

            chartCtrl.addXTick(tick);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tickLinker
        }

    })
    .directive('chartLegend', function() {
        var legendLinker = function(scope,element,attrs,chartCtrl) {
            var legend = null;
            var show = attrs["showLegend"];
            if (show && show === "false") {
                legend = {"show":false};
            } else {
                var position = attrs["legendPosition"];
                if (position) {
                    legend = {"position":position};
                }
            }

            if (legend != null) {
                chartCtrl.addLegend(legend);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": legendLinker
        }

    })
    .directive('chartTooltip', function() {
        var tooltipLinker = function(scope,element,attrs,chartCtrl) {
            var tooltip = null;
            var show = attrs["showTooltip"];
            if (show && show === "false") {
                tooltip = {"show":false};
            } else {
                var grouped = attrs["groupTooltip"];
                if (grouped && grouped === "false") {
                    tooltip = {"grouped":false};
                }
            }

            if (tooltip != null) {
                chartCtrl.addTooltip(tooltip);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tooltipLinker
        }

    })
    .directive('chartSize', function() {
        var sizeLinker = function(scope,element,attrs,chartCtrl) {
            var chartSize = null;
            var width = attrs["chartwidth"];
            var height = attrs["chartheight"]
            if (width || height) {
                chartSize = {};
                if (width) {
                    chartSize.width = parseInt(width);
                }
                if (height) {
                    chartSize.height = parseInt(height);
                }
                chartControllerScope.chartSize = chartSize;
            }
        };

        return {
            //"require":"^c3chart",
            //"restrict":"E",
            //"scope": {},
            "replace":true,
            "link": sizeLinker
        }

    })
    .directive('chartColors', function() {
        var colorsLinker = function(scope,element,attrs,chartCtrl) {
            var pattern = attrs["colorPattern"];
            if (pattern) {
                chartCtrl.addColors(pattern.split(","));
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": colorsLinker
        }

    });

// Configuring the Plans module
angular.module('plans').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Plans', 'plans', 'dropdown', '/plans(/create)?');
        Menus.addSubMenuItem('topbar', 'plans', 'List Plans', 'plans');
        Menus.addSubMenuItem('topbar', 'plans', 'New Plan', 'plans/create');
    }
]);
// Configuring the Articles module
angular.module('foods').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Foods', 'foods', 'dropdown', '/foods(/create)?');
        Menus.addSubMenuItem('topbar', 'foods', 'List Foods', 'foods');
        Menus.addSubMenuItem('topbar', 'foods', 'New Food', 'foods/create');
    }
]);
/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module(ApplicationConfiguration.applicationModuleName).service(
    "CoreUtilities",
    function( $http, $q ) {

        // Return public API.
        return({
            calculateDeficit: calculateDeficit,
            doMealTotaling: doMealTotaling,
            calculatePlanTotalMacros: calculatePlanTotalMacros,
            getFoods: getFoods

        });


        // ---
        // PUBLIC METHODS.
        // ---


        function getFoods(typed, skip, searchByFirstLetterOnly) {
            var request = $http({
                method: "get",
                url: "/foods/" + typed + '/' + searchByFirstLetterOnly + '/' + skip,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleSuccess, handleError ) );
        }

        function calculateDeficit(nutritionPlan, activityPlan, nutritionProfile){
            var bmr = calculateBmr(nutritionProfile);

            var additionalCaloriesExpended = 300;
            var caloriesOut = additionalCaloriesExpended + bmr;

            if (activityPlan && typeof activityPlan == 'object'){
                caloriesOut = activityPlan.totalCaloriesBurned + bmr + additionalCaloriesExpended;

            }

            var caloriesIn = nutritionPlan.totalPlanCalories;

            return -(caloriesIn - caloriesOut);

        };


        // ---
        // PRIVATE METHODS.
        // ---


        //BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
        //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
        function calculateBmr(nutritionProfile){
            var age = nutritionProfile.age;
            var weightInLbs = nutritionProfile.weight; //TODO get most recent weight instead of static one
            var heightFeet = nutritionProfile.heightFeet;
            var heightInches = nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = nutritionProfile.sex;

            //convert weight from lbs to kg:
            // kg = (weight in lbs) * .454
            var weightInKg = weightInLbs * .454;

            //convert height from inches to cms
            //height in cms = (height in inches * 2.54)
            var heightInCms = totalHeight * 2.54

            var bmr = 0;

            //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
            if(gender == "Male"){
                bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
            }
            //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
            else{
                bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
            }

            return bmr;
        };

        function doMealTotaling(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        function calculatePlanTotalMacros(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates;
                fatTotal += plan.meals[i].totalFat;
                proteinTotal += plan.meals[i].totalProtein;
                caloriesTotal += plan.meals[i].totalCalories;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
            plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
            plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;


        };

        function handleSuccess( response ) {

            //dailyDashboardData.activityPlan = response.data;

            // return dailyDashboardData;

            return response.data;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);

// Setting up route
angular.module('plans').config(['$stateProvider',
    function($stateProvider) {
        // Plans state routing
        $stateProvider.
            state('listPlans', {
                url: '/plans',
                templateUrl: 'modules/plans/views/list-plans.client.view.html'
            }).
            state('createPlan', {
                url: '/plans/create',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('createPlan2', {
                url: '/plans/create/:planDateForCreate',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('viewPlan', {
                url: '/plans/:planId',
                //templateUrl: 'modules/plans/views/view-plan.client.view.html'
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('editPlan', {
                url: '/plans/:planId/edit',
                //templateUrl: 'modules/plans/views/edit-plan.client.view.html'
                templateUrl: 'modules/plans/views/create-plan.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('plans').service(
    "PlansService",
    function( $http, $q ) {

        var planDate;

        // Return public API.
        return({
            getActivityByDate: getActivityByDate
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function getActivityByDate(planDateIn) {
            planDate = planDateIn;

            var request = $http({
                method: "get",
                url: "/activities/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleActivityByDateSuccess, handleError ) );
        }







        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleActivityByDateSuccess( response ) {

            return response.data;
        }




        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
'use strict';

angular.module('plans').controller('PlansController', ['$scope', '$stateParams', '$location', '$timeout', 'Authentication', '$modal', '$log', 'Plans', 'Foods', 'NutritionProfile', 'Progress', 'PlansService', 'CoreUtilities',
    function($scope, $stateParams, $location, $timeout, Authentication, $modal, $log, Plans, Foods, NutritionProfile, Progress, PlansService, CoreUtilities) {
        window.scope = $scope;
        window.plans = $scope.plans;
        $scope.showPlanEditableErrorMsg = false;
        $scope.showTotalsAsPercent = true;
        $scope.isSortingEnabled = false;
        var sortingBtnTxtOptions = ['Enable Sorting', 'Disable Sorting'];
        $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
        var isSortingEnabled = false;


        $scope.authentication = Authentication;
        $scope.meals = [];

        $scope.allFoods = Foods.query();
        $scope.allFoodsInitial = [];

        $scope.nutritionProfile = NutritionProfile.get();

        $scope.foodTypes = [
            {id: 1, type: 'Fruit'},
            {id: 2, type: 'Starch'},
            {id: 3, type: 'Meat'},
            {id: 4, type: 'Liquid'},
            {id: 5, type: 'Vegetable'},
            {id: 6, type: 'Dessert'},
            {id: 7, type: 'Yogurt'},
            {id: 8, type: 'Pizza'},
            {id: 9, type: 'Butter/Oil'},
            {id: 10, type: 'Tofu'},
            {id: 11, type: 'Beans'},
            {id: 12, type: 'Alcohol'},
            {id: 13, type: 'Nuts'}
        ];

        $scope.mealTypes = [
            {id: 1, name: 'Breakfast'},
            {id: 2, name: 'Lunch'},
            {id: 3, name: 'Dinner'},
            {id: 4, name: 'Snack'}
        ];

        $scope.toggleSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').removeClass('disabled');
                isSortingEnabled = true;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[1];
            }
            else{
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
            }
        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.plan.meals.splice(end, 0,
                $scope.plan.meals.splice(start, 1)[0]);

            $scope.$apply();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };

        $scope.create = function() {
            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            var plan = new Plans({
                //planDate: planDateAsString,
                planDateForDB: planDateAsString,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                notes: $scope.plan.notes,
                planDateAsMili: planDate.getTime(),
                planDateAsConcat: parseInt(planDate.getFullYear() + '' + (planDate.getMonth() < 10 ? '0' + planDate.getMonth() : planDate.getMonth()) + '' + (planDate.getDate() < 10 ? '0' + planDate.getDate() : planDate.getDate())),
                meals: $scope.plan.meals
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = new Date(response.planDateNonUtc);
                $location.path('plans/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.meals = [];
        };



        $scope.copyPlan = function(planCopyModel){
            var planDateAsString = planCopyModel.planDate.toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            var plan = new Plans({
                planDateForDB: planCopyModel.planDate,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                meals: planCopyModel.meals
            });
            plan.$save(function(response) {
                $location.path('plans/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.createMeal = function(){
            var model = {
                name: '',
                type: 1,
                foods: [],
                totalCalories: 0,
                totalCarbohydrates: 0,
                totalFat: 0,
                totalProtein: 0,
                isEditable: true,
                isVisible: true
            };

            $timeout(function(){$scope.setSorting();}, 100);


            $scope.plan.meals.push(model);

            var meal = $scope.plan.meals[$scope.plan.meals.length - 1];

            scrollToBottom();

            $scope.createFoodWithDialog(meal, null, true);
            //$scope.createFood(meal);

            //sortableEle.refresh();
        };

        var scrollToBottom = function(){
            $("html, body").animate({ scrollTop: $(document).height() }, 1000);
            $("#content").animate({ scrollTop: $('#content').height() + 700 }, 1000);

        };

        $scope.editMeal = function(meal){
            meal.isEditable = true;
            meal.isVisible = !meal.isVisible;
        };

        $scope.saveMeal = function(meal){
            meal.isEditable = false;
            meal.isVisible = !meal.isVisible;
        };



        $scope.deleteMeal = function(meal, isMobileDevice){
            if (confirm("Are you sure you want to delete this meal?")) {
                for (var i in $scope.plan.meals) {
                    if ($scope.plan.meals[i] === meal) {
                        $scope.plan.meals.splice(i, 1);
                    }
                }

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                if(isMobileDevice){
                    $scope.savePlan(true);
                }
            }
        };

        $scope.collapseAllMeals = function(plan){
            for(var i = 0; i < plan.meals.length; i++){
                var meal = plan.meals[i];
                meal.isVisible = false;
            }
        };



        $scope.createFood = function(meal){
            var defaultFood = $scope.allFoods[0];

            // var selectedFood = $scope.allFoods[0];
            //selectedFood.foodId = defaultFood.foodId;

//            var model = {
//                name: defaultFood.name,
//                type: defaultFood.type,
//                servings: 1,
//                calories: defaultFood.calories,
//                grams: defaultFood.grams,
//                protein: defaultFood.protein,
//                carbohydrates: defaultFood.carbohydrates,
//                fat: defaultFood.fat,
//                sodium: defaultFood.sodium,
//                fiber: defaultFood.fiber,
//                transfat: defaultFood.transfat,
//                saturatedFat: defaultFood.saturatedFat,
//                sugar: defaultFood.sugar,
//                cholesterol: defaultFood.cholesterol,
//                vitaminA: defaultFood.vitaminA,
//                vitaminC: defaultFood.vitaminC,
//                calcium: defaultFood.calcium,
//                iron: defaultFood.iron,
//                foodId: defaultFood.foodId,
//                selectedFood: $scope.allFoods[0],
//                isEditable: true
//            };
            var selectedFood = {
                _id: defaultFood.foodId,
                name: '',
                calories: 0,
                servings: 0,
                grams: 0,
                carbohydrates: 0,
                protein: 0,
                fat: 0,
                sodium: 0
            };

            var model = {
                foodId: defaultFood.foodId,
                selectedFood: selectedFood,
                name: '',
                calories: 0,
                servings: 0,
                grams: 0,
                carbohydrates: 0,
                protein: 0,
                fat: 0,
                sodium: 0,
                isEditable: true
            };

            meal.foods.push(model);

            //foodServingsChange()
            //CoreUtilities.doMealTotaling(meal);
            //CoreUtilities.calculatePlanTotalMacros($scope.plan);

            //calculate changed deficit
            //$scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
        };



        $scope.saveFood = function(food){
            food.isEditable = false;
        };

        $scope.editFoodClick = function(food){
            for(var i = 0; i < $scope.plan.meals.length; i++){
                for(var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                    $scope.plan.meals[i].foods[j].isEditable = false;
                }
            }

            food.isEditable = true;


            setSelectedFood(food);
        };

        var setSelectedFood = function(food){
            if (!food.selectedFood._id){
                for(var i = 0; i < $scope.allFoods.length; i++){
                    if (food.selectedFood.foodId === $scope.allFoods[i]._id){
                        food.selectedFood = $scope.allFoods[i];
                        break;
                    }
                }
            }
        };

        $scope.editFood = function(food){
            food.isEditable = true;

            setSelectedFood(food);
        };

        $scope.deleteFood = function(food, meal, isMobileDevice){
            if (confirm("Are you sure you want to delete this food?")) {
                for (var nMeal = 0; nMeal < $scope.plan.meals.length; nMeal++) {
                    if ($scope.plan.meals[nMeal] === meal) {
                        for (var nFood = 0; nFood < meal.foods.length; nFood++) {
                            if (meal.foods[nFood] === food) {
                                meal.foods.splice(nFood, 1);
                            }
                        }
                    }
                }

                CoreUtilities.doMealTotaling(meal);

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                if(isMobileDevice){
                    $scope.savePlan(true);
                }
            }

        };

        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.plans) {
                    if ($scope.plans[i] === plan) {
                        $scope.plans.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('plans');
                });
            }
        };

        $scope.savePlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            for(var i = 0; i < $scope.plan.meals.length; i++){
                var meal = $scope.plan.meals[i];

                meal.isEditable = false;

                for (var j = 0; j < meal.foods.length; j++){
                    var food = meal.foods[j];

                    food.isEditable = false;
                }
            }

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

            //callback();
        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('plans');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;
            plan.planDateAsMili = planDate.getTime();
            plan.planDateAsConcat = parseInt(planDate.getFullYear() + '' + (planDate.getMonth() < 10 ? '0' + planDate.getMonth() : planDate.getMonth()) + '' + (planDate.getDate() < 10 ? '0' + planDate.getDate() : planDate.getDate()));

            plan.$update(function() {
                //$location.path('plans/' + plan._id);
                for (var i = 0; i < $scope.plan.meals.length; i++){
                    for (var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                        $scope.plan.meals[i].foods[j].name = $scope.plan.meals[i].foods[j].selectedFood.name;
                        $scope.plan.meals[i].foods[j].type = $scope.plan.meals[i].foods[j].selectedFood.type;
                        $scope.plan.meals[i].foods[j].foodId = $scope.plan.meals[i].foods[j].selectedFood.foodId;
                    }

                    CoreUtilities.doMealTotaling($scope.plan.meals[i]);
                }

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                $scope.success = true;
                $timeout(function () {
                    $scope.success = false;
                }, 2500);


                $timeout(function(){$scope.setSorting();}, 100);

            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.plans = Plans.query(
                function(u, getResponseHeaders)
                {
                    for(var i = 0; i < $scope.plans.length; i++) {
                        for (var nMeal = 0; nMeal < $scope.plans[i].meals.length; nMeal++){
                            CoreUtilities.doMealTotaling($scope.plans[i].meals[nMeal]);
                        }

                        CoreUtilities.calculatePlanTotalMacros($scope.plans[i]);

                        var planModel = {
                            planDateNonUtc: $scope.plans[i].planDateNonUtc || $scope.plans[i].planDate,
                            planDateAsMili: $scope.plans[i].planDateAsMili,
                            planDateAsConcat: $scope.plans[i].planDateAsConcat,
                            calories: $scope.plans[i].totalPlanCalories,
                            protein: $scope.plans[i].totalPlanProtein,
                            carbs: $scope.plans[i].totalPlanCarbs,
                            fat: $scope.plans[i].totalPlanFat,
                            _id: $scope.plans[i]._id
                        };

                        $scope.plansCollection.push(planModel);


                    }
                }
            );


        };

        var setCurrentDeficit = function(){
            var now = new Date(new Date($scope.plan.planDateNonUtc).toUTCString());
            var startDateFormatted = now.getFullYear() + '_' + now.getMonth() + '_' + now.getDate();
            var endDateFormatted = startDateFormatted;

            $scope.progress = Progress.get({
                    progressId: startDateFormatted
                },
                function(u)
                {
                    $scope.currentDeficit = u.deficit;
                }
            );
        };

        $scope.findOne = function() {
            if ($stateParams.planId) {
                $scope.plan = Plans.get({
                    planId: $stateParams.planId
                }, function (u, getResponseHeaders) {
                    if (!$scope.plan.planDateNonUtc){
                        $scope.plan.planDateNonUtc = $scope.plan.planDate;
                    }

                    setCurrentDeficit();

                    $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

                    setPlanMealsTotals();

                    fillActivityPlan();
                });
            }
            else{
                $scope.plan =  {data: null, meals: null, notes: null, planDate: new Date(), planDateNonUtc: new Date() };
                $scope.plan.meals = [];

                //todo use ngRouter instead of this horrible method for extracting url param
                setPlanDateFromUrlParam();

                $scope.allFoods = Foods.query(function(){
//                    window.setTimeout(function(){
//                        $scope.createMeal();
//                    }, 400);

                });

                fillActivityPlan();

                $scope.plan.moveArrowImgLeft = false;
            }
        };


        var interval;
        $scope.$watch('plan.meals', function(){
            if($scope.plan && $scope.plan.meals) {
                if ($scope.plan.meals.length == 0) {
                    interval = window.setInterval(function () {
                        $scope.plan.moveArrowImgLeft = !$scope.plan.moveArrowImgLeft;
                    }, 2000);
                }
                else {
                    clearInterval(interval);
                }
            }
        });

        var setPlanMealsTotals = function(){
            for (var i = 0; i < $scope.plan.meals.length; i++) {
                var carbsTotal = 0, proteinTotal = 0, caloriesTotal = 0, fatTotal = 0, sodiumTotal = 0;

                for (var j = 0; j < $scope.plan.meals[i].foods.length; j++) {
                    $scope.plan.meals[i].foods[j].name = $scope.plan.meals[i].foods[j].selectedFood.name;
                    $scope.plan.meals[i].foods[j].type = $scope.plan.meals[i].foods[j].selectedFood.type;
                    $scope.plan.meals[i].foods[j].foodId = $scope.plan.meals[i].foods[j].selectedFood.foodId;

                    var carbs = $scope.plan.meals[i].foods[j].carbohydrates;

                    carbsTotal += carbs;
                    sodiumTotal += $scope.plan.meals[i].foods[j].sodium;
                    proteinTotal += $scope.plan.meals[i].foods[j].protein;
                    fatTotal += $scope.plan.meals[i].foods[j].fat;
                    caloriesTotal += $scope.plan.meals[i].foods[j].calories;
                }

                $scope.plan.meals[i].totalCarbohydrates = carbsTotal;
                $scope.plan.meals[i].totalCalories = caloriesTotal;
                $scope.plan.meals[i].totalProtein = proteinTotal;
                $scope.plan.meals[i].totalFat = fatTotal;
                $scope.plan.meals[i].totalSodium = sodiumTotal;

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
            }
        };

        var setPlanDateFromUrlParam = function(){
            var urlSplit = $location.path().split('/');
            if(urlSplit.length >= 3){
                var dateParam;

                if(urlSplit.length == 4) {
                    dateParam = urlSplit[3];
                }
                else{
                    dateParam = urlSplit[2];
                }

                if(dateParam.indexOf('_') !== -1){
                    var dateParamSplit = dateParam.split('_');

                    var dateDay = parseInt(dateParamSplit[1]);
                    var dateYear = parseInt(dateParamSplit[2]);
                    var dateMonth = parseInt(dateParamSplit[0]);

                    $scope.plan.planDate = new Date(dateYear, dateMonth, dateDay);
                    $scope.plan.planDateNonUtc = new Date(dateYear, dateMonth, dateDay);
                }
            }
        };

        var fillActivityPlan = function(){
            var planDate = new Date($scope.plan.planDateNonUtc);
            var year = planDate.getFullYear();
            var month = planDate.getMonth();
            var day = planDate.getDate();

            var planDateForDb =  month + '_' + day + '_' + year;

            PlansService.getActivityByDate(planDateForDb).then(function(data) {
                $scope.activityPlan = data;
            });

//            $scope.activityPlan = Activities.get({
//                activityDate: planDateForDb
//                ,dateRange: planDateForDb
//            }, function (u, getResponseHeaders) {
//                var test = 'test';
//
//            });
        };



        $scope.foodSelectionChange = function(food, meal){
            food.type = food.selectedFood.type;
            food.calories = food.servings * food.selectedFood.calories;
            food.fat = food.servings * food.selectedFood.fat;
            food.protein = food.servings * food.selectedFood.protein;
            food.carbohydrates = food.servings * food.selectedFood.carbohydrates;
            food.grams = food.servings * food.selectedFood.grams;
            food.sodium = food.servings * food.selectedFood.sodium;
            food.fiber = food.servings * food.selectedFood.fiber;
            food.sugar = food.servings * food.selectedFood.sugar;
            food.saturatedFat = food.servings * food.selectedFood.saturatedFat;
            food.vitaminA = food.servings * food.selectedFood.vitaminA;
            food.vitaminC = food.servings * food.selectedFood.vitaminC;
            food.calcium = food.servings * food.selectedFood.calcium;
            food.iron = food.servings * food.selectedFood.iron;
            food.transfat = food.servings * food.selectedFood.transfat;
            food.cholesterol = food.servings * food.selectedFood.cholesterol;
            food.name = food.selectedFood.name;
            food.selectedFood.foodId = food.selectedFood._id;
            food.type = food.selectedFood.type;

            food.foodId = food.selectedFood._id;

            CoreUtilities.doMealTotaling(meal);

            CoreUtilities.calculatePlanTotalMacros($scope.plan);

            //calculate changed deficit
            $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
        };

        $scope.foodServingsChange = function(food, meal){

            if(food.servings !== "" && food.servings !== undefined && food.servings !== "undefined") {
                var servings = parseFloat(food.servings);

                food.calories = servings * food.selectedFood.calories;
                food.fat = servings * food.selectedFood.fat;
                food.protein = servings * food.selectedFood.protein;
                food.carbohydrates = servings * food.selectedFood.carbohydrates;
                food.sodium = servings * food.selectedFood.sodium;
                food.grams = servings * food.selectedFood.grams;

                CoreUtilities.doMealTotaling(meal);

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
            }
        };

        $scope.toggleTotalsAsPercent = function(){
            $scope.showTotalsAsPercent = !$scope.showTotalsAsPercent;
        };

        $scope.toggleMealVisibility = function(meal){
            meal.isVisible = !meal.isVisible;
        };

        $scope.getMealTypeName = function(type){
            var mealTypeName;

            for (var i = 0; i < $scope.mealTypes.length; i++){
                var mealType = $scope.mealTypes[i];

                if (mealType.id == type){
                    mealTypeName = mealType.name;
                    break;
                }
            }

            return mealTypeName;
        };


        var checkIfPlanEditable = function(){
            var isPlanEditable = false;

            for(var i = 0; i < $scope.plan.meals.length; i++){
                for (var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                    var planMeal = $scope.plan.meals[i];
                    var mealFood = planMeal.foods[j];

                    if (planMeal.isEditable || mealFood.isEditable){
                        isPlanEditable = true;
                        break;
                    }


                }
            }

            return isPlanEditable;
        };

        //sorting code
        // data
        $scope.orderByField = 'planDateAsMili';
        $scope.reverseSort = true;
        scope.plansCollection = [];

        $scope.setSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;
            }
        };

        var getSuggestedFoods = function(){
            var proteinTarget = $scope.nutritionProfile.proteinPercentageTarget;
            var carbsTarget = $scope.nutritionProfile.carbohydratesPercentageTarget;
            var fatTarget = $scope.nutritionProfile.fatPercentageTarget;
            var planTotalCalories = $scope.plan.totalPlanCalories;

            var currentDeficit = $scope.currentDeficit;
            var deficitTarget = $scope.nutritionProfile.deficitTarget;
            var currentCaloriesIn = $scope.plan.totalPlanCalories;

            var caloriesTarget = (currentDeficit - deficitTarget) + currentCaloriesIn;

            var suggestedFoodsAry = [];

            for (var i = 0; i < $scope.allFoods.length; i++) {
                var foodToCheck = $scope.allFoods[i];
                var score = 0;

                if(foodToCheck.type !== '12' &&
                    foodToCheck.type !== '6') {
                    var macrosTotal = ($scope.plan.totalPlanFat + foodToCheck.fat) +
                        ($scope.plan.totalPlanProtein + foodToCheck.protein) +
                        ($scope.plan.totalPlanCarbs + foodToCheck.carbohydrates);

                    var newProteinTarget = (($scope.plan.totalPlanProtein + foodToCheck.protein) / macrosTotal) * 100;
                    var newCarbsTarget = (($scope.plan.totalPlanCarbs + foodToCheck.carbohydrates) / macrosTotal) * 100;
                    var newFatTarget = (($scope.plan.totalPlanFat + foodToCheck.fat) / macrosTotal) * 100;
                    var newCaloriesTarget = planTotalCalories + foodToCheck.calories;

                    var caloriesTargetDiff = (caloriesTarget - newCaloriesTarget) / caloriesTarget;
                    var proteinTargetDiff = (proteinTarget - newProteinTarget) / proteinTarget;
                    var carbsTargetDiff = (carbsTarget - newCarbsTarget) / carbsTarget;
                    var fatTargetDiff = (fatTarget - newFatTarget) / fatTarget;

                    if (caloriesTargetDiff < 0) {
                        caloriesTargetDiff = -caloriesTargetDiff;
                    }
                    if (proteinTargetDiff < 0) {
                        proteinTargetDiff = -proteinTargetDiff;
                    }
                    if (carbsTargetDiff < 0) {
                        carbsTargetDiff = -carbsTargetDiff;
                    }
                    if (fatTargetDiff < 0) {
                        fatTargetDiff = -fatTargetDiff;
                    }

                    score = (caloriesTargetDiff * 3) + proteinTargetDiff + carbsTargetDiff + fatTargetDiff;

                    foodToCheck.score = score;

                    suggestedFoodsAry.push(foodToCheck);
                }
            }

            suggestedFoodsAry.sort(function compare(a,b) {
                if (a.score < b.score)
                    return -1;
                if (a.score > b.score)
                    return 1;
                return 0;
            });

            var suggestedFoodsTop5 = [];

            for(i = 0; i < 5; i++){
                var suggestedFood = suggestedFoodsAry[i];

                suggestedFoodsTop5.push(suggestedFood);
            }

            return suggestedFoodsTop5;


        };


        //dialog code
        $scope.openCopyPlanDialog = function (size) {
            var isPlanEditable = checkIfPlanEditable();

            if (!isPlanEditable) {
                $scope.showPlanEditableErrorMsg = false;

                var modalInstance = $modal.open({
                    templateUrl: 'myModalContent.html',
                    controller: ModalInstanceCtrl,
                    //size: size,
                    resolve: {
                        dialogMealsShort: function () {
                            var mealsAry = [];

                            for (var i = 0; i < $scope.plan.meals.length; i++) {
                                var mealModel = {};
                                mealModel.id = $scope.plan.meals[i]._id;
                                mealModel.selected = true;

                                var mealType = $scope.mealTypes[$scope.plan.meals[i].type - 1];

                                if (mealType && mealType.id >= 0) {
                                    mealModel.type = mealType.name;
                                }
                                else {
                                    mealModel.type = 'N/A';
                                }

                                mealsAry.push(mealModel);
                            }

                            return mealsAry;
                        },
                        dialogMealsDetailed: function () {
                            return $scope.plan.meals;
                        },
                        parentScope: function () {
                            return $scope;
                        }
                    }
                });

                modalInstance.result.then(function (planCopyModel) {
                    //$scope.dialogSelectedMealType = selectedItem;
                    $scope.copyPlan(planCopyModel);

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
            else{
                $scope.showPlanEditableErrorMsg = true;
            }
        };

        $scope.openSuggestionsDialog = function (meal) {
            var modalInstance = $modal.open({
                templateUrl: 'suggestionsModalContent.html',
                controller: SuggestionsModalInstanceCtrl,
                //size: size,
                resolve: {

                    suggestedFoods: function () {
                        //figure out which foods to add to suggested foods based on nutrition profile targets
                        return getSuggestedFoods();
                    },
                    mealForSuggestion: function(){
                        return meal;
                    },
                    parentScope: function () {
                        return $scope;
                    },
                    CoreUtilities: function(){
                        return CoreUtilities;
                    }
                }
            });

            modalInstance.result.then(function (mealForSuggestion) {
                //$scope.dialogSelectedMealType = selectedItem;
                // $scope.copyPlan(planCopyModel);
                meal = mealForSuggestion;

                CoreUtilities.doMealTotaling(meal);

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.createFoodWithDialog = function(meal, food, isCreateMeal, isMobileDevice){
            var modalInstance = $modal.open({
                templateUrl: 'createFoodModalContent.html',
                controller: CreateFoodModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    meal: function(){
                        return meal
                    },
                    food: function(){
                        return food;
                    },
                    CoreUtilities: function(){
                        return CoreUtilities;
                    },
                    isCreateMeal: function(){
                        return isCreateMeal;
                    },
                    mealTypes: function(){
                        return $scope.mealTypes;
                    }
                }
            });

            modalInstance.result.then(function (selected) {
                meal.isEditable = false;
                var food = selected.foodToAdd;
                var isUpdate = selected.isUpdate;
                food.servings = selected.servings;

                food.isEditable = false;

                if(isUpdate) {
                    if(selected.oldFood._id !== food._id) {
                        food.selectedFood = {
                            _id: food._id,
                            name: food.name,
                            calories: food.calories,
                            carbohydrates: food.carbohydrates,
                            protein: food.protein,
                            fat: food.fat,
                            sodium: food.sodium,
                            grams: food.grams,
                            cholesterol: food.cholesterol,
                            saturatedFat: food.saturatedFat,
                            sugar: food.sugar,
                            fiber: food.fiber
                        };
                    }

                    for(var m = 0; m < meal.foods.length; m++){
                        if (meal.foods[m]._id === selected.oldFood._id){
                            meal.foods[m] = food;
                            break;
                        }
                    }
                }
                else {
                    food.selectedFood = {
                        _id: food._id,
                        name: food.name,
                        calories: food.calories,
                        carbohydrates: food.carbohydrates,
                        protein: food.protein,
                        fat: food.fat,
                        sodium: food.sodium,
                        grams: food.grams,
                        cholesterol: food.cholesterol,
                        saturatedFat: food.saturatedFat,
                        sugar: food.sugar,
                        fiber: food.fiber
                    };

                    meal.foods.push(food);
                }

                $scope.foodServingsChange(food, meal);

                if(isCreateMeal) {
                    meal.type = selected.mealType;
                    scrollToBottom();
                }

                //if(isMobileDevice){
                $scope.savePlan();
                //}
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.openNotesDialog = function (notes) {
            var modalInstance = $modal.open({
                templateUrl: 'notesModalContent.html',
                controller: NotesModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    planNotes: function(){
                        return $scope.plan.notes
                    }
                }
            });

            modalInstance.result.then(function (notesToSave) {
                $scope.plan.notes = notesToSave;
                $scope.savePlan();
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        }
    }
]);


var CreateFoodModalInstanceCtrl = function ($scope, $modalInstance, parentScope, meal, food, CoreUtilities, isCreateMeal, mealTypes) {
    $scope.foodToAdd = food;
    $scope.parentScope = parentScope;
    $scope.meal = meal;
    $scope.isUpdate = food !== 'undefined' && food !== null && food !== 'null' && food !== undefined;
    $scope.servings = 1;
    window.scope = $scope;
    $scope.showFoodDetails = $scope.isUpdate ? true : false;
    $scope.foods = [];
    $scope.foodSearchTxt = null;
    $scope.CoreUtilities = CoreUtilities;
    $scope.skipFoods = 0;
    $scope.findFoodsByFirstLetter = false;
    $scope.mealTypes = mealTypes;
    $scope.showCreateMealSection = isCreateMeal;


    if($scope.foodToAdd) {
        $scope.caloriesDisplay = $scope.foodToAdd.selectedFood ? $scope.foodToAdd.selectedFood.calories : $scope.foodToAdd.calories;
    }

    $scope.nextFoods = function(){
        $scope.skipFoods += 8;

        $scope.updateFoodList();
    };

    $scope.prevFoods = function(){
        $scope.skipFoods -= 8;

        $scope.updateFoodList();
    };

    $scope.clearFoodInput = function(){
        $scope.selected.foodSearchTxt = '';
        $scope.foodInputChange();
    };

    $scope.selected = {
        showFoodDetails: $scope.showFoodDetails,
        foodToAdd: $scope.foodToAdd,
        oldFood: food,
        isUpdate: $scope.isUpdate,
        servings: $scope.servings,
        foodSearchTxt: $scope.foodSearchTxt,

        caloriesDisplay: $scope.caloriesDisplay,
        proteinDisplay: $scope.proteinDisplay,
        fatDisplay: $scope.fatDisplay,
        carbsDisplay: $scope.carbsDisplay,
        gramsDisplay: $scope.gramsDisplay,
        sodiumDisplay: $scope.sodiumDisplay,
        fiberDisplay: $scope.fiberDisplay,
        cholesterolDisplay: $scope.cholesterolDisplay,
        sugarDisplay: $scope.sugarDisplay,
        saturatedFat: $scope.saturatedFat,

        mealTypes: $scope.mealTypes


    };

    $scope.changeFood = function(){
        $scope.showFoodDetails = false;
        $scope.findFoodsByFirstLetter = false;
    };

    CoreUtilities.getFoods('null').then(function(data){
        $scope.foods = data;
    });

    $scope.calculateCaloriesDisplay = function(){
        var caloriesDisplay = 0, proteinDisplay = 0, fatDisplay = 0, sodiumDisplay = 0, gramsDisplay = 0,
            carbsDisplay = 0, saturatedFatDisplay = 0, cholesterolDisplay = 0, fiberDisplay = 0, sugarDisplay = 0;

        if($scope.selected.foodToAdd && $scope.selected.servings > 0) {

            caloriesDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.calories : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.calories;
            proteinDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.protein : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.protein;
            fatDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.fat : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.fat;
            sodiumDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sodium : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sodium;
            gramsDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.grams : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.grams;
            carbsDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.carbohydrates : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.carbohydrates;
            saturatedFatDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.saturatedFat : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.saturatedFat;
            cholesterolDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.cholesterol : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.cholesterol;
            sodiumDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sodium : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sodium;
            fiberDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.fiber : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.fiber;
            sugarDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sugar : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sugar;

        }

        $scope.selected.caloriesDisplay = caloriesDisplay % 1 != 0 ? caloriesDisplay.toFixed(1) : caloriesDisplay;
        $scope.selected.proteinDisplay = proteinDisplay % 1 != 0 ? proteinDisplay.toFixed(1) : proteinDisplay;
        $scope.selected.fatDisplay = fatDisplay % 1 != 0 ? fatDisplay.toFixed(1) : fatDisplay;
        $scope.selected.sodiumDisplay = sodiumDisplay % 1 != 0 ? sodiumDisplay.toFixed(1) : sodiumDisplay;
        $scope.selected.gramsDisplay = gramsDisplay % 1 != 0 ? gramsDisplay.toFixed(1) : gramsDisplay;
        $scope.selected.carbsDisplay = carbsDisplay % 1 != 0 ? carbsDisplay.toFixed(1) : carbsDisplay;
        $scope.selected.saturatedFatDisplay = saturatedFatDisplay % 1 != 0 ? saturatedFatDisplay.toFixed(1) : saturatedFatDisplay;
        $scope.selected.cholesterolDisplay = cholesterolDisplay % 1 != 0 ? cholesterolDisplay.toFixed(1) : cholesterolDisplay;
        $scope.selected.sodiumDisplay = sodiumDisplay % 1 != 0 ? sodiumDisplay.toFixed(1) : sodiumDisplay;
        $scope.selected.fiberDisplay = fiberDisplay % 1 != 0 ? fiberDisplay.toFixed(1) : fiberDisplay;
        $scope.selected.sugarDisplay = sugarDisplay % 1 != 0 ? sugarDisplay.toFixed(1) : sugarDisplay;
    };

    $scope.foodSelectionChange = function(food){
        $scope.selected.foodToAdd = food;
        $scope.showFoodDetails = true;

        $scope.skipFoods = 0;
        $scope.findFoodsByFirstLetter = false;

        $scope.calculateCaloriesDisplay();

        showMacrosChart();
    };

    $scope.foodInputChange = function(){
        $scope.skipFoods = 0;
        $scope.findFoodsByFirstLetter = false;

        $scope.updateFoodList();
    };

    $scope.updateFoodList = function(){
        if($scope.findFoodsByFirstLetter){
            $scope.findFoodsByLetter();
        }
        else {
            var foodSearchTxt = $scope.selected.foodSearchTxt;
            //$scope.calculateCaloriesDisplay();
            if (!foodSearchTxt) {
                foodSearchTxt = 'null';
            }

            CoreUtilities.getFoods(foodSearchTxt, $scope.skipFoods).then(function (data) {
                $scope.foods = data;
            });
        }
    };

    $scope.findFoodsByLetter = function(letter){
        //
        $scope.findFoodsByFirstLetter = true;


        if(letter){
            $scope.selected.foodSearchTxt = letter;
            $scope.skipFoods = 0;
        }

        CoreUtilities.getFoods($scope.selected.foodSearchTxt, $scope.skipFoods, true).then(function(data){
            $scope.foods = data;
        });
    };


    $scope.servingsChange = function(){
        $scope.calculateCaloriesDisplay();
    };

    if($scope.isUpdate){
        $scope.selected.servings = food.servings;

        $scope.calculateCaloriesDisplay();

    };



    $scope.ok = function () {
        $modalInstance.close($scope.selected);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };

    var showMacrosChart = function() {
        var config = {};
        config.bindto = "#foodMacrosChart";
        config.data = {};
        config.data.json = {};
        config.data.json.Protein = parseInt($scope.selected.proteinDisplay);
        config.data.json.Carbs = parseInt($scope.selected.carbsDisplay);
        config.data.json.Fat = parseInt($scope.selected.fatDisplay);
        config.axis = {"y":{"label":{"text":"Macros","position":"outer-middle"}}};
        config.data.types={"Protein":"pie", "Carbs": "pie", "Fat": "pie"};
        config.size = {width: 217, height: 214};
        $scope.chart = c3.generate(config);
    };

    if(!isCreateMeal && food) {
        window.setTimeout(function () {
            showMacrosChart()
        }, 100);
    }
};

var NotesModalInstanceCtrl = function ($scope, $modalInstance, parentScope, planNotes) {
    $scope.notesToSave = null;
    $scope.parentScope = parentScope;
    $scope.notesToSave = planNotes;

    $scope.selected = {
        notesToSave: $scope.notesToSave
    };

    $scope.ok = function () {
        $modalInstance.close($scope.selected.notesToSave);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
};


var ModalInstanceCtrl = function ($scope, $modalInstance, parentScope, dialogMealsDetailed, dialogMealsShort) {
    $scope.selectedMealTypes = dialogMealsDetailed[0];
    $scope.dialogMealsDetailed = dialogMealsDetailed;
    $scope.dialogMealsShort = dialogMealsShort;
    $scope.copyPlanDate = new Date();
    $scope.parentScope = parentScope;

    var selectedMealsDefault = [];
    for(var i = 0; i < $scope.dialogMealsShort.length; i++) {
        selectedMealsDefault.push($scope.dialogMealsShort[i].id);
    }
    $scope.selectedMealsDefault = selectedMealsDefault;

    $scope.dialogOpenCopyPlanDate = function($event, datepicker) {

        //if (!$scope[datepicker]) {
        $event.preventDefault();
        $event.stopPropagation();
        // }

        $scope.parentScope.opened = false;
        $scope[datepicker] = false;

        $scope[datepicker] = true;
    };

    $scope.copyPlanDateOptions = {
        formatYear: 'yy',
        startingDay: 1
    };

    $scope.initDate = new Date('2016-15-20');


    $scope.copyPlanDateChange = function(){
        alert("changed!");
    };

    $scope.selected = {
        meals: $scope.selectedMealsDefault,
        planDate: $scope.copyPlanDate
    };

    $scope.selectAllMeals = function(){
        for (var i = 0; i < dialogMealsShort.length; i++){
            var isFound = false;

            for(var j = 0; j < $scope.selected.meals.length; j++){
                if ($scope.selected.meals[j] === dialogMealsShort[i].id){
                    isFound = true;
                    break;
                }
            }

            if(!isFound) {
                $scope.selected.meals.push(dialogMealsShort[i].id);
            }
        }

        // $scope.selected.meals = dialogMealsShort;
    };

    $scope.ok = function () {
        var selectedMeals = $scope.selected.meals;

        if (typeof selectedMeals[0] === "string"){
            var selectedMealsDetailed = [];

            for (var i = 0; i < selectedMeals.length; i++){
                for (var j = 0; j < dialogMealsDetailed.length; j++) {
                    if (selectedMeals[i] === dialogMealsDetailed[j]._id) {
                        selectedMealsDetailed.push(dialogMealsDetailed[j]);
                    }
                }
            }

            $scope.selected.meals = selectedMealsDetailed;
        }

        $modalInstance.close($scope.selected);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
};

var SuggestionsModalInstanceCtrl = function ($scope, $modalInstance, parentScope, $timeout, suggestedFoods, mealForSuggestion, CoreUtilities) {
    $scope.parentScope = parentScope;
    $scope.suggestedFoods = suggestedFoods;
    $scope.mealForSuggestion = mealForSuggestion;
    $scope.selectedFood = $scope.suggestedFoods[0];
    $scope.CoreUtilities = CoreUtilities;



    $scope.selectedFoodClick = function(suggestedFood){
        $scope.selectedFood = suggestedFood;
    };

    $scope.ok = function () {
        $scope.selectedFood.IsSuggested = true;
        $scope.selectedFood.servings = 1;
        $scope.selectedFood.isEditable = false;
        $scope.selectedFood.foodId = $scope.selectedFood._id;

        for(var j = 0; j < $scope.parentScope.allFoods.length; j++){
            if($scope.parentScope.allFoods[j]._id === $scope.selectedFood.foodId){
                var newSelectedFood = $scope.parentScope.allFoods[j];

                $scope.selectedFood.selectedFood =
                {
                    calcium: newSelectedFood.calcium,
                    calories: newSelectedFood.calories,
                    carbohydrates: newSelectedFood.carbohydrates,
                    cholesterol: newSelectedFood.cholesterol,
                    fat: newSelectedFood.fat,
                    fiber: newSelectedFood.fiber,
                    foodId: newSelectedFood._id,
                    grams: newSelectedFood.grams,
                    iron: newSelectedFood.iron,
                    name: newSelectedFood.name,
                    protein: newSelectedFood.protein,
                    saturatedFat: newSelectedFood.saturatedFat,
                    sodium: newSelectedFood.sodium,
                    sugar: newSelectedFood.sugar,
                    transfat: newSelectedFood.transfat,
                    type: newSelectedFood.type,
                    vitaminA: newSelectedFood.vitaminA,
                    vitaminC: newSelectedFood.vitaminC
                };
            }
        }

        var isFoodFoundInMeal = false;

        for(var m = 0; m < mealForSuggestion.foods.length; m++){
            var foodId = mealForSuggestion.foods[m]._id;

            if(foodId === $scope.selectedFood._id){
                isFoodFoundInMeal = true;
                mealForSuggestion.foods[m].servings += 1;
                mealForSuggestion.foods[m].calories += mealForSuggestion.foods[m].calories;
                mealForSuggestion.foods[m].IsSuggested = true;

                $timeout(function(){mealForSuggestion.foods[m].IsSuggested = false;}, 4000);
                break;
            }
        }

        if(!isFoodFoundInMeal) {
            mealForSuggestion.foods.push($scope.selectedFood);
        }


        $timeout(function(){$scope.selectedFood.IsSuggested = false;}, 4000);

        $timeout(function(){$scope.parentScope.savePlan();}, 4000);

        $modalInstance.close(mealForSuggestion);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
};








//Plans service used for communicating with the plans REST endpoints
angular.module('plans').factory('Plans', ['$resource',
    function($resource) {
        return $resource('plans/:planId', {
            planId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);'use strict';
// Setting up route
angular.module('core').config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        // Redirect to home view when route not found
        $urlRouterProvider.otherwise('/');
        // Home state routing
        $stateProvider.state('home', {
            url: '/',
            templateUrl: 'modules/core/views/home.client.view.html'
        });
    }
]);



'use strict';
angular.module('core').controller('HeaderController', [
    '$scope',
    'Authentication',
    'Menus',
    function ($scope, Authentication, Menus) {
        $scope.authentication = Authentication;
        $scope.isCollapsed = false;
        $scope.menu = Menus.getMenu('topbar');
        $scope.toggleCollapsibleMenu = function () {
            $scope.isCollapsed = !$scope.isCollapsed;
        };
        // Collapsing the menu after navigation
        $scope.$on('$stateChangeSuccess', function () {
            $scope.isCollapsed = false;
        });
    }
]);
/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('core').service(
    "CoreService",
    function( $http, $q ) {

        var planDate, weeklyPlanDate;
        var dailyDashboardData = {};
        var weeklyDashboardData = {};

        // Return public API.
        return({
            getDailyDashboardData: getDailyDashboardData,
            getWeeklyDashboardData: getWeeklyDashboardData
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function getDailyDashboardData(planDateIn) {
            planDate = planDateIn;

            var request = $http({
                method: "get",
                url: "/plans/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleNutritionPlanSuccess, handleError ) );
        }

        function getWeeklyDashboardData(planDateIn) {
            weeklyPlanDate = planDateIn;


            var request = $http({
                method: "get",
                url: "/plans/" + weeklyPlanDate + '/' + 7,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleWeeklyNutritionPlanSuccess, handleError ) );
        }






        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleNutritionPlanSuccess( response ) {

            dailyDashboardData.nutritionPlan = response.data;

            var request = $http({
                method: "get",
                url: "/activities/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleActivityPlanSuccess, handleError ) );
        }

        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleWeeklyNutritionPlanSuccess( response ) {

            weeklyDashboardData.weeklyNutritionPlan = response.data;

            return weeklyDashboardData;
        }

        function handleActivityPlanSuccess( response ) {

            dailyDashboardData.activityPlan = response.data;

            return dailyDashboardData;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
'use strict';


angular.module('core').controller('HomeController', ['$scope', 'Authentication', 'Activities', 'CoreService', 'NutritionProfile', 'Progress',
    function($scope, Authentication, Activities, CoreService, NutritionProfile, Progress) {
        // This provides Authentication context.
        $scope.authentication = Authentication;
        window.scope = $scope;

        var additionalCaloriesExpended = 300;
        $scope.activityPlan = null;
        $scope.nutritionPlan = null;

        $scope.nutritionProfile = NutritionProfile.get(function () {
            $scope.bmr = calculateBmr();

            $scope.getDailyDashboardData();

            $scope.getWeeklyDashboardData();
        });

        $scope.weeklyDashboardView = 'charts';

        //TODO: move into service
        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'}

        ];

        var todaysDate = (new Date()).toUTCString();
        var dt = new Date(todaysDate);
        var year = dt.getFullYear();
        var month = dt.getMonth();
        var day = dt.getDate();

        $scope.planDate = new Date(todaysDate);
        $scope.planDateForDb = month + '_' + day + '_' + year;
        $scope.planDateDisplay = (month + 1) + '/' + day +'/' + year;

        //TODO: move into service
        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.openPlanDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.planDateOpened = true;
        };


        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        //initialize weekly plan dates to send to DB
        var dWeeklyPlanDate = new Date();
        var dayOfWeek = dWeeklyPlanDate.getDay();
        var year = dWeeklyPlanDate.getFullYear();
        var month = dWeeklyPlanDate.getMonth();
        var day = dWeeklyPlanDate.getDate();
        day = day - dayOfWeek;
        var startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        var endWeeklyDt;

        var checkIfChangeWeeklyData = function(){
            var endWeeklyYear = endWeeklyDt.getFullYear();
            var endWeeklyMonth = endWeeklyDt.getMonth();
            var endWeeklyDay = endWeeklyDt.getDate();
            var endWeeklyDateMili = (new Date(endWeeklyYear, endWeeklyMonth, endWeeklyDay)).getTime();

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();
            var startWeeklyDateMili = (new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay)).getTime();

            var currentWeeklyYear = $scope.planDate.getFullYear();
            var currentWeeklyMonth = $scope.planDate.getMonth();
            var currentWeeklyDay = $scope.planDate.getDate();

            var currentWeeklyDateMili = (new Date(currentWeeklyYear, currentWeeklyMonth, currentWeeklyDay)).getTime();

            var currentExceedsEndDt = currentWeeklyDateMili > endWeeklyDateMili;

            var currentBelowStartDt = false;
            if(!currentExceedsEndDt){
                currentBelowStartDt = currentWeeklyDateMili < startWeeklyDateMili;
            }

            if(currentExceedsEndDt || currentBelowStartDt){
                setNewWeeklyStartDt();
            }

            return currentExceedsEndDt || currentBelowStartDt;
        };

        var setNewWeeklyStartDt = function(){
            var dayOfWeek = $scope.planDate.getDay();
            var year = $scope.planDate.getFullYear();
            var month = $scope.planDate.getMonth();
            var day = $scope.planDate.getDate();
            day = day - dayOfWeek;
            startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        }

        $scope.planDateChanged = function(){
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){

                $scope.getWeeklyDashboardData();
            }
        };

        $scope.nextDayClick = function(){
            $scope.planDate = new Date($scope.planDate.setDate($scope.planDate.getDate() + 1));
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        $scope.prevDayClick = function(){
            $scope.planDate = new Date($scope.planDate.setDate($scope.planDate.getDate() - 1));
            $scope.planDateForDb = $scope.planDate.getMonth() + '_' + $scope.planDate.getDate() + '_' + $scope.planDate.getFullYear();
            $scope.planDateDisplay = ($scope.planDate.getMonth() + 1) + '/' + $scope.planDate.getDate() + '/' + $scope.planDate.getFullYear();

            $scope.getDailyDashboardData();

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];



        $scope.getWeeklyDashboardData = function()
        {

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();

            $scope.weeklyDateDisplay = (startWeeklyMonth + 1) + '/' + startWeeklyDay;

            endWeeklyDt = new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay);
            endWeeklyDt.setDate(endWeeklyDt.getDate() + 6);

            var startDateFormatted = startWeeklyYear + '_' + startWeeklyMonth + '_' + startWeeklyDay;
            var endDateFormatted = endWeeklyDt.getFullYear() + '_' + endWeeklyDt.getMonth() + '_' + endWeeklyDt.getDate();

            $scope.progress = Progress.query({
                    startDate: startDateFormatted,
                    endDate: endDateFormatted
                },
                function(u, getResponseHeaders)
                {


                    if(u.length > 0) {
                        $scope.weeklyNutritionPlanList = u;
                        var weeklyProteinTotal = 0;
                        var weeklyCarbsTotal = 0;
                        var weeklyFatTotal = 0;
                        var weeklyCaloriesTotal = 0;
                        var weeklyDeficitTotal = 0;

                        var len = $scope.weeklyNutritionPlanList.length;

                        for (var w = 0; w < len; w++) {
                            var item = $scope.weeklyNutritionPlanList[w];

                            var dPlanDate = new Date(item.planDateYear, item.planDateMonth, item.planDateDay);
                            var planDateDayOfWeek = days[dPlanDate.getDay()];
                            item.dayOfWeek = planDateDayOfWeek;


                            weeklyProteinTotal += item.totalPlanProteinAsPercent;
                            weeklyCarbsTotal += item.totalPlanCarbsAsPercent;
                            weeklyFatTotal += item.totalPlanFatAsPercent;
                            weeklyCaloriesTotal += item.totalPlanCalories;
                            weeklyDeficitTotal += item.deficit;
                        }

                        $scope.weeklyProteinAverage = weeklyProteinTotal / len;
                        $scope.weeklyCarbsAverage = weeklyCarbsTotal / len;
                        $scope.weeklyFatAverage = weeklyFatTotal / len;
                        $scope.weeklyCaloriesAverage = weeklyCaloriesTotal / len;
                        $scope.weeklyDeficitAverage = weeklyDeficitTotal / len;

                        getWeeklyMacrosChartData();

                        showWeeklyCaloriesDeficitChart();

                        showAverageWeeklyMacrosChart();
                    }
                    else{
                        $scope.weeklyNutritionPlanList = null;
                    }
                }
            );
        };

        $scope.getDailyDashboardData = function() {
            CoreService.getDailyDashboardData($scope.planDateForDb).then(function(data){

                var dPlanDate = new Date($scope.planDate.getFullYear(), $scope.planDate.getMonth(), $scope.planDate.getDate());
                var planDateDayOfWeek = days[dPlanDate.getDay()];
                $scope.planDayOfWeek = planDateDayOfWeek;

                if (data.nutritionPlan !== 'null'){
                    var plan = data.nutritionPlan;
                    for (var nMeal = 0; nMeal < plan.meals.length; nMeal++){
                        doMealTotaling(plan.meals[nMeal]);
                    }

                    calculatePlanTotalMacros(plan);

                    $scope.nutritionPlan = plan;
                }
                else{
                    $scope.nutritionPlan = null;
                }

                if(data.activityPlan !== 'null'){
                    $scope.activityPlan = data.activityPlan;
                    $scope.totalCaloriesBurned = $scope.activityPlan.totalCaloriesBurned + additionalCaloriesExpended;
                }
                else{
                    $scope.activityPlan = null;
                    $scope.totalCaloriesBurned = additionalCaloriesExpended;
                }


                if($scope.nutritionPlan) {
                    showDailyMacrosChart();
                }


            });
        };

        var showWeeklyCaloriesDeficitChart = function() {
            var caloriesList = [];
            var deficitList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                caloriesList.push(dayItem.totalPlanCalories);
                deficitList.push(parseInt(dayItem.deficit));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyCaloriesChart';
            config.data = {};
            config.data.json = {};
            config.data.json.calories = caloriesList;
            config.data.json.deficit = deficitList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"calories":"bar", "deficit": "bar"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#dailyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = $scope.nutritionPlan.totalPlanProteinAsPercent;
            config.data.json.carbs = $scope.nutritionPlan.totalPlanCarbsAsPercent;
            config.data.json.fat = $scope.nutritionPlan.totalPlanFatAsPercent;
            config.axis = {"y":{"label":{"text":"Daily Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var showAverageWeeklyMacrosChart = function() {
            var config = {};
            config.bindto = '#weeklyAverageMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.weeklyProteinAverage);
            config.data.json.carbs = parseInt($scope.weeklyCarbsAverage);
            config.data.json.fat = parseInt($scope.weeklyFatAverage);
            config.axis = {"y":{"label":{"text":"Weekly Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var getWeeklyMacrosChartData = function() {
            var fatList = [];
            var carbsList = [];
            var proteinList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                proteinList.push(parseInt(dayItem.totalPlanProteinAsPercent));
                carbsList.push(parseInt(dayItem.totalPlanCarbsAsPercent));
                fatList.push(parseInt(dayItem.totalPlanFatAsPercent));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.Protein = proteinList;
            config.data.json.Carbs = carbsList;
            config.data.json.Fat = fatList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"Protein":"line", "Carbs": "line", "Fat": "line"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        $scope.calculateDeficit = function(nutritionPlan, activityPlan){
            if(nutritionPlan) {
                var caloriesOut = additionalCaloriesExpended + $scope.bmr;

                if (activityPlan){
                    caloriesOut += activityPlan.totalCaloriesBurned;

                }

                var caloriesIn = nutritionPlan.totalPlanCalories;

                return -(caloriesIn - caloriesOut);
            }
        };

        //TODO: move into service
        var doMealTotaling = function(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        //TODO: move into service
        var calculatePlanTotalMacros = function(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates;
                fatTotal += plan.meals[i].totalFat;
                proteinTotal += plan.meals[i].totalProtein;
                caloriesTotal += plan.meals[i].totalCalories;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
            plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
            plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;
        };

        //BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
        //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
        var calculateBmr = function(){
            var age = $scope.nutritionProfile.age;
            var weightInLbs = $scope.nutritionProfile.weight;
            var heightFeet = $scope.nutritionProfile.heightFeet;
            var heightInches = $scope.nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = $scope.nutritionProfile.sex;

            //convert weight from lbs to kg:
            // kg = (weight in lbs) * .454
            var weightInKg = weightInLbs * .454;

            //convert height from inches to cms
            //height in cms = (height in inches * 2.54)
            var heightInCms = totalHeight * 2.54

            var bmr = 0;

            //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
            if(gender == "Male"){
                bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
            }
            //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
            else{
                bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
            }

            return bmr;
        };




    }


]);





//Menu service used for managing  menus
angular.module('core').service('Menus', [function () {
    // Define a set of default roles
    this.defaultRoles = ['user'];
    // Define the menus object
    this.menus = {};
    // A private function for rendering decision
    var shouldRender = function (user) {
        if (user) {
            for (var userRoleIndex in user.roles) {
                for (var roleIndex in this.roles) {
                    if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
                        return true;
                    }
                }
            }
        } else {
            return this.isPublic;
        }
        return false;
    };
    // Validate menu existance
    this.validateMenuExistance = function (menuId) {
        if (menuId && menuId.length) {
            if (this.menus[menuId]) {
                return true;
            } else {
                throw new Error('Menu does not exists');
            }
        } else {
            throw new Error('MenuId was not provided');
        }
        return false;
    };
    // Get the menu object by menu id
    this.getMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        return this.menus[menuId];
    };
    // Add new menu object by menu id
    this.addMenu = function (menuId, isPublic, roles) {
        // Create the new menu
        this.menus[menuId] = {
            isPublic: isPublic || false,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        };
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        delete this.menus[menuId];
    };
    // Add menu item object
    this.addMenuItem = function (menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Push new menu item
        this.menus[menuId].items.push({
            title: menuItemTitle,
            link: menuItemURL,
            menuItemType: menuItemType || 'item',
            menuItemClass: menuItemType,
            uiRoute: menuItemUIRoute || '/' + menuItemURL,
            isPublic: isPublic || this.menus[menuId].isPublic,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        });
        // Return the menu object
        return this.menus[menuId];
    };
    // Add submenu item object
    this.addSubMenuItem = function (menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === rootMenuItemURL) {
                // Push new submenu item
                this.menus[menuId].items[itemIndex].items.push({
                    title: menuItemTitle,
                    link: menuItemURL,
                    uiRoute: menuItemUIRoute || '/' + menuItemURL,
                    isPublic: isPublic || this.menus[menuId].isPublic,
                    roles: roles || this.defaultRoles,
                    shouldRender: shouldRender
                });
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenuItem = function (menuId, menuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
                this.menus[menuId].items.splice(itemIndex, 1);
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeSubMenuItem = function (menuId, submenuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
                if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
                    this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
                }
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    //Adding the topbar menu
    this.addMenu('topbar');
}]);'use strict';
// Config HTTP Error Handling
angular.module('users').config([
    '$httpProvider',
    function ($httpProvider) {
        // Set the httpProvider "not authorized" interceptor
        $httpProvider.interceptors.push([
            '$q',
            '$location',
            'Authentication',
            function ($q, $location, Authentication) {
                return {
                    responseError: function (rejection) {
                        switch (rejection.status) {
                            case 401:
                                // Deauthenticate the global user
                                Authentication.user = null;
                                // Redirect to signin page
                                $location.path('signin');
                                break;
                            case 403:
                                // Add unauthorized behaviour
                                break;
                        }
                        return $q.reject(rejection);
                    }
                };
            }
        ]);
    }
]);'use strict';
// Setting up route
angular.module('users').config([
    '$stateProvider',
    function ($stateProvider) {
        // Users state routing
        $stateProvider.state('profile', {
            url: '/settings/profile',
            templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
        }).state('password', {
            url: '/settings/password',
            templateUrl: 'modules/users/views/settings/change-password.client.view.html'
        }).state('accounts', {
            url: '/settings/accounts',
            templateUrl: 'modules/users/views/settings/social-accounts.client.view.html'
        }).state('signup', {
            url: '/signup',
            templateUrl: 'modules/users/views/signup.client.view.html'
        }).state('signin', {
            url: '/signin',
            templateUrl: 'modules/users/views/signin.client.view.html'
        });
    }
]);
'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication',
    function($scope, $http, $location, Authentication) {
        $scope.authentication = Authentication;

        //If user is signed in then redirect back home
        if ($scope.authentication.user) $location.path('/');

        $scope.signup = function() {
            $http.post('/auth/signup', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;

                //And redirect to the index page
                $location.path('/');
            }).error(function(response) {
                $scope.error = response.message;
            });
        };

        $scope.signin = function() {
            $http.post('/auth/signin', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;

                //And redirect to the index page
                $location.path('/');
                location.reload();
            }).error(function(response) {
                $scope.error = response.message;
            });
        };
    }
]);
angular.module('users').controller('SettingsController', [
    '$scope',
    '$http',
    '$location',
    'Users',
    'Authentication',
    function ($scope, $http, $location, Users, Authentication) {
        $scope.user = Authentication.user;
        // If user is not signed in then redirect back home
        if (!$scope.user)
            $location.path('/');
        // Check if there are additional accounts
        $scope.hasConnectedAdditionalSocialAccounts = function (provider) {
            for (var i in $scope.user.additionalProvidersData) {
                return true;
            }
            return false;
        };
        // Check if provider is already in use with current user
        $scope.isConnectedSocialAccount = function (provider) {
            return $scope.user.provider === provider || $scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider];
        };
        // Remove a user social account
        $scope.removeUserSocialAccount = function (provider) {
            $scope.success = $scope.error = null;
            $http.delete('/users/accounts', { params: { provider: provider } }).success(function (response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.user = Authentication.user = response;
            }).error(function (response) {
                $scope.error = response.message;
            });
        };
        // Update a user profile
        $scope.updateUserProfile = function () {
            $scope.success = $scope.error = null;
            var user = new Users($scope.user);
            user.$update(function (response) {
                $scope.success = true;
                Authentication.user = response;
            }, function (response) {
                $scope.error = response.data.message;
            });
        };
        // Change user password
        $scope.changeUserPassword = function () {
            $scope.success = $scope.error = null;
            $http.post('/users/password', $scope.passwordDetails).success(function (response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.passwordDetails = null;
            }).error(function (response) {
                $scope.error = response.message;
            });
        };
    }
]);'use strict';
// Authentication service for user variables
angular.module('users').factory('Authentication', [function () {
    var _this = this;
    _this._data = { user: window.user };
    return _this._data;
}]);'use strict';
// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', [
    '$resource',
    function ($resource) {
        return $resource('users', {}, { update: { method: 'PUT' } });
    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('foods').config(['$stateProvider',
    function($stateProvider) {
        // Foods state routing
        $stateProvider.
            state('listFoods', {
                url: '/foods',
                templateUrl: 'modules/foods/views/list-foods.client.view.html'
            }).
            state('createFood', {
                url: '/foods/create',
                templateUrl: 'modules/foods/views/create-food.client.view.html'
            }).
            state('viewFood', {
                url: '/foods/:foodId',
                templateUrl: 'modules/foods/views/view-food.client.view.html'
            }).
            state('editFood', {
                url: '/foods/:foodId/edit',
                templateUrl: 'modules/foods/views/edit-food.client.view.html'
            });
    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('foods').controller('FoodsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Foods',
    function($scope, $stateParams, $location, Authentication, Foods) {
        window.scope = $scope;

        // $scope.authentication = Authentication;
        $scope.servings = 1;

        $scope.foodTypes = [
            {id: 1, type: 'Fruit'},
            {id: 2, type: 'Starch'},
            {id: 3, type: 'Meat'},
            {id: 4, type: 'Liquid'},
            {id: 5, type: 'Vegetable'},
            {id: 6, type: 'Dessert'},
            {id: 7, type: 'Yogurt'},
            {id: 8, type: 'Pizza'},
            {id: 9, type: 'Butter/Oil'},
            {id: 10, type: 'Tofu'},
            {id: 11, type: 'Beans'},
            {id: 12, type: 'Alcohol'},
            {id: 13, type: 'Nuts'}
        ];

        $scope.groceryStores = [
            {id: 1, store: 'Trader Joes'},
            {id: 2, store: 'Wholefoods'},
            {id: 3, store: 'Foodtown'}
        ];


        $scope.servingsChange = function(food){
            if ($scope.servings > 0) {
                food.gramsDisplay = $scope.servings * food.grams;
                food.caloriesDisplay = $scope.servings * food.calories;
                food.fatDisplay = $scope.servings * food.fat;
                food.saturatedFatDisplay = $scope.servings * food.saturatedFat;
                food.transfatDisplay = $scope.servings * food.transfat;
                food.cholesterolDisplay = $scope.servings * food.cholesterol;
                food.sodiumDisplay = $scope.servings * food.sodium;
                food.carbohydratesDisplay = $scope.servings * food.carbohydrates;
                food.fiberDisplay = $scope.servings * food.fiber;
                food.sugarDisplay = $scope.servings * food.sugar;
                food.proteinDisplay = $scope.servings * food.protein;
                food.vitaminADisplay = $scope.servings * food.vitaminA;
                food.vitaminCDisplay = $scope.servings * food.vitaminC;
                food.calciumDisplay = $scope.servings * food.calcium;
                food.ironDisplay = $scope.servings * food.iron;

                $scope.totalFatDailyPercentageDisplay = (food.fatDisplay / 65) * 100;
                $scope.saturatedFatDailyPercentageDisplay = (food.saturatedFatDisplay / 20) * 100;
                $scope.cholesterolDailyPercentageDisplay = (food.cholesterolDisplay / 300) * 100;
                $scope.sodiumDailyPercentageDisplay = (food.sodiumDisplay / 2400) * 100;
                $scope.totalCarbohydratesDailyPercentageDisplay = (food.carbohydratesDisplay / 300) * 100;
                $scope.fiberDailyPercentageDisplay = (food.fiberDisplay / 25) * 100;
            }

        };

        $scope.create = function() {
            var food = new Foods({
                name: $scope.food.name,
                calories: $scope.food.calories,
                protein: $scope.food.protein,
                fat: $scope.food.fat,
                carbohydrates: $scope.food.carbohydrates,
                grams: $scope.food.grams,
                type: $scope.food.type,
                groceryStore: $scope.food.groceryStore,
                sodium: $scope.food.sodium,
                fiber: $scope.food.fiber,
                sugar: $scope.food.sugar,
                cholesterol: $scope.food.cholesterol,
                vitaminA: $scope.food.vitaminA,
                vitaminC: $scope.food.vitaminC,
                calcium: $scope.food.calcium,
                iron: $scope.food.iron,
                saturatedFat: $scope.food.saturatedFat,
                transfat: $scope.food.transfat
                //milliliters: $scope.milliliters
            });
            food.$save(function(response) {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            this.food.name = '';
            this.food.groceryStore = 0;
            this.food.sodium = '';
            this.food.saturatedFat = '';
            this.food.fiber = '';
            this.food.sugar = '';
            this.food.transfat = '';
            this.food.vitaminA = '';
            this.food.vitaminC = '';
            this.food.cholesterol = '';
            this.food.calcium = '';
            this.food.iron = '';
            this.food.calories = '';
            this.food.protein = '';
            this.food.fat = '';
            this.food.carbohydrates = '';
            this.food.grams = '';
            this.food.type = '';
            //this.milliliters = '';
        };

        $scope.update = function() {
            var food = $scope.food;

            food.$update(function() {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.remove = function(food) {
            if (confirm("Are you sure you want to delete this food?")) {
                if (food) {
                    food.$remove();

                    for (var i in $scope.foods) {
                        if ($scope.foods[i] === food) {
                            $scope.foods.splice(i, 1);
                        }
                    }
                } else {
                    $scope.food.$remove(function () {
                        $location.path('foods');
                    });
                }
            }
        };

        $scope.find = function() {
            $scope.foods = Foods.query();


        };

        $scope.findOne = function() {
            $scope.food = Foods.get({
                foodId: $stateParams.foodId
            },function(){
                $scope.calculateDailyPercentages($scope.food);

                $scope.food.gramsDisplay = $scope.food.grams;
                $scope.food.caloriesDisplay = $scope.food.calories;
                $scope.food.fatDisplay = $scope.food.fat;
                $scope.food.saturatedFatDisplay = $scope.food.saturatedFat;
                $scope.food.transfatDisplay = $scope.food.transfat;
                $scope.food.cholesterolDisplay = $scope.food.cholesterol;
                $scope.food.sodiumDisplay = $scope.food.sodium;
                $scope.food.carbohydratesDisplay = $scope.food.carbohydrates;
                $scope.food.fiberDisplay = $scope.food.fiber;
                $scope.food.sugarDisplay = $scope.food.sugar;
                $scope.food.proteinDisplay = $scope.food.protein;
                $scope.food.vitaminADisplay = $scope.food.vitaminA;
                $scope.food.vitaminCDisplay = $scope.food.vitaminC;
                $scope.food.calciumDisplay = $scope.food.calcium;
                $scope.food.ironDisplay = $scope.food.iron;
                $scope.food.type = parseInt($scope.food.type) >= 0 ? parseInt($scope.food.type) : 0;
                $scope.food.typeDisplay = $scope.foodTypes[$scope.food.type].type;


                $scope.totalFatDailyPercentageDisplay = $scope.totalFatDailyPercentage;
                $scope.saturatedFatDailyPercentageDisplay = $scope.saturatedFatDailyPercentage;
                $scope.cholesterolDailyPercentageDisplay = $scope.cholesterolDailyPercentage;
                $scope.sodiumDailyPercentageDisplay = $scope.sodiumDailyPercentage;
                $scope.totalCarbohydratesDailyPercentageDisplay = $scope.totalCarbohydratesDailyPercentage;
                $scope.fiberDailyPercentageDisplay = $scope.fiberDailyPercentage;

                showDailyMacrosChart();
            });
        };

        $scope.calculateDailyPercentages = function(food) {
            $scope.totalFatDailyPercentage = (food.fat / 65) * 100;
            $scope.saturatedFatDailyPercentage = (food.saturatedFat / 20) * 100;
            $scope.cholesterolDailyPercentage = (food.cholesterol / 300) * 100;
            $scope.sodiumDailyPercentage = (food.sodium / 2400) * 100;
            $scope.totalCarbohydratesDailyPercentage = (food.carbohydrates / 300) * 100;
            $scope.fiberDailyPercentage = (food.fiber / 25) * 100;
        };

        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#macrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.food.proteinDisplay);
            config.data.json.carbs = parseInt($scope.food.carbohydratesDisplay);
            config.data.json.fat = parseInt($scope.food.fatDisplay);
            config.axis = {"y":{"label":{"text":"Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 280, height: 280};
            $scope.chart = c3.generate(config);
        };

    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

//Foods service used for communicating with the foods REST endpoints
angular.module('foods').factory('Foods', ['$resource',
    function($resource) {
        return $resource('foods/:foodId', {
            foodId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);


/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('nutritionProfile');


/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Nutrition Profile service used for communicating with the Nutrition Profile REST endpoint
angular.module('nutritionProfile').factory('NutritionProfile', ['$resource',
    function($resource) {

        return $resource('nutritionProfile', {
            // nutritionProfileId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });

    }
]);
//
//angular.module('nutritionProfile').factory('NutritionProfile', function($http) {
//    return {
//        get : function() {
//            return $http.get('/api/nutritionProfile');
//        },
//        create : function(nutritionProfile) {
//            return $http.post('/api/nutritionProfile', nutritionProfile);
//        }
//    }
//});

/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('nutritionProfile').config(['$stateProvider',
    function($stateProvider) {
        // nutritionProfile state routing
        $stateProvider.
            state('listNutritionProfile', {
                url: '/nutritionProfile',
                templateUrl: 'modules/nutrition-profile/views/edit-nutritionProfile.client.view.html'
            });
    }
]);


'use strict';

angular.module('nutritionProfile').controller('NutritionProfileController', ['$scope', '$stateParams', '$location', 'Authentication', 'NutritionProfile', '$timeout',
    function($scope, $stateParams, $location, Authentication, NutritionProfile, $timeout) {
        window.scope = $scope;

        $scope.sexOptions = [
            'Male',
            'Female'
        ];

        $scope.heightFeetOptions = [ 1, 2, 3, 4, 5, 6, 7, 8];
        $scope.heightInchesOptions = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];


        $scope.create = function() {
            var nutritionProfile = new NutritionProfile({
                proteinPercentageTarget: $scope.nutritionProfile.proteinPercentageTarget,
                carbohydratesPercentageTarget: $scope.nutritionProfile.carbohydratesPercentageTarget,
                fatPercentageTarget: $scope.nutritionProfile.fatPercentageTarget,
                deficitTarget: $scope.nutritionProfile.deficitTarget,
                age: $scope.nutritionProfile.age,
                sex: $scope.nutritionProfile.sex,
                weight: $scope.nutritionProfile.weight,
                heightFeet: $scope.nutritionProfile.heightFeet,
                heightInches: $scope.nutritionProfile.heightInches,
                restingHeartRate: $scope.nutritionProfile.restingHeartRate,
                bodyFatPercentage: $scope.nutritionProfile.bodyFatPercentage
            });
            nutritionProfile.$save(function(response) {

                $scope.nutritionProfile = response;

                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.update = function() {
            var nutritionProfile = $scope.nutritionProfile;

            if (!nutritionProfile._id) {
                $scope.create();
            }
            else {
                nutritionProfile.$update(function () {
                    $scope.success = true;

                    $timeout(function(){$scope.success = false;}, 3000);
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }

        }

        $scope.findOne = function () {
            $scope.nutritionProfile = NutritionProfile.get({
                userId: user ? user._id : null
            }, function () {

            });
        };


    }
]);

'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('activities');


/**
 * Created by jason on 9/8/14.
 */
// Configuring the Articles module
angular.module('activities').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Activities', 'activities', 'dropdown', '/activities(/create)?');
        Menus.addSubMenuItem('topbar', 'activities', 'List Activities', 'activities');
        Menus.addSubMenuItem('topbar', 'activities', 'New Activity', 'activities/create');
    }
]);
/**
 * Created by jason on 9/8/14.
 */

'use strict';

// Setting up route
angular.module('activities').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listActivities', {
                url: '/activities',
                templateUrl: 'modules/activities/views/list-activities.client.view.html'
            }).
            state('createActivity', {
                url: '/activities/create',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('createActivity2', {
                url: '/activities/create/:planDateForCreate',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('viewActivity', {
                url: '/activities/:activityId',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('editActivity', {
                url: '/activities/:activityId/edit',
                templateUrl: 'modules/activities/views/edit-activity.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/9/14.
 */

'use strict';

//Activities service used for communicating with the activities REST endpoints
angular.module('activities').factory('Activities', ['$resource',
    function($resource) {
        return $resource('activities/:activityId', {
            activityId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);
/**
 * Created by jason on 9/8/14.
 */

'use strict';

angular.module('activities').controller('ActivitiesController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'Activities', 'NutritionProfile',
    function($scope, $stateParams, $timeout, $location, Authentication, Activities, NutritionProfile) {
        window.scope = $scope;
        $scope.showPlanEditableErrorMsg = false;
        $scope.isSortingEnabled = false;
        var sortingBtnTxtOptions = ['Enable Sorting', 'Disable Sorting'];
        $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
        var isSortingEnabled = false;

        $scope.authentication = Authentication;
        $scope.nutritionProfile = NutritionProfile.get();

        $scope.activityTypeCategories = [
            'Endurance', 'Strength', 'Balance', 'Flexibility'
        ];


        // $scope.planDateParam = $routeParams.planDateForCreate;


        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'}

        ];

        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.environments = [
            {id: 0, name: 'Outdoors'},
            {id: 1, name: 'Indoors'}
        ];

        $scope.intensityList = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        ];

        $scope.directionList = ['Ascending', 'Descending'];

//        $scope.activityFieldsList = ['planDate', 'steps', 'weight', 'duration', 'distance', 'averageHeartRate',
//            'activityType', 'averageSpeed', 'intensity', ];

        $scope.selectedDirection = 'Descending';

        $scope.calculateTotalCaloriesBurned = function(){
            var total = 0;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];
                var calories = activity.caloriesBurned;

                total += calories;
            }

            $scope.plan.totalCaloriesBurned = total;
        };

        //formulate for calculating calories burned for men:
        // [(Age x 0.2017) — (Weight x 0.09036) + (Heart Rate x 0.6309) — 55.0969] x Time / 4.184.
        //formulate for calculating calories burned for women:
        // [(Age x 0.074) — (Weight x 0.05741) + (Heart Rate x 0.4472) — 20.4022] x Time / 4.184.
        $scope.calculateCalories = function(activity){
            var age = $scope.nutritionProfile.age;
            var weight = $scope.nutritionProfile.weight;
            var heightFeet = $scope.nutritionProfile.heightFeet;
            var heightInches = $scope.nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = $scope.nutritionProfile.sex;

            var averageHeartRate = parseInt(activity.averageHeartRate);
            var duration = parseInt(activity.duration);

            var caloriesBurned = 0;

            if(duration > 0) {
                if (!averageHeartRate){
                    averageHeartRate = 120;
                }

                if (gender === 'Male') {
                    caloriesBurned = (((age * 0.2017) - (weight * 0.09036) + (averageHeartRate * 0.6309) - 55.0969) * duration) / 4.184;
                }
                else {
                    caloriesBurned = (((age * 0.074) - (weight * 0.05741) + (averageHeartRate * 0.4472) - 20.4022) * duration) / 4.184;

                }
            }
            else{
                if(!averageHeartRate || averageHeartRate <= 0){
                    var steps = activity.steps;
                    if(steps > 0) {
                        var caloriesBurnedInMile = 0.57 * weight;
                        var stepsInMiles = steps / 2000;

                        caloriesBurned = stepsInMiles * caloriesBurnedInMile;
                    }
                }
            }

            activity.caloriesBurned = caloriesBurned;

            $scope.calculateTotalCaloriesBurned();
        };

        $scope.isActivityEndurance = function(activity){
            var activityTypeId = activity.activityType;

            var type = $scope.activityTypesDictionary[activityTypeId].type;

            return type === 0;
        };

        $scope.isActivityDistanceRelated = function(activity){
            var activityTypeId = activity.activityType;

            var type = $scope.activityTypesDictionary[activityTypeId].name;

            return type === 'Running' || type === 'Walking';
        };

        $scope.toggleSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').removeClass('disabled');
                isSortingEnabled = true;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[1];
            }
            else{
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;
                $scope.sortingBtnTxt = sortingBtnTxtOptions[0];
            }
        };

        $scope.setSorting = function(){
            if (!isSortingEnabled){
                $('.panel-group').find('.panel-default').addClass('disabled');
                isSortingEnabled = false;

            }

        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.plan.activities.splice(end, 0,
                $scope.plan.activities.splice(start, 1)[0]);

            $scope.$apply();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };

        $scope.create = function() {
            var planDateAsString = $scope.plan.planDateNonUtc.toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();


            var plan = new Activities({
                planDateForDB: planDateAsString,
                planDateAsMili: planDate.getTime(),
                planDateAsConcat: parseInt(planDate.getFullYear() + '' + (planDate.getMonth() < 10 ? '0' + planDate.getMonth() : planDate.getMonth()) + '' + (planDate.getDate() < 10 ? '0' + planDate.getDate() : planDate.getDate())),
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                totalCaloriesBurned: $scope.plan.totalCaloriesBurned,
                activities: $scope.plan.activities
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = response.planDateNonUtc;
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.totalCaloriesBurned = 0;
            $scope.plan.activities = [];
        };

        $scope.copyPlan = function(planCopyModel){
            var plan = new Activities({
                planDate: planCopyModel.planDate,
                activities: planCopyModel.activities
            });
            plan.$save(function(response) {
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.createActivity = function(){
            var model = {
                name: '',
                activityType: 28,
                activityName: 'Walking',
                steps: 0,
                intensity: 1,
                distance: 0,
                equipment: 0,
                duration: 0,
                averageHeartRate: 0,
                caloriesBurned: 0,
                averageSpeed: 0,
                reps: 0,
                sets: 0,
                weight: 0,
                isVisible: true,
                isEditable: true
            };

            $scope.plan.activities.push(model);

            $scope.calculateCalories(model);

            $timeout(function(){$scope.setSorting();}, 100);
        };

        $scope.editActivity = function(activity){
            activity.isEditable = true;
            activity.isVisible = !activity.isVisible;
        };

        $scope.saveActivity = function(activity){
            activity.isEditable = false;
            activity.isVisible = !activity.isVisible;
        };



        $scope.deleteActivity = function(activity){
            if (confirm("Are you sure you want to delete this activity?")) {
                for (var i in $scope.plan.activities) {
                    if ($scope.plan.activities[i] === activity) {
                        $scope.plan.activities.splice(i, 1);
                    }
                }
            }
        };



        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.activities) {
                    if ($scope.activities[i] === plan) {
                        $scope.activities.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('activities');
                });
            }
        };

        $scope.saveActivityPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];

                activity.isEditable = false;

                var isStrengthActivity = $scope.activityTypesDictionary[activity.activityType].type === 1;

                if (isStrengthActivity){
                    activity.steps = 0;
                    activity.averageSpeed = 0;
                    activity.distance = 0;
                }
            }

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('activities');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;
            plan.totalCaloriesBurned = plan.totalCaloriesBurned;
            plan.planDateAsMili = planDate.getTime();
            plan.planDateAsConcat = parseInt(planDate.getFullYear() + '' + (planDate.getMonth() < 10 ? '0' + planDate.getMonth() : planDate.getMonth()) + '' + (planDate.getDate() < 10 ? '0' + planDate.getDate() : planDate.getDate()));

            plan.$update(function() {
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);
                $timeout(function(){$scope.setSorting();}, 100);

            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.activities = Activities.query(
                function(u, getResponseHeaders)
                {

                }
            );


        };

        $scope.findOne = function() {
            if ($stateParams.activityId) {
                $scope.plan = Activities.get({
                    activityId: $stateParams.activityId
                }, function (u, getResponseHeaders) {
                    if (!$scope.plan.planDateNonUtc){
                        $scope.plan.planDateNonUtc = $scope.plan.planDate;
                    }

                    $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

                    $scope.calculateTotalCaloriesBurned();

                });
            }
            else{
                $scope.plan =  {data: null, activities: null, planDate: new Date(), planDateNonUtc: new Date()};
                $scope.plan.activities = [];

                //todo use ngRouter instead of this horrible method for extracting url param
                var urlSplit = $location.path().split('/');
                if(urlSplit.length >= 3){
                    var dateParam;

                    if(urlSplit.length == 4) {
                        dateParam = urlSplit[3];
                    }
                    else{
                        dateParam = urlSplit[2];
                    }

                    if(dateParam.indexOf('_') !== -1){
                        var dateParamSplit = dateParam.split('_');

                        var dateDay = parseInt(dateParamSplit[1]);
                        var dateYear = parseInt(dateParamSplit[2]);
                        var dateMonth = parseInt(dateParamSplit[0]);

                        $scope.plan.planDate = new Date(dateYear, dateMonth, dateDay);
                        $scope.plan.planDateNonUtc = new Date(dateYear, dateMonth, dateDay);
                    }
                }

                $scope.createActivity();

            }
        };


        $scope.toggleActivityVisibility = function(activity){
            activity.isVisible = !activity.activity;
        };


        var checkIfPlanEditable = function(){
            var isPlanEditable = false;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var planActivity = $scope.plan.activities[i];

                if (planActivity.isEditable){
                    isPlanEditable = true;
                    break;
                }
            }

            return isPlanEditable;
        };

        //sorting code
        // data
        $scope.orderByField = 'planDateAsMili';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('bodyStats');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('bodyStats').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Body Stats', 'bodyStats', 'dropdown', '/body-stats(/create)?');
        Menus.addSubMenuItem('topbar', 'bodyStats', 'List Body Stats', 'body-stats');
        Menus.addSubMenuItem('topbar', 'bodyStats', 'New Body Stat', 'body-stats/create');
    }
]);

/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Setting up route
angular.module('bodyStats').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listBodyStats', {
                url: '/body-stats',
                templateUrl: 'modules/body-stats/views/list-body-stats.client.view.html'
            }).
            state('createBodyStat', {
                url: '/body-stats/create',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('viewBodyStat', {
                url: '/body-stats/:bodyStatId',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('editBodyStat', {
                url: '/body-stats/:bodyStatId/edit',
                templateUrl: 'modules/body-stats/views/edit-body-stat.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/19/14.
 */

'use strict';

//Body Stats service used for communicating with the body stats REST endpoints
angular.module('bodyStats').factory('BodyStats', ['$resource',
    function($resource) {
        return $resource('body-stats/:bodyStatId', {
            bodyStatId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

/**
 * Created by jason on 9/19/14.
 */
'use strict';

angular.module('bodyStats').controller('BodyStatsController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'BodyStats',
    function($scope, $stateParams, $timeout, $location, Authentication, BodyStats) {
        window.scope = $scope;
        $scope.showPlanEditableErrorMsg = false;


        $scope.authentication = Authentication;


        $scope.directionList = ['Ascending', 'Descending'];
        $scope.selectedDirection = 'Descending';

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.create = function() {
            var planDateAsString = $scope.plan.planDateNonUtc.toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();

            var plan = new BodyStats({
                planDateForDB: planDateAsString,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                planDateAsMili: planDate.getTime(),
                weight: $scope.plan.weight,
                bodyFatPercentage: $scope.plan.bodyFatPercentage
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = response.planDateNonUtc;
                $location.path('body-stats/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.bodyFatPercentage = 0;
            $scope.plan.weight = 0;
        };


        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.bodyStats) {
                    if ($scope.bodyStats[i] === plan) {
                        $scope.bodyStats.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('body-stats');
                });
            }
        };

        $scope.saveBodyStatPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('body-stats');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateYear = planDate.getFullYear();
            var planDateMonth = planDate.getMonth();
            var planDateDay = planDate.getDate();


            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;
            plan.planDateAsMili = planDate.getTime();
            plan.weight = plan.weight;
            plan.bodyFatPercentage = plan.bodyFatPercentage;

            plan.$update(function() {
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);


            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.bodyStats = BodyStats.query(
                function(u, getResponseHeaders)
                {

                }
            );


        };

        $scope.findOne = function() {
            if ($stateParams.bodyStatId) {
                $scope.plan = BodyStats.get({
                    bodyStatId: $stateParams.bodyStatId
                }, function (u, getResponseHeaders) {
                    if (!$scope.plan.planDateNonUtc){
                        $scope.plan.planDateNonUtc = $scope.plan.planDate;
                    }

                    $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;


                });
            }
            else{
                $scope.plan =  {weight: null, bodyFatPercentage: null, planDate: new Date(), planDateNonUtc: new Date()};


            }
        };



        //sorting code
        // data
        $scope.orderByField = 'planDateAsMili';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('progress');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('progress').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Progress', 'progress', 'dropdown', '/progress(/create)?');
        Menus.addSubMenuItem('topbar', 'progress', 'Show Progress', 'progress');
        //Menus.addSubMenuItem('topbar', 'progress', 'New Body Stat', 'body-stats/create');
    }
]);

'use strict';

// Setting up route
angular.module('progress').config(['$stateProvider',
    function($stateProvider) {
        // progress state routing
        $stateProvider.
            state('listProgress', {
                url: '/progress',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('createProgress', {
                url: '/progress/create',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('viewProgress', {
                url: '/progress/:progressId',
                //templateUrl: 'modules/progress/views/view-progress.client.view.html'
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('editProgress', {
                url: '/progress/:progressId/edit',
                //templateUrl: 'modules/progress/views/edit-progress.client.view.html'
                templateUrl: 'modules/progress/views/create-progress.client.view.html'
            });
    }
]);

'use strict';

//progress service used for communicating with the progress REST endpoints
angular.module('progress').factory('Progress', ['$resource',
    function($resource) {
        return $resource('progress/:progressId', {
            progressId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);
/**
 * Created by jason on 9/20/14.
 */
/**
 * Created by jason on 9/19/14.
 */
'use strict';

angular.module('progress').controller('ProgressController', ['$scope', '$stateParams', '$location', 'Authentication', 'Progress', 'BodyStats',
    function($scope, $stateParams, $location, Authentication, Progress, BodyStats) {
        window.scope = $scope;

        $scope.authentication = Authentication;

        $scope.durationList = [
            {value: 1, text: '1 Month'},
            {value: 3, text: '3 Months'},
            {value: 6, text: '6 Months'},
            {value: 9, text: '9 Months'},
            {value: 12, text: '1 Year'},

        ];

        $scope.endDate = new Date();
        $scope.startDate = new Date();

        $scope.selectedDurationChange = function(){
            var selectedDuration = $scope.selectedDuration;
            var now = new Date();

            //get last day of current month
            $scope.endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);

            //calculate number of months back from current month
            $scope.startDate = new Date(now.getFullYear(), now.getMonth() - selectedDuration, 1);
        };

        $scope.selectedDuration = $scope.durationList[2].value;
        $scope.selectedDurationChange();

        $scope.openStartDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.startDateOpened = true;
        };

        $scope.openEndDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.endDateOpened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');



        $scope.find = function() {
            var startDateFormatted = $scope.startDate.getFullYear() + '_' + $scope.startDate.getMonth() + '_' + $scope.startDate.getDate();
            var endDateFormatted = $scope.endDate.getFullYear() + '_' + $scope.endDate.getMonth() + '_' + $scope.endDate.getDate();

            $scope.progress = Progress.query({
                    startDate: startDateFormatted,
                    endDate: endDateFormatted
                },
                function(u, getResponseHeaders)
                {
                    var plans = u;

                    BodyStats.query({
                            startDate: startDateFormatted,
                            endDate: endDateFormatted
                        },
                        function(u, getResponseHeaders)
                        {
                            var bodyStats = u;
                            var plansFinal = plans;
                            var plansFormatted = false;

                            if(plans.length > 10) {
                                plansFinal = formatPlansDates(plans, bodyStats);
                                plansFormatted = true;
                            }

                            getChartData(plansFinal, bodyStats, plansFormatted);
                        });
                }
            );
        };

        var formatPlansDates = function(plans, bodyStats){
            var formattedPlans = [];
            var yearsSpread = [];

            //figure out the year and month spread
            for(var p = 0; p < plans.length; p++){
                var plan = plans[p];

                var monthWeightList = getWeightListForPlan(bodyStats, plans[p]);

                var planYear = plan.planDateYear;

                if(yearsSpread.length == 0){
                    yearsSpread.push({
                        year: planYear,
                        months: []
                    });

                    yearsSpread[0].months[plan.planDateMonth] = [plan];

                    if(!yearsSpread[0].months[plan.planDateMonth].weightList) {
                        yearsSpread[0].months[plan.planDateMonth].weightList = monthWeightList;
                    }
                    else {
                        yearsSpread[0].months[plan.planDateMonth].weightList.concat(monthWeightList);
                    }
                }
                else {
                    yearsSpread = buildMonthsSpreadForYear(plan, planYear, yearsSpread, monthWeightList);
                }
            }

            //average plan data for months
            for(var y = 0; y < yearsSpread.length; y++) {
                var yearSpreadItem = yearsSpread[y];

                for (var m = 0; m < yearSpreadItem.months.length; m++) {
                    var monthSpreadItem = yearSpreadItem.months[m];

                    if (monthSpreadItem) {
                        var newFormattedPlan = averageMonthSpreadItem(monthSpreadItem);

                        formattedPlans.push(newFormattedPlan);
                    }
                }
            }

            return formattedPlans;
        };

        var buildMonthsSpreadForYear = function(plan, planYear, yearsSpread, monthWeightList){
            for (var y = 0; y < yearsSpread.length; y++) {
                var yearFoundInSpread = false;
                var yearSpreadItem = yearsSpread[y];

                var monthsSpread = yearSpreadItem ? yearSpreadItem.months : [];

                if (yearSpreadItem.year == planYear) {
                    yearFoundInSpread = true;

                    var plansForMonth = monthsSpread[plan.planDateMonth] || [];

                    plansForMonth.push(plan);

                    if(!yearSpreadItem.months) {
                        yearSpreadItem.months[plan.planDateMonth] = plansForMonth;
                    }
                    else{
                        //tack on months to existing months array item
                        if(yearSpreadItem.months[plan.planDateMonth]) {
                            yearSpreadItem.months[plan.planDateMonth].concat(plansForMonth);
                        }
                        //initially set month in months ary
                        else{
                            yearSpreadItem.months[plan.planDateMonth] = plansForMonth;
                        }
                    }

                    if(!yearSpreadItem.months[plan.planDateMonth].weightList) {
                        yearSpreadItem.months[plan.planDateMonth].weightList = monthWeightList;
                    }
                    else{
                        yearSpreadItem.months[plan.planDateMonth].weightList.concat(monthWeightList);
                    }


                }
            }

            if(!yearFoundInSpread){
                yearsSpread.push({
                    year: planYear,
                    months: []
                });

                var len = yearsSpread.length - 1;

                yearsSpread[len].months[plan.planDateMonth] = [plan];

                if(!yearsSpread[len].months[plan.planDateMonth].weightList) {
                    yearsSpread[len].months[plan.planDateMonth].weightList = monthWeightList;
                }
                else{
                    yearSpreadItem.months[plan.planDateMonth].weightList.concat(monthWeightList);
                }
            }

            return yearsSpread;
        };

        var getWeightListForPlan = function(bodyStats, plan, compareDay){
            var isPlanWeightMatchFound = false;
            var bodyStatsNonZeroList = [];
            var weightList = [];

            for(var b = 0; b < bodyStats.length; b++){
                var bodyStatFromDb = bodyStats[b];

                if(!compareDay) {
                    if (plan.planDateYear == bodyStatFromDb.planDateYear &&
                        plan.planDateMonth == bodyStatFromDb.planDateMonth) {

                        bodyStatsNonZeroList.push(bodyStatFromDb.weight);

                        weightList.push(bodyStatFromDb.weight);

                        isPlanWeightMatchFound = true;
                    }
                }
                else{
                    if (plan.planDateYear == bodyStatFromDb.planDateYear &&
                        plan.planDateMonth == bodyStatFromDb.planDateMonth &&
                        plan.planDateDay == bodyStatFromDb.planDateDay) {

                        bodyStatsNonZeroList.push(bodyStatFromDb.weight);

                        weightList.push(bodyStatFromDb.weight);

                        isPlanWeightMatchFound = true;
                    }
                }
            }

            if(!isPlanWeightMatchFound){
                var mostRecentWeight;

                if(bodyStatsNonZeroList.length > 0) {
                    mostRecentWeight = bodyStatsNonZeroList[bodyStatsNonZeroList.length - 1];
                }
                else{
                    mostRecentWeight = bodyStats[0].weight;
                }

                weightList.push(mostRecentWeight);

                bodyStatsNonZeroList.push(mostRecentWeight);
            }

            return weightList;
        };

        var averageMonthSpreadItem = function(monthSpreadItem){
            var proteinTotal = 0;
            var carbsTotal = 0;
            var fatTotal = 0;
            var caloriesTotal = 0;
            var weightTotal = 0;
            var deficitTotal = 0;

            var month = monthSpreadItem[0].planDateMonth;
            var year = monthSpreadItem[0].planDateYear;

            for(var p = 0; p < monthSpreadItem.length; p++){
                var planItem = monthSpreadItem[p];

                proteinTotal += planItem.totalPlanProteinAsPercent;
                carbsTotal += planItem.totalPlanCarbsAsPercent;
                fatTotal += planItem.totalPlanFatAsPercent;
                caloriesTotal += planItem.totalPlanCalories;
                deficitTotal += planItem.deficit;
            }

            for(var w = 0; w < monthSpreadItem.weightList.length; w++){
                weightTotal += monthSpreadItem.weightList[w];
            }

            var newFormattedPlan = {
                planDateYear: year,
                planDateMonth: month,
                planDateDay: 1,
                totalPlanProteinAsPercent: proteinTotal / monthSpreadItem.length,
                totalPlanCarbsAsPercent: carbsTotal / monthSpreadItem.length,
                totalPlanFatAsPercent: fatTotal / monthSpreadItem.length,
                totalPlanCalories: caloriesTotal / monthSpreadItem.length,
                deficit: deficitTotal / monthSpreadItem.length,
                weightList: weightTotal / monthSpreadItem.weightList.length
            };

            return newFormattedPlan;
        };

        var getChartData = function(plans, bodyStats, plansFormatted) {
            var fatList = [];
            var carbsList = [];
            var proteinList = [];
            var datesList = [];
            var caloriesList = [];
            var deficitList = [];
            var weightList = [];

            for(var i = 0; i < plans.length; i++){
                var dayItem = plans[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                proteinList.push(parseInt(dayItem.totalPlanProteinAsPercent));
                carbsList.push(parseInt(dayItem.totalPlanCarbsAsPercent));
                fatList.push(parseInt(dayItem.totalPlanFatAsPercent));
                caloriesList.push(parseInt(dayItem.totalPlanCalories));
                deficitList.push(parseInt(dayItem.deficit));
                datesList.push(dayDate);

                if(!plansFormatted){
                    var planWeightList = getWeightListForPlan(bodyStats, dayItem, true);

                    weightList.push(planWeightList);
                }
                else{
                    weightList.push(dayItem.weightList);
                }
            }

            var macrosModel = {proteinList: proteinList, carbsList: carbsList, fatList: fatList, datesList: datesList, weightList: weightList};

            bindMacrosChart(macrosModel);

            var caloriesModel = {caloriesList: caloriesList, datesList: datesList, weightList: weightList};

            bindCaloriesChart(caloriesModel);

            var deficitModel = {deficitList: deficitList, datesList: datesList, weightList: weightList};

            bindDeficitChart(deficitModel);
        };

        var bindDeficitChart = function(deficit){
            var configDeficit = {};
            configDeficit.bindto = '#deficitChart';
            configDeficit.data = {};
            configDeficit.data.json = {};
            configDeficit.data.json.Deficit = deficit.deficitList;
            configDeficit.data.json.Weight = deficit.weightList;
            configDeficit.axis = {
                "x":
                {
                    type: 'category',
                    categories: deficit.datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"Deficit",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };

            configDeficit.data.axes = {
                Deficit: 'y',
                Weight: 'y2'
            };

            configDeficit.data.types={"Deficit":"line","Weight":"line"};
            configDeficit.size = {width: 850, height: 220};
            $scope.deficitChart = c3.generate(configDeficit);
        };

        var bindCaloriesChart = function(calories){
            var configCalories = {};
            configCalories.bindto = '#caloriesChart';
            configCalories.data = {};
            configCalories.data.json = {};
            configCalories.data.json.Calories = calories.caloriesList;
            configCalories.data.json.Weight = calories.weightList;
            configCalories.axis = {
                "x":
                {
                    type: 'category',
                    categories: calories.datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"Calories",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };

            configCalories.data.axes = {
                Calories: 'y',
                Weight: 'y2'
            };

            configCalories.data.types={"Calories":"line","Weight":"line"};
            configCalories.size = {width: 850, height: 220};
            $scope.caloriesChart = c3.generate(configCalories);
        };

        var bindMacrosChart = function(macros){
            var configMacros = {};
            configMacros.bindto = '#macrosChart';
            configMacros.data = {};
            configMacros.data.json = {};
            configMacros.data.json.Protein = macros.proteinList;
            configMacros.data.json.Carbs = macros.carbsList;
            configMacros.data.json.Fat = macros.fatList;
            configMacros.data.json.Weight = macros.weightList;
            configMacros.axis = {
                "x":
                {
                    type: 'category',
                    categories: macros.datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"Macros",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };
            configMacros.data.axes = {
                Protein: 'y',
                Carbs: 'y',
                Fat: 'y',
                Weight: 'y2'
            };
            configMacros.data.types={"Protein":"line", "Carbs": "line", "Fat": "line","Weight":"line"};
            configMacros.size = {width: 850, height: 220};
            $scope.macrosChart = c3.generate(configMacros);
        };

    }
]);