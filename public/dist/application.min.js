'use strict';
// Init the application configuration module for AngularJS application
var ApplicationConfiguration = function () {
    // Init module configuration options
    var applicationModuleName = 'nutrition-manager';
    var applicationModuleVendorDependencies = [
        'ngRoute',
        'ngResource',
        'ngAnimate',
        'ui.router',
        'ui.bootstrap',
        'ui.utils'
    ];
    // Add a new vertical module
    var registerModule = function (moduleName) {
        // Create angular module
        angular.module(moduleName, []);
        // Add the module to the AngularJS configuration file
        angular.module(applicationModuleName).requires.push(moduleName);
    };
    return {
        applicationModuleName: applicationModuleName,
        applicationModuleVendorDependencies: applicationModuleVendorDependencies,
        registerModule: registerModule
    };
}();'use strict';
//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);
// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config([
    '$locationProvider',
    function ($locationProvider) {
        $locationProvider.hashPrefix('!');
    }
]);
//Then define the init function for starting up the application
angular.element(document).ready(function () {
    //Fixing facebook bug with redirect
    if (window.location.hash === '#_=_')
        window.location.hash = '#!';
    //Then init the app
    angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('plans');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('foods');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');'use strict';
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');'use strict';

//ApplicationConfiguration.registerModule('customDirectives', []);

angular.module('core').directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
    // contains
    function contains(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    return true;
                }
            }
        }
        return false;
    }

    // add
    function add(arr, item) {
        arr = angular.isArray(arr) ? arr : [];
        for (var i = 0; i < arr.length; i++) {
            if (angular.equals(arr[i], item)) {
                return arr;
            }
        }
        arr.push(item);
        return arr;
    }

    // remove
    function remove(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    arr.splice(i, 1);
                    break;
                }
            }
        }
        return arr;
    }

    // http://stackoverflow.com/a/19228302/1458162
    function postLinkFn(scope, elem, attrs) {
        // compile with `ng-model` pointing to `checked`
        $compile(elem)(scope);

        // getter / setter for original model
        var getter = $parse(attrs.checklistModel);
        var setter = getter.assign;

        // value added to list
        var value = $parse(attrs.checklistValue)(scope.$parent);

        // watch UI checked change
        scope.$watch('checked', function(newValue, oldValue) {
            if (newValue === oldValue) {
                return;
            }
            var current = getter(scope.$parent);
            if (newValue === true) {
                setter(scope.$parent, add(current, value));
            } else {
                setter(scope.$parent, remove(current, value));
            }
        });

        // watch original model change
        scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
            scope.checked = contains(newArr, value);
        }, true);
    }

    return {
        restrict: 'A',
        priority: 1000,
        terminal: true,
        scope: true,
        compile: function(tElement, tAttrs) {
            if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
                throw 'checklist-model should be applied to `input[type="checkbox"]`.';
            }

            if (!tAttrs.checklistValue) {
                throw 'You should provide `checklist-value`.';
            }

            // exclude recursion
            tElement.removeAttr('checklist-model');

            // local scope var storing individual checkbox model
            tElement.attr('ng-model', 'checked');

            return postLinkFn;
        }
    };
}]);

angular.module(ApplicationConfiguration.applicationModuleName).filter('filterFoodsByPartialText', function (CoreUtilities) {
    // function that's invoked each time Angular runs $digest()
    // pass in `item` which is the single Object we'll manipulate
    return function (foodsAry, foodText) {
        var newFoods = CoreUtilities.getFoods(foodText);

        return newFoods.then(getRetrievedFoodsFromDb);
    };

    var getRetrievedFoodsFromDb = function(response){
        return response.data;
    };
});

/**
 * Created by jason on 9/7/14.
 */

angular.module('core').directive('sortable', ['$parse', '$compile', function($parse, $compile) {
    return {
        scope: {
            start: '@',
            startcallback: '=',
            update: '@',
            disableallelementsbydefault: '=',
            updatecallback: '=',
            rootsortableelement:'@'
        },

        link: function (scope, element, attrs, ctrl) {
            scope.updateEvent = function(e, ui){
                scope.$apply(scope.updatecallback(e, ui));
            };

            scope.startEvent = function(e, ui){
                scope.$apply(scope.startcallback(e, ui));
            };

            var sortableElement = jQuery(element).find(scope.rootsortableelement);

//            jQuery(document).loaded(function(){
//                if(scope.disableallelementsbydefault === true){
//                    jQuery('.ui-sortable').find('.panel-default').addClass('disabled');
//                }
//            });


            jQuery(sortableElement).sortable({
                start: scope.startEvent,
                update: scope.updateEvent,
                cancel:".disabled"
            });

        }
    }

}]);

var chartControllerScope = null;

angular.module('core')
    .controller('ChartController',['$scope', function($scope) {
        chartControllerScope = $scope;

        $scope.chart = null;
        $scope.columns = [];
        $scope.types = {};
        $scope.axis = {};
        $scope.axes = {};
        $scope.xValues= null;
        $scope.xTick = null;
        $scope.names = null;
        $scope.colors = null;
        $scope.grid = null;
        $scope.legend = null;
        $scope.tooltip = null;
        $scope.chartSize = null;
        $scope.colors = null;
        $scope.jsonKeys = null;



        this.showGraph = function() {
            var config = {};
            config.bindto = "#"+$scope.bindto;
            config.data = {}

            if ($scope.chartData && $scope.chartColumns) {
                $scope.$watchCollection('chartData', function() {
                    loadChartData();
                });
                $scope.jsonKeys = {};
                $scope.jsonKeys.value=[];
                angular.forEach($scope.chartColumns, function(column) {
                    $scope.jsonKeys.value.push(column.id);
                    addColumnProperties(column.id ,column.type, column.name, column.color);
                });
                if ($scope.chartX) {
                    $scope.jsonKeys.x=$scope.chartX.id;
                }
                config.data.keys=$scope.jsonKeys;
                config.data.json=$scope.chartData;
            }

            if ($scope.xValues) {
                config.data.x=$scope.xValues;
            }
            if ($scope.columns) {
                config.data.columns = $scope.columns;
            }
            config.data.types = $scope.types;
            config.data.axes = $scope.axes;
            if ($scope.names) {
                config.data.names = $scope.names;
            }
            if ($scope.colors) {
                config.data.colors = $scope.colors;
            }
            if ($scope.showLabels && $scope.showLabels === "true") {
                config.data.labels=true;
            }
            if ($scope.showSubchart && $scope.showSubchart === "true") {
                config.subchart = {"show":true};
            }
            if ($scope.enableZoom && $scope.enableZoom === "true") {
                config.zoom = {"enabled":true};
            }
            config.axis = $scope.axis;
            if ($scope.xTick) {
                config.axis.x.tick = $scope.xTick;
            }
            if ($scope.grid != null) {
                config.grid = $scope.grid;
            }
            if ($scope.legend != null) {
                config.legend = $scope.legend;
            }
            if ($scope.tooltip != null) {
                config.tooltip = $scope.tooltip;
            }
            if ($scope.chartSize != null) {
                config.size = $scope.chartSize;
            }
            if ($scope.colors != null) {
                config.color = {"pattern":$scope.colors};
            }
            $scope.chart = c3.generate(config);
        };

        this.addColumn = function(column,columnType,columnName,columnColor) {
            $scope.columns.push(column);
            addColumnProperties(column[0], columnType, columnName, columnColor);
        };

        this.addYAxis = function(yAxis) {
            $scope.axes = yAxis;
            if (!$scope.axis.y2) {
                $scope.axis.y2={"show":true};
            }
        };

        this.addXAxisValues = function(xValues) {
            $scope.xValues = xValues;
        };

        this.addAxisProperties = function(id,axis) {
            $scope.axis[id]=axis;
        };

        this.addXTick = function(tick) {
            $scope.xTick = tick;
        };

        this.rotateAxis = function() {
            $scope.axis.rotated = true;
        };

        this.addGrid = function(axis) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if ($scope.grid[axis] == null) {
                $scope.grid[axis] = {};
            }
            $scope.grid[axis].show = true;
        };

        this.addGridLine = function(axis,value,text) {
            if ($scope.grid == null) {
                $scope.grid = {};
            }
            if (axis === "x") {
                if ($scope.grid.x == undefined) {
                    $scope.grid.x = {};
                }
                if ($scope.grid.x.lines == undefined) {
                    $scope.grid.x.lines = [];
                }
            } else {
                if ($scope.grid.y == undefined) {
                    $scope.grid.y = {};
                }
                if ($scope.grid.y.lines == undefined) {
                    $scope.grid.y.lines = [];
                }

            }
            if (axis === "y2") {
                $scope.grid.y.lines.push({"value":value,"text":text,"axis":"y2"});
            } else {
                $scope.grid[axis].lines.push({"value":value,"text":text})
            }
        };

        this.addLegend = function(legend) {
            $scope.legend = legend;
        };

        this.addTooltip = function(tooltip) {
            $scope.tooltip = tooltip;
        };

        this.addSize = function(chartSize) {
            $scope.chartSize = chartSize;
        };

        this.addColors = function(colors) {
            $scope.colors = colors;
        };

        function addColumnProperties(id, columnType, columnName, columnColor) {
            if (columnType !== undefined) {
                $scope.types[id]=columnType;
            }
            if (columnName !== undefined) {
                if ($scope.names === null) {
                    $scope.names = {};
                }
                $scope.names[id]=columnName;
            }
            if (columnColor !== undefined) {
                if ($scope.colors === null) {
                    $scope.colors = {};
                }
                $scope.colors[id]=columnColor;
            }
        }

        function loadChartData() {
            var data = {};
            data.keys=$scope.jsonKeys;
            data.json=$scope.chartData;

            $scope.chart.load(data);
        }
    }])
    .directive('c3chart', function($timeout) {
        var chartLinker = function(scope,element,attrs,chartCtrl) {
            // Trick to wait for all rendering of the DOM to be finished.
            $timeout(function() {
                chartCtrl.showGraph()
            });
        };

        return {
            "restrict": "E",
            "controller":"ChartController",
            "scope": {
                "bindto":"@bindtoId",
                "showLabels":"@showLabels",
                "showSubchart":"@showSubchart",
                "enableZoom":"@enableZoom",
                "chartData":"=chartData",
                "chartColumns":"=chartColumns",
                "chartX":"=chartX"
            },
            "template":"<div><div id='{{bindto}}'></div><div ng-transclude></div></div>",
            "replace":true,
            "transclude":true,
            "link": chartLinker
        }
    })
    .directive('chartColumn', function() {
        var columnLinker = function(scope,element,attrs,chartCtrl) {
            var column = attrs['columnValues'].split(",");
            column.unshift(attrs['columnId']);
            chartCtrl.addColumn(column,attrs['columnType'],attrs['columnName'],attrs['columnColor']);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": columnLinker
        }
    })
    .directive('chartAxes', function() {
        var axesLinker = function(scope,element,attrs,chartCtrl) {
            var x = attrs['valuesX'];
            if (x) {
                chartCtrl.addXAxisValues(x);
            }

            var y = attrs['y'];
            var y2 = attrs['y2'];
            var yAxis = {};
            if (y2) {
                var items = y2.split(",");
                for (item in items) {
                    yAxis[items[item]] = "y2";
                }
                if (y) {
                    var items = y.split(",");
                    for (item in items) {
                        yAxis[items[item]] = "y";
                    }
                }
                chartCtrl.addYAxis(yAxis);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axesLinker
        }
    })
    .directive('chartAxis', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var rotate = attrs['axisRotate'];
            if (rotate) {
                chartCtrl.rotateAxis();
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }

    })
    .directive('chartAxisX', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};

            var type=attrs['axisType'];
            if (type) {
                axis.type=type;
            }
            // TODO has a strange effect on the graph, need to evaluate
            var height = attrs['axisHeight'];
            if (height) {
                axis.height=height;
            }
            chartCtrl.addAxisProperties('x',axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "transclude": true,
            "template": "<div ng-transclude></div>",
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartAxisY', function() {
        var axisLinker = function(scope,element,attrs,chartCtrl) {
            var id=attrs['axisId'];
            var position=attrs['axisPosition'];
            var label=attrs['axisLabel'];

            var axis={"label":{"text":label,"position":position}};
            if (id === 'y2') {
                axis.show=true;
            }
            var paddingTop = attrs['paddingTop'];
            var paddingBottom = attrs['paddingBottom'];
            if (paddingTop | paddingBottom) {
                paddingTop = (paddingTop) ? paddingTop : 0;
                paddingBottom = (paddingBottom)? paddingBottom : 0;
                axis.padding = {"top":parseInt(paddingTop),"bottom":parseInt(paddingBottom)};
            }
            var rangeMax = attrs['rangeMax'];
            var rangeMin = attrs['rangeMin'];
            if (rangeMax) {
                axis.max = parseInt(rangeMax);
            }
            if (rangeMin) {
                axis.min = parseInt(rangeMin);
            }

            chartCtrl.addAxisProperties(id,axis);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": axisLinker
        }
    })
    .directive('chartGrid', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var showX = attrs["showX"];
            if (showX && showX === "true") {
                chartCtrl.addGrid("x");
            }
            var showY = attrs["showY"];
            if (showY && showY === "true") {
                chartCtrl.addGrid("y");
            }
            var showY2 = attrs["showY2"];
            if (showY2 && showY2 === "true") {
                chartCtrl.addGrid("y2");
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker,
            "transclude": true,
            "template": "<div ng-transclude></div>"
        }
    })
    .directive('chartGridOptional', function() {
        var gridLinker = function(scope,element,attrs,chartCtrl) {
            var axisId = attrs["axisId"];
            var value = attrs["gridValue"];
            var text = attrs["gridText"];

            chartCtrl.addGridLine(axisId,value,text);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": gridLinker
        }
    })
    .directive('chartAxisXTick', function() {
        var tickLinker = function(scope,element,attrs,chartCtrl) {
            var tick = {};

            var count = attrs['tickCount'];
            if (count) {
                tick.count = count;
            }

            // TODO, dit lijkt nog niet echt iets te doen
            var format = attrs['tickFormat'];
            if (format) {
                tick.format = format;
            }

            var culling = attrs['tickCulling'];
            if (culling) {
                tick.culling = culling;
            }

            var rotate = attrs['tickRotate'];
            if (rotate) {
                tick.rotate = rotate;
            }

            var fit = attrs['tickFit'];
            if (fit) {
                tick.fit = fit;
            }

            chartCtrl.addXTick(tick);
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tickLinker
        }

    })
    .directive('chartLegend', function() {
        var legendLinker = function(scope,element,attrs,chartCtrl) {
            var legend = null;
            var show = attrs["showLegend"];
            if (show && show === "false") {
                legend = {"show":false};
            } else {
                var position = attrs["legendPosition"];
                if (position) {
                    legend = {"position":position};
                }
            }

            if (legend != null) {
                chartCtrl.addLegend(legend);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": legendLinker
        }

    })
    .directive('chartTooltip', function() {
        var tooltipLinker = function(scope,element,attrs,chartCtrl) {
            var tooltip = null;
            var show = attrs["showTooltip"];
            if (show && show === "false") {
                tooltip = {"show":false};
            } else {
                var grouped = attrs["groupTooltip"];
                if (grouped && grouped === "false") {
                    tooltip = {"grouped":false};
                }
            }

            if (tooltip != null) {
                chartCtrl.addTooltip(tooltip);
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": tooltipLinker
        }

    })
    .directive('chartSize', function() {
        var sizeLinker = function(scope,element,attrs,chartCtrl) {
            var chartSize = null;
            var width = attrs["chartwidth"];
            var height = attrs["chartheight"]
            if (width || height) {
                chartSize = {};
                if (width) {
                    chartSize.width = parseInt(width);
                }
                if (height) {
                    chartSize.height = parseInt(height);
                }
                chartControllerScope.chartSize = chartSize;
            }
        };

        return {
            //"require":"^c3chart",
            //"restrict":"E",
            //"scope": {},
            "replace":true,
            "link": sizeLinker
        }

    })
    .directive('chartColors', function() {
        var colorsLinker = function(scope,element,attrs,chartCtrl) {
            var pattern = attrs["colorPattern"];
            if (pattern) {
                chartCtrl.addColors(pattern.split(","));
            }
        };

        return {
            "require":"^c3chart",
            "restrict":"E",
            "scope": {},
            "replace":true,
            "link": colorsLinker
        }

    });

// Configuring the Plans module
angular.module('plans').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        //Menus.addMenuItem('topbar', 'Plans', 'plans', 'dropdown', '/plans(/create)?');
        //Menus.addMenuItem('topbar', 'Plans', 'plans', '/plans');
        //Menus.addSubMenuItem('topbar', 'plans', 'List Plans', 'plans');
        //Menus.addSubMenuItem('topbar', 'plans', 'New Plan', 'plans/create');
    }
]);


/**
 * Created by jason on 11/23/14.
 */
angular.module(ApplicationConfiguration.applicationModuleName).factory(
    "UserDataFactory",
    function() {
        var _nutritionProfile;
        var service = {};

        service.getNutritionProfile = function(){
            return _nutritionProfile;
        };

        service.setNutritionProfile = function(nutritionProfileIn){
            _nutritionProfile = nutritionProfileIn;
        };

        return service;


    }
);
/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module(ApplicationConfiguration.applicationModuleName).service(
    "CoreUtilities",
    function( $http, $q ) {

        // Return public API.
        return({
            calculateDeficit: calculateDeficit,
            doMealTotaling: doMealTotaling,
            calculatePlanTotalMacros: calculatePlanTotalMacros,
            getFoods: getFoods,
            getUserFoods: getUserFoods,
            importFoodsFromExcel: importFoodsFromExcel,
            filterMyFoods: filterMyFoods,
            calculateBmr: calculateBmr,
            calculateCaloriesOut: calculateCaloriesOut,
            getMobilePlanDateFormat: getMobilePlanDateFormat,
            getDesktopPlanDateFormat: getDesktopPlanDateFormat
        });




        // ---
        // PUBLIC METHODS.
        // ---

        function getMobilePlanDateFormat($scope){
            if($scope.plan && $scope.plan.planDateNonUtc) {
                var monthNames = getMonthNames();
                var dayNames = getDayNames();

                var month = monthNames[$scope.plan.planDateNonUtc.getMonth()];
                var day = $scope.plan.planDateNonUtc.getDate();
                var dayOfWeek = dayNames[$scope.plan.planDateNonUtc.getDay()];
                return dayOfWeek + ', ' + month + ' ' + day;
            }

        };

        function getDesktopPlanDateFormat($scope){
            if($scope.plan && $scope.plan.planDateNonUtc) {
                var monthNames = getMonthNames();
                var dayNames = getDayNames();

                var month = monthNames[$scope.plan.planDateNonUtc.getMonth()];
                var day = $scope.plan.planDateNonUtc.getDate();
                var dayOfWeek = dayNames[$scope.plan.planDateNonUtc.getDay()];
                var year = $scope.plan.planDateNonUtc.getFullYear();
                return dayOfWeek + ', ' + month + ' ' + day + ', ' + year;
            }
        };

        function getFoods(typed, skip, searchByFirstLetterOnly) {
            var request = $http({
                method: "get",
                url: "/foods/" + typed + '/' + searchByFirstLetterOnly + '/' + skip,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleSuccess, handleError ) );
        }

        function filterMyFoods(findFoodsByFirstLetter, userFoods, foodSearchTxt, skipFoods, takeFoods){
            var foods = [];

            if(!userFoods || userFoods.length == 0){
                userFoods = [];
            }

            var nFoodAdded = 0;
            if(foodSearchTxt && foodSearchTxt.length > 0) {
                foodSearchTxt = foodSearchTxt.toLowerCase();
            }

            for(var f = skipFoods; f < userFoods.length; f++){
                if(nFoodAdded >= takeFoods){
                    break;
                }

                var addFood = true;
                var userFood = userFoods[f];

                if(findFoodsByFirstLetter){
                    if(userFood.name.toLowerCase().substring(0, 1) !== foodSearchTxt){
                        addFood = false;
                    }
                }
                else if(foodSearchTxt && foodSearchTxt.length > 0){
                    if(userFood.name.toLowerCase().indexOf(foodSearchTxt) === -1){
                        addFood = false;
                    }
                }


                if(addFood) {
                    foods.push(userFood);

                    nFoodAdded++;
                }
            }

            return foods;
        };

        function getUserFoods(userId, typed, skip, searchByFirstLetterOnly) {
            var request = $http({
                method: "get",
                url: "/foods/" + 'userFoods/' + userId + '/' + typed + '/' + searchByFirstLetterOnly + '/' + skip,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleSuccess, handleError ) );
        }

        function importFoodsFromExcel() {
            var request = $http({
                method: "post",
                url: "/foods/" + 'excel' + '/' + 'all',
                params: {
                    action: "post"
                }


            });

            return( request.then( handleSuccess, handleError ) );
        }

        function calculateDeficitForAdvancedTargets(nutritionPlan, activityPlan, bmr){
            var additionalCaloriesExpended = 300;
            var caloriesOut = additionalCaloriesExpended + bmr;

            if (activityPlan && typeof activityPlan == 'object') {
                caloriesOut = activityPlan.totalCaloriesBurned + bmr + additionalCaloriesExpended;

            }

            var caloriesIn = nutritionPlan ? nutritionPlan.totalPlanCalories : 0;

            var deficit = -(caloriesIn - caloriesOut) || 0;

            return deficit;
        };

        function calculateCaloriesOut(nutritionProfile, bmr){
            var caloriesOut;

            switch(nutritionProfile.activityLevel){
                //Sedentary
                case 0:
                    caloriesOut = bmr * 1.2;
                    break;
                //Lightly Active
                case 1:
                    caloriesOut = bmr * 1.375;
                    break;
                //Moderately Active
                case 2:
                    caloriesOut = bmr * 1.55;
                    break;
                //Very Active
                case 3:
                    caloriesOut = bmr * 1.725;
                    break;
                //Extremely Active
                case 4:
                    caloriesOut = bmr * 1.9;
                    break;
            }

            return caloriesOut;
        }

        function calculateDeficitForBasicTargets(nutritionPlan, nutritionProfile, bmr){
            var caloriesOut = calculateCaloriesOut(nutritionProfile, bmr);

            var caloriesIn = nutritionPlan ? nutritionPlan.totalPlanCalories : 0;

            var deficit = -(caloriesIn - caloriesOut) || 0;

            return deficit;
        };

        function calculateDeficit(nutritionPlan, activityPlan, nutritionProfile){
            var bmr = calculateBmr(nutritionProfile);

            if(nutritionProfile.isAdvancedNutrientTargets) {
                return calculateDeficitForAdvancedTargets(nutritionPlan, activityPlan, bmr);
            }
            else{
                return calculateDeficitForBasicTargets(nutritionPlan, nutritionProfile, bmr);
            }
        };


        // ---
        // PRIVATE METHODS.
        // ---



        function getMonthNames(){
            var monthNames = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];

            return monthNames;
        };

        function getDayNames(){
            var dayNames = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

            return dayNames;
        };


        //BMR for Men = 66 + (13.8 x weight in kg.) + (5 x height in cm) - (6.8 x age in years)
        //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
        function calculateBmr(nutritionProfile){
            var age = nutritionProfile.age;
            var weightInLbs = nutritionProfile.weight; //TODO get most recent weight instead of static one
            var heightFeet = nutritionProfile.heightFeet;
            var heightInches = nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = nutritionProfile.sex;

            //convert weight from lbs to kg:
            // kg = (weight in lbs) * .454
            var weightInKg = weightInLbs * .454;

            //convert height from inches to cms
            //height in cms = (height in inches * 2.54)
            var heightInCms = totalHeight * 2.54;

            var bmr = 0;

            //BMR for Men = 66.47 + (13.75 x weight in kg.) + (5 x height in cm) - (6.75 x age in years)
            if(gender == "Male"){
                bmr = 66.47 + (13.75 * weightInKg) + (5 * heightInCms) - (6.75 * age);
            }
            //BMR for Women = 655 + (9.6 x weight in kg.) + (1.8 x height in cm) - (4.7 x age in years).
            else{
                bmr = 655.09 + (9.56 * weightInKg) + (1.84 * heightInCms) - (4.67 * age);
            }

            return bmr;
        };

        function doMealTotaling(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        function calculatePlanTotalMacros(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates || 0;
                fatTotal += plan.meals[i].totalFat || 0;
                proteinTotal += plan.meals[i].totalProtein || 0;
                caloriesTotal += plan.meals[i].totalCalories || 0;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = carbsTotal > 0 ? (carbsTotal / macroTotals) * 100 : 0;
            plan.totalPlanFatAsPercent = fatTotal > 0 ? (fatTotal / macroTotals) * 100 : 0;
            plan.totalPlanProteinAsPercent = proteinTotal > 0 ? (proteinTotal / macroTotals) * 100 : 0;


        };

        function handleSuccess( response ) {

            //dailyDashboardData.activityPlan = response.data;

            // return dailyDashboardData;

            return response.data;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);

//(function() {
// $(function() {
var $demo, duration, remaining, tour;
$demo = $("#demo");
duration = 5000;
remaining = duration;
tour = new Tour({
    onStart: function() {

        return $demo.addClass("disabled", true);
    },
    onEnd: function() {
        localStorage.removeItem("tour_current_step");
        localStorage.removeItem("tour_end");

        return $demo.removeClass("disabled", true);

        //return window.location = '/#!/';
    },
    debug: true,
    steps: [


        {
            path: "/#!/",
            // element: "#demo",
            placement: "bottom",
            title: "Welcome to Fit2Create!",
            content: "Welcome to Fit2Create, where you can create your own nutrition and fitness destiny! <br/><br/> This is the home landing page where you can look at overall nutrition, activity, and weight data for the day and week.",
            backdrop: true,
            orphan: true
        },
        {
            path: "/#!/",
            element: ".weeklyDashboard",
            placement: "bottom",
            title: "Weekly Dashboard",
            content: "This is where you can see nutrition and activity data for a selected week.",
            //+ "<br/><br/>Right now this is empty because there are currently no plans entered. However, you'll see some fancy charts here once you have at least one plan created.",
            backdrop: true
        },
        {
            path: "/#!/",
            element: ".dailyDashboard",
            placement: "bottom",
            title: "Daily Dashboard",
            content: "This is where you can see nutrition and activity data for a select day.",
            //+ "<br/><br/>Right now this is empty because there is currently no plan entered for today. After you create a plan for today you'll see some super helpful charts displayed for today!",
            backdrop: true
        },
        {
            path: "/#!/",
            element: "#planDateForDay",
            placement: "bottom",
            title: "Plan for Date",
            content: "You can select the date to see nutrition and activity for that day's plan."
            //backdrop: true
        },
        {
            path: "/#!/",
            element: "#createActivityForDay",
            placement: "bottom",
            title: "Create Day Activity",
            content: "You can click this link to create an activity for the selected day."
            // backdrop: true
        },
        {
            path: "/#!/",
            element: "#createNutritionPlanForDay",
            placement: "bottom",
            title: "Create Day Nutrition",
            content: "You can click this link to create a nutrition plan for the selected day.<br/><br/> We will click this link and go to the create nutrition plan page now."
            //backdrop: true
        },
        {
            path: "/#!/plans/create",
            //element: "#planDateContainer",
            placement: "bottom",
            title: "Nutrition Plan Page",
            content: "Welcome to the nutrition plan page for today. <br/><br/>Here you can manage today's meals by adding foods to each meal, add plan notes, copy plan meals, and much more!<br/>",
            orphan: true,
            backdrop: true

        },
        {
            path: "/#!/plans/create",
            element: "#planDateContainer",
            placement: "bottom",
            title: "Select Plan Date",
            content: "You can select a custom date for this plan here. Note: This date will default to today's date for a new plan."
            //backdrop: true

        },
        {
            path: "/#!/plans/create",
            element: "#createMeal",
            placement: "bottom",
            title: "Add Meal",
            content: "You can click this button to add a new meal to this plan. <br/><br/>However, there is a way to customize a meals template that you can have as a default for each new plan. For example, if you want 'Breakfast, Lunch, Snack, Dinner' as a default for each new plan then you can set that up in your Nutrition Settings page. We'll get to that in a minute.",
            //backdrop: true,
            reflex: true
        },
        {
            path: "/#!/plans/create",
            element: "#copyPlanBtn",
            placement: "bottom",
            title: "Copy Plan!",
            content: "You can click this button to copy one or more meals from this plan to another plan!",
            //backdrop: true,
            reflex: true
        },
        {
            path: "/#!/plans/create",
            element: ".createMealFood:first",
            placement: "bottom",
            title: "Add Food",
            content: "Each meal has an 'Add Food' button to add a food to that specific meal.",
            //backdrop: true,
            reflex: true,
            redirect: true
            //reflex: true
        },
        {
            path: "/#!/plans/create",
            element: ".suggestFoods:first",
            placement: "bottom",
            title: "Suggest Foods",
            content: "Each meal has a suggest button to suggest the top 5 foods that will get you closest to your Nutrient Goals!",
            //backdrop: true,
            reflex: true
            //duration: 5000
        },
        {
            path: "/#!/plans/create",
            element: "#totalDeficit",
            placement: "top",
            title: "Total Plan Deficit and Calories",
            content: "You can see the total plan deficit and calories right here at any time while modifying a plan."
            //backdrop: true
        },
        {
            path: "/#!/plans/create",
            element: "#totalCarbs",
            placement: "top",
            title: "Total Macros",
            content: "You can see the total plan macros right here at any time while modifying a plan."
            //reflex: true
            //backdrop: true
            // reflex: true
        },
        {
            path: "/#!/plans/create",
            element: "#landingPageLink",
            placement: "right",
            title: "Landing Page",
            content: "You can click this Fit2Create link at any time to return to your home landing page."

        },
        {
            path: "/#!/activities/create",
            //element: "#landingPageLink",
            placement: "bottom",
            title: "Activities Page",
            content: "Welcome to the Activities page where you can set daily steps, add exercises for today, add activities notes, and track today's injuries.<br/><br/>You can navigate to this page by clicking the 'Create Activity For Today' link on your home landing page",
            orphan: true,
            backdrop: true

        },
        {
            path: "/#!/activities/create",
            element: "#planDateContainer",
            placement: "bottom",
            title: "Set Activity Plan Date",
            content: "You can set a custom date for an activity's plan. <br/><br/>Note: This plan date defaults to today's date."
            // backdrop: true
        },
        {
            path: "/#!/activities/create",
            element: "#dailySteps",
            placement: "bottom",
            title: "Daily Steps",
            content: "You can track daily steps here"
            //backdrop: true

        },
        {
            path: "/#!/activities/create",
            element: "#addExercise",
            placement: "bottom",
            title: "Add Exercise(s)",
            content: "You can click this button to add one or more exercises for today."
            //backdrop: true

        },
        {
            path: "/#!/activities/create",
            element: "#addNotes",
            placement: "bottom",
            title: "Add Notes",
            content: "You can click this button to add notes for today."
            // backdrop: true

        },
        {
            path: "/#!/activities/create",
            element: "#addInjuries",
            placement: "bottom",
            title: "Add Injury",
            content: "You can click this button to track one or more injuries for today."
            // backdrop: true
        },
        {
            path: "/#!/",
            element: "#createNutritionPlanForDay",
            placement: "bottom",
            title: "Create your first Nutrition Plan!",
            content: "Create your first Nutrition Plan if you haven't done so already!",
            backdrop: true
        }




    ]
}).init();
if (tour.ended()) {
    //       $('<div class="alert alert-info alert-dismissable"><button class="close" data-dismiss="alert" aria-hidden="true">&times;</button>You ended the demo tour. <a href="#" data-demo>Restart the demo tour.</a></div>').prependTo(".content").alert();
}
$(document).on("click", "[data-demo]", function(e) {
    // $('#demo').hide();
    e.preventDefault();
    if ($(this).hasClass("disabled")) {
        return;
    }
    tour.restart();
    return $(".alert").alert("close");
});
//$("html").smoothScroll();
//return $(".gravatar").each(function() {
//  var $this, email;
//  $this = $(this);
//  email = md5($this.data("email"));
// return $(this).attr("src", "http://www.gravatar.com/avatar/" + email + "?s=60");
//});
//});

//}).call(this);

'use strict';

// Setting up route
angular.module('plans').config(['$stateProvider',
    function($stateProvider) {
        // Plans state routing
        $stateProvider.
            state('listPlans', {
                url: '/plans',
                templateUrl: 'modules/plans/views/list-plans.client.view.html'
            }).
            state('listPlans2', {
                url: '/plans/nav',
                templateUrl: 'modules/plans/views/desktop/view-nav-plan.client.view.html'
            }).
            state('createPlan', {
                url: '/plans/create',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('createPlan2', {
                url: '/plans/create/:planDateForCreate',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('createPlanForNewUser', {
                url: '/plans/create/:planDateForCreate/:isNewUser',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('viewPlan', {
                url: '/plans/:planId',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            }).
            state('viewPlanNavForDate', {
                url: '/plans/nav/:planNavDate',
                templateUrl: 'modules/plans/views/desktop/view-nav-plan.client.view.html'
            }).
            state('viewPlanNavForDate2', {
                url: '/plans/nav/:planNavDate/:isHistory',
                templateUrl: 'modules/plans/views/desktop/view-nav-plan.client.view.html'
            }).
            state('viewPlanForDate', {
                url: '/plans/:planDate/:planDateChangeDirection/:dayRange',
                templateUrl: 'modules/plans/views/view-plan.client.view.html'
            });

    }
]);

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('plans').service(
    "PlansService",
    function( $http, $q ) {

        var planDate;

        // Return public API.
        return({
            getActivityByDate: getActivityByDate,
            NotesModalInstanceCtrl: NotesModalInstanceCtrl,
            CreateFoodModalInstanceCtrl: CreateFoodModalInstanceCtrl,
            ModalInstanceCtrl: ModalInstanceCtrl,
            fillFoodNutrients: fillFoodNutrients
        });


        // ---
        // PUBLIC METHODS.
        // ---

//        function StartTourDialogCtrl($scope, $modalInstance, parentScope) {
//            $scope.ok = function () {
//                $modalInstance.close();
//            };
//
//            $scope.cancel = function () {
//                $modalInstance.dismiss('cancel');
//            };
//        };


        function ModalInstanceCtrl($scope, $modalInstance, parentScope, dialogMealsDetailed, dialogMealsShort) {
            $scope.selectedMealTypes = dialogMealsDetailed[0];
            $scope.dialogMealsDetailed = dialogMealsDetailed;
            $scope.dialogMealsShort = dialogMealsShort;
            $scope.copyPlanDate = new Date();
            $scope.parentScope = parentScope;

            var selectedMealsDefault = [];
            for(var i = 0; i < $scope.dialogMealsShort.length; i++) {
                selectedMealsDefault.push($scope.dialogMealsShort[i].id);
            }
            $scope.selectedMealsDefault = selectedMealsDefault;

            $scope.dialogOpenCopyPlanDate = function($event, datepicker) {

                //if (!$scope[datepicker]) {
                $event.preventDefault();
                $event.stopPropagation();
                // }

                $scope.parentScope.opened = false;
                $scope[datepicker] = false;

                $scope[datepicker] = true;
            };

            $scope.copyPlanDateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            $scope.initDate = new Date('2016-15-20');


            $scope.copyPlanDateChange = function(){
                alert("changed!");
            };

            $scope.selected = {
                meals: $scope.selectedMealsDefault,
                planDate: $scope.copyPlanDate
            };

            $scope.selectAllMeals = function(){
                for (var i = 0; i < dialogMealsShort.length; i++){
                    var isFound = false;

                    for(var j = 0; j < $scope.selected.meals.length; j++){
                        if ($scope.selected.meals[j] === dialogMealsShort[i].id){
                            isFound = true;
                            break;
                        }
                    }

                    if(!isFound) {
                        $scope.selected.meals.push(dialogMealsShort[i].id);
                    }
                }

                // $scope.selected.meals = dialogMealsShort;
            };

            $scope.ok = function () {
                var selectedMeals = $scope.selected.meals;

                if (typeof selectedMeals[0] === "string"){
                    var selectedMealsDetailed = [];

                    for (var i = 0; i < selectedMeals.length; i++){
                        for (var j = 0; j < dialogMealsDetailed.length; j++) {
                            if (selectedMeals[i] === dialogMealsDetailed[j]._id) {
                                selectedMealsDetailed.push(dialogMealsDetailed[j]);
                            }
                        }
                    }

                    $scope.selected.meals = selectedMealsDetailed;
                }

                $modalInstance.close($scope.selected);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };

        function fillFoodNutrients(foodToFill, foodToAdd, oneServingGrams, servingType, servingsDelta){
            foodToFill.water = foodToAdd.water * servingsDelta;
            foodToFill.calories = foodToAdd.calories * servingsDelta;
            foodToFill.protein = foodToAdd.protein * servingsDelta;
            foodToFill.fat = foodToAdd.fat * servingsDelta;
            foodToFill.carbohydrates = foodToAdd.carbohydrates * servingsDelta;
            foodToFill.fiber = foodToAdd.fiber * servingsDelta;
            foodToFill.sugar = foodToAdd.sugar * servingsDelta;
            foodToFill.calcium = foodToAdd.calcium * servingsDelta;
            foodToFill.iron = foodToAdd.iron * servingsDelta;
            foodToFill.sodium = foodToAdd.sodium * servingsDelta;
            foodToFill.vitaminC = foodToAdd.vitaminC * servingsDelta;
            foodToFill.vitaminA = foodToAdd.vitaminA * servingsDelta;
            foodToFill.saturatedFat = foodToAdd.saturatedFat * servingsDelta;
            foodToFill.monoFat = foodToAdd.monoFat * servingsDelta;
            foodToFill.polyFat = foodToAdd.polyFat * servingsDelta;
            foodToFill.cholesterol = foodToAdd.cholesterol * servingsDelta;
            foodToFill.grams = oneServingGrams;
            foodToFill.servingType = servingType;

            return foodToFill;
        };

        function CreateFoodModalInstanceCtrl($scope, $modalInstance, parentScope, meal, meals, food, CoreUtilities, mealTypes, userFoods, nutritionPlan, getMealTypeName) {
            $scope.foodToAdd = food;
            $scope.parentScope = parentScope;
            $scope.plan = nutritionPlan;
            $scope.mealSelected = meal;
            $scope.isUpdate = food !== 'undefined' && food !== null && food !== 'null' && food !== undefined;
            $scope.servings = 1;
            window.scopeCreateFoodDialog = $scope;
            $scope.foodDialogDisplaySection = $scope.isUpdate ? 'foodDetails' : 'selectMeal';
            $scope.searchFoodCategory = 'myFoods';
            $scope.foods = [];
            $scope.foodSearchTxt = null;
            $scope.CoreUtilities = CoreUtilities;
            $scope.skipFoods = 0;
            $scope.findFoodsByFirstLetter = false;
            $scope.mealTypes = mealTypes;
            $scope.mealTypeSelected;
            $scope.customMealInput = null;
            $scope.customMeal = null;
            $scope.userFoods = userFoods;
            $scope.meals = meals;
            $scope.servingType = food ? food.servingType : 0;
            $scope.isLoading = false;
            $scope.getMealTypeName = getMealTypeName;
            $scope.searchByLetter = false;
            var limit = 80;

            $scope.deleteMealFood = function(){
                var food = $scope.selected.foodToAdd;

                for(var f = 0; f < $scope.mealSelected.foods.length; f++){
                    if($scope.mealSelected.foods[f]._id == food._id){
                        $scope.mealSelected.foods.splice(f, 1);

                        $scope.selected.isFoodDelete = true;

                        $scope.ok();
                    }
                }
            };

            $scope.updateFoodList = function(concatFoods){
                if(!concatFoods) {
                    $scope.foods = [];
                }

                $scope.isMoreLoading = true;
                if($scope.findFoodsByFirstLetter){
                    $scope.findFoodsByLetter();
                }
                else {
                    var foodSearchTxt = $scope.selected.foodSearchTxt;
                    if (!foodSearchTxt) {
                        foodSearchTxt = 'null';
                    }

                    CoreUtilities.getFoods(foodSearchTxt, $scope.skipFoods).then(function (data) {

                        if (concatFoods) {
                            for (var f = 0; f < data.length; f++) {
                                $scope.foods.push(data[f]);
                            }
                            //$scope.isMoreLoading = false;
                        }
                        else {
                            $scope.foods = data;
                        }

                        $scope.isMoreLoading = false;

                        if(data.length == 0){
                            $scope.hideMoreFoodsLink = true;
                        }

                        $scope.allFoodsInInitialState = false;

                    });
                }
            };

            $scope.moreFoods = function(){
                $scope.isMoreLoading = true;
                $scope.skipFoods += limit;

                $scope.updateFoodList(true);
            };

            $scope.toggleSearchByLetter = function(){
                $scope.searchByLetter = !$scope.searchByLetter;
            };

            $scope.mealTypesSelectChange = function(){
                $scope.selected.customMealInput = null;
            };

            $scope.customMealInputChange = function(){
                $scope.selected.mealTypeSelected = 0;
            };

            $scope.addMealContinue = function(){
                $scope.foodDialogDisplaySection = 'categories';
                $scope.selected.mealSelected = null;
            };

            $scope.newMealClick = function(){
                $scope.foodDialogDisplaySection = 'addMeal';
            };

            $scope.selectMealNavClick = function(){
                $scope.foodDialogDisplaySection = 'selectMeal';
            };

            $scope.categoriesNavClick = function(){
                $scope.foodDialogDisplaySection = 'categories';
            };

            $scope.mealSelectClick = function(meal){
                $scope.foodDialogDisplaySection = 'categories';
                $scope.selected.mealSelected = meal;
            };

            $scope.myFoodsCategorySelected = function(){
                $scope.searchFoodsCategorySelected = 'myFoods';
                $scope.foodDialogDisplaySection = 'searchFoods';

                $scope.foods = [];

                initializeUserFoods($scope.userFoods);

                $scope.hideMoreFoodsLink = true;
            };

            $scope.allFoodsCategorySelected = function() {
                $scope.searchFoodsCategorySelected = 'allFoods';
                $scope.foodDialogDisplaySection = 'searchFoods';

                $scope.foods = [];

                $scope.allFoodsInInitialState = true;

                $scope.hideMoreFoodsLink = false;
            };


            $scope.suggestedFoodsCategorySelected = function(){
                $scope.searchFoodsCategorySelected = 'suggestFoods';
                $scope.foodDialogDisplaySection = 'searchFoods';

                initializeUserFoods($scope.userFoods);

                $scope.getFoodsList('suggestFoods');
            };

            $scope.searchFoodsNavClick = function(){
                $scope.foodDialogDisplaySection = 'searchFoods';
            };

            $scope.servingTypeChange = function(){
                $scope.selected.servings = 1;

                var food = $scope.selected.foodToAdd;
                var oneServingGrams, servingsDelta;

                if($scope.selected.servingType == 0){
                    oneServingGrams = $scope.foodServingTypes[0].grams;
                    servingsDelta = oneServingGrams / $scope.foodServingTypes[1].grams;

                    $scope.gramsDisplay = oneServingGrams * $scope.selected.servings;
                }
                else{
                    oneServingGrams = $scope.foodServingTypes[1].grams;
                    servingsDelta = (oneServingGrams / $scope.foodServingTypes[0].grams);

                    $scope.gramsDisplay = oneServingGrams * $scope.selected.servings;
                }

                if($scope.selected.foodToAdd.selectedFood) {
                    food = fillFoodNutrients(food, $scope.selected.foodToAdd.selectedFood, oneServingGrams, $scope.selected.servingType, servingsDelta);

                    food = fillFoodNutrients(food.selectedFood, food, oneServingGrams, $scope.selected.servingType, 1);
                }
                else{
                    food = fillFoodNutrients(food, $scope.selected.foodToAdd, oneServingGrams, $scope.selected.servingType, servingsDelta);
                }

                $scope.selected.caloriesDisplay = food.calories,
                    $scope.selected.proteinDisplay = food.protein,
                    $scope.selected.fatDisplay = food.fat,
                    $scope.selected.carbsDisplay = food.carbohydrates,
                    $scope.selected.gramsDisplay = food.grams,
                    $scope.selected.sodiumDisplay = food.sodium,
                    $scope.selected.fiberDisplay = food.fiber,
                    $scope.selected.cholesterolDisplay = food.cholesterol,
                    $scope.selected.sugarDisplay = food.sugar,
                    $scope.selected.saturatedFatDisplay = food.saturatedFat
            };

            var initializeUserFoods = function(userFoods){
                userFoods.sort(function compare(a,b) {
                    var foodNameA = a.name.toLowerCase();
                    var foodNameB = b.name.toLowerCase();

                    if (foodNameA < foodNameB)
                        return -1;
                    if (foodNameA > foodNameB)
                        return 1;
                    return 0;
                });

                for(var f = 0 ; f < userFoods.length; f++){
                    $scope.foods.push(userFoods[f]);
                }
            };

            initializeUserFoods(userFoods);

            if($scope.foodToAdd) {
                $scope.caloriesDisplay = $scope.foodToAdd.selectedFood ? $scope.foodToAdd.selectedFood.calories : $scope.foodToAdd.calories;
            }

            $scope.clearFoodInput = function(){
                $scope.selected.foodSearchTxt = '';
                $scope.foodInputChange();
            };

            $scope.selected = {
                showFoodDetails: $scope.showFoodDetails,
                foodToAdd: $scope.foodToAdd,
                oldFood: food,
                isUpdate: $scope.isUpdate,
                servings: $scope.servings,
                foodSearchTxt: $scope.foodSearchTxt,
                mealTypes: $scope.mealTypes,
                mealTypeSelected: $scope.mealTypeSelected,
                customMeal: $scope.customMeal,
                customMealInput: $scope.customMealInput,

                caloriesDisplay: $scope.caloriesDisplay,
                proteinDisplay: $scope.proteinDisplay,
                fatDisplay: $scope.fatDisplay,
                carbsDisplay: $scope.carbsDisplay,
                gramsDisplay: $scope.gramsDisplay,
                sodiumDisplay: $scope.sodiumDisplay,
                fiberDisplay: $scope.fiberDisplay,
                cholesterolDisplay: $scope.cholesterolDisplay,
                sugarDisplay: $scope.sugarDisplay,
                saturatedFatDisplay: $scope.saturatedFat,

                servingType: $scope.servingType,

                mealSelected: $scope.mealSelected


            };

            var setUpGramsDisplay = function(){
                var oneServingGrams;

                if($scope.selected.foodToAdd.selectedFood){
                    oneServingGrams = $scope.selected.foodToAdd.selectedFood.grams;
                }
                else{
                    oneServingGrams = $scope.selected.foodToAdd.grams;
                }

                $scope.gramsDisplay = oneServingGrams * $scope.selected.servings;
            };



            $scope.changeFood = function(){
                $scope.showFoodDetails = false;
                $scope.findFoodsByFirstLetter = false;
            };

            $scope.calculateCaloriesDisplay = function(){
                var caloriesDisplay = 0, proteinDisplay = 0, fatDisplay = 0, sodiumDisplay = 0, gramsDisplay = 0,
                    carbsDisplay = 0, saturatedFatDisplay = 0, cholesterolDisplay = 0, fiberDisplay = 0, sugarDisplay = 0;

                if($scope.selected.foodToAdd && $scope.selected.servings > 0) {

                    caloriesDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.calories : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.calories;
                    proteinDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.protein : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.protein;
                    fatDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.fat : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.fat;
                    sodiumDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sodium : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sodium;
                    gramsDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.grams : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.grams;
                    carbsDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.carbohydrates : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.carbohydrates;
                    saturatedFatDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.saturatedFat : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.saturatedFat;
                    cholesterolDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.cholesterol : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.cholesterol;
                    sodiumDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sodium : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sodium;
                    fiberDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.fiber : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.fiber;
                    sugarDisplay = $scope.selected.foodToAdd.selectedFood ? parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.selectedFood.sugar : parseFloat($scope.selected.servings) * $scope.selected.foodToAdd.sugar;
                }

                $scope.selected.caloriesDisplay = caloriesDisplay % 1 != 0 ? caloriesDisplay.toFixed(1) : caloriesDisplay;
                $scope.selected.proteinDisplay = proteinDisplay % 1 != 0 ? proteinDisplay.toFixed(1) : proteinDisplay;
                $scope.selected.fatDisplay = fatDisplay % 1 != 0 ? fatDisplay.toFixed(1) : fatDisplay;
                $scope.selected.sodiumDisplay = sodiumDisplay % 1 != 0 ? sodiumDisplay.toFixed(1) : sodiumDisplay;
                $scope.selected.gramsDisplay = gramsDisplay % 1 != 0 ? gramsDisplay.toFixed(1) : gramsDisplay;
                $scope.selected.carbsDisplay = carbsDisplay % 1 != 0 ? carbsDisplay.toFixed(1) : carbsDisplay;
                $scope.selected.saturatedFatDisplay = saturatedFatDisplay % 1 != 0 ? saturatedFatDisplay.toFixed(1) : saturatedFatDisplay;
                $scope.selected.cholesterolDisplay = cholesterolDisplay % 1 != 0 ? cholesterolDisplay.toFixed(1) : cholesterolDisplay;
                $scope.selected.sodiumDisplay = sodiumDisplay % 1 != 0 ? sodiumDisplay.toFixed(1) : sodiumDisplay;
                $scope.selected.fiberDisplay = fiberDisplay % 1 != 0 ? fiberDisplay.toFixed(1) : fiberDisplay;
                $scope.selected.sugarDisplay = sugarDisplay % 1 != 0 ? sugarDisplay.toFixed(1) : sugarDisplay;


            };

            var initializeServingTypes = function(food){
                if(food) {
                    var foodServingsGrams1 = food.servingGrams1;
                    var foodServingsGrams2 = food.servingGrams2;

                    $scope.foodServingTypes = [];

                    if (!foodServingsGrams1) {
                        foodServingsGrams1 = food.grams;
                        food.servingDescription1 = '1 Serving';
                    }

                    $scope.foodServingTypes.push({
                        id: 0,
                        grams: foodServingsGrams1,
                        description: food.servingDescription1
                    });

                    if (foodServingsGrams2) {
                        $scope.foodServingTypes.push({
                            id: 1,
                            grams: foodServingsGrams2,
                            description: food.servingDescription2
                        });
                    }

                    setUpGramsDisplay();
                }

            };

            $scope.foodSelectionChange = function(food){

                if(food) {
                    $scope.selected.foodToAdd = food;
                    $scope.foodDialogDisplaySection = 'foodDetails';

                    $scope.skipFoods = 0;
                    $scope.findFoodsByFirstLetter = false;

                    $scope.calculateCaloriesDisplay();

                    showMacrosChart();

                    //reset food to 1 size of servingType1
                    var oneServingGrams, servingsDelta;

                    initializeServingTypes(food);

                    if (food.servingType == 1) {
                        oneServingGrams = $scope.foodServingTypes[0].grams;
                        servingsDelta = (oneServingGrams / $scope.foodServingTypes[1].grams);

                        food = fillFoodNutrients(food, food, oneServingGrams, 0, servingsDelta);
                        $scope.selected.foodToAdd = food;

                        $scope.calculateCaloriesDisplay();
                    }

                    food.servingType = 0;
                    $scope.selected.servingType = 0;


                }
            };

            if(food){
                initializeServingTypes(food);
            }

            $scope.foodInputChange = function(){

                $scope.skipFoods = 0;
                $scope.findFoodsByFirstLetter = false;

                if($scope.searchFoodsCategorySelected == 'myFoods'){
                    $scope.foods = CoreUtilities.filterMyFoods($scope.findFoodsByFirstLetter, $scope.userFoods, $scope.selected.foodSearchTxt, 0, 1000);
                }
                else{
                    $scope.updateFoodList();
                }

                $scope.hideMoreFoodsLink = false;
            };





            $scope.getFoodsList = function(radioBtnValue){
                $scope.skipFoods = 0;
                $scope.findFoodsByFirstLetter = false;
                // $scope.foodsRadioBtn = radioBtnValue;

                //TODO: put myFoods find in core utility
                if(radioBtnValue == 'myFoods'){
                    $scope.foods = CoreUtilities.filterMyFoods($scope.findFoodsByFirstLetter, $scope.userFoods, $scope.selected.foodSearchTxt, $scope.skipFoods);
                }
                else if(radioBtnValue == 'allFoods'){
                    $scope.updateFoodList();
                }
                else{
                    $scope.foods = getSuggestedFoods();
                }
            };

            var getSuggestedFoods = function(){
                var proteinTarget = window.user.nutritionProfile.proteinPercentageTarget;
                var carbsTarget = window.user.nutritionProfile.carbohydratesPercentageTarget;
                var fatTarget = window.user.nutritionProfile.fatPercentageTarget;
                var planTotalCalories = $scope.plan.totalPlanCalories;

                var currentDeficit = $scope.currentDeficit;
                var deficitTarget = window.user.nutritionProfile.deficitTarget;
                var currentCaloriesIn = $scope.plan.totalPlanCalories;

                var caloriesTarget = (currentDeficit - deficitTarget) + currentCaloriesIn;

                var suggestedFoodsAry = [];

                for (var i = 0; i < $scope.foods.length; i++) {
                    var foodToCheck = $scope.foods[i];
                    var score = 0;

                    if(foodToCheck.type !== '12' &&
                        foodToCheck.type !== '6') {
                        var macrosTotal = ($scope.plan.totalPlanFat + foodToCheck.fat) +
                            ($scope.plan.totalPlanProtein + foodToCheck.protein) +
                            ($scope.plan.totalPlanCarbs + foodToCheck.carbohydrates);

                        var newProteinTarget = (($scope.plan.totalPlanProtein + foodToCheck.protein) / macrosTotal) * 100;
                        var newCarbsTarget = (($scope.plan.totalPlanCarbs + foodToCheck.carbohydrates) / macrosTotal) * 100;
                        var newFatTarget = (($scope.plan.totalPlanFat + foodToCheck.fat) / macrosTotal) * 100;
                        var newCaloriesTarget = planTotalCalories + foodToCheck.calories;

                        var caloriesTargetDiff = (caloriesTarget - newCaloriesTarget) / caloriesTarget;
                        var proteinTargetDiff = (proteinTarget - newProteinTarget) / proteinTarget;
                        var carbsTargetDiff = (carbsTarget - newCarbsTarget) / carbsTarget;
                        var fatTargetDiff = (fatTarget - newFatTarget) / fatTarget;

                        if (caloriesTargetDiff < 0) {
                            caloriesTargetDiff = -caloriesTargetDiff;
                        }
                        if (proteinTargetDiff < 0) {
                            proteinTargetDiff = -proteinTargetDiff;
                        }
                        if (carbsTargetDiff < 0) {
                            carbsTargetDiff = -carbsTargetDiff;
                        }
                        if (fatTargetDiff < 0) {
                            fatTargetDiff = -fatTargetDiff;
                        }

                        score = (caloriesTargetDiff * 3) + proteinTargetDiff + carbsTargetDiff + fatTargetDiff;

                        foodToCheck.score = score;

                        suggestedFoodsAry.push(foodToCheck);
                    }
                }

                suggestedFoodsAry.sort(function compare(a,b) {
                    if (a.score < b.score)
                        return -1;
                    if (a.score > b.score)
                        return 1;
                    return 0;
                });

                var suggestedFoodsTop5 = [];

                var length = suggestedFoodsAry.length > 5 ? 5 : suggestedFoodsAry.length;
                for(i = 0; i < length; i++){
                    var suggestedFood = suggestedFoodsAry[i];

                    suggestedFoodsTop5.push(suggestedFood);
                }

                return suggestedFoodsTop5;


            };





            if(!userFoods || userFoods.length == 0){
                $scope.updateFoodList();
            }

            $scope.findFoodsByLetter = function(letter){
                $scope.findFoodsByFirstLetter = true;

                if(letter){
                    $scope.selected.foodSearchTxt = letter;
                    $scope.skipFoods = 0;
                }

                if($scope.searchFoodsCategorySelected == 'myFoods'){
                    $scope.foods = CoreUtilities.filterMyFoods($scope.findFoodsByFirstLetter, $scope.userFoods, $scope.selected.foodSearchTxt, $scope.skipFoods);
                }
                else{
                    $scope.isLoading = true;
                    CoreUtilities.getFoods($scope.selected.foodSearchTxt, $scope.skipFoods, true).then(function(data){
                        $scope.foods = data;
                        $scope.isLoading = false;
                    });
                }


            };

            $scope.servingsChange = function(){
                $scope.calculateCaloriesDisplay();

                setUpGramsDisplay();
            };

            if($scope.isUpdate){
                $scope.selected.servings = food.servings;

                $scope.calculateCaloriesDisplay();

                setUpGramsDisplay();

            };

            $scope.ok = function () {
                if($scope.selected.mealTypeSelected || $scope.selected.customMealInput){
                    var model = {
                        name: $scope.selected.customMealInput || '',
                        type: $scope.selected.mealTypeSelected || 5,
                        foods: [],
                        totalCalories: 0,
                        totalCarbohydrates: 0,
                        totalFat: 0,
                        totalProtein: 0,
                        isEditable: false,
                        isVisible: true
                    };

                    $scope.meals.push(model);

                    $scope.selected.mealSelected = model;
                }

                if($scope.selected.isUpdate) {
                    //set final nutrient values to foodToAdd
                    $scope.selected.foodToAdd.calories = parseFloat($scope.selected.caloriesDisplay);
                    $scope.selected.foodToAdd.protein = parseFloat($scope.selected.proteinDisplay);
                    $scope.selected.foodToAdd.sodium = parseFloat($scope.selected.sodiumDisplay);
                    $scope.selected.foodToAdd.carbohydrates = parseFloat($scope.selected.carbsDisplay);
                    $scope.selected.foodToAdd.saturatedFat = parseFloat($scope.selected.saturatedFatDisplay);
                    $scope.selected.foodToAdd.cholesterol = parseFloat($scope.selected.cholesterolDisplay);
                    $scope.selected.foodToAdd.fiber = parseFloat($scope.selected.fiberDisplay);
                    $scope.selected.foodToAdd.sugar = parseFloat($scope.selected.sugarDisplay);
                    $scope.selected.foodToAdd.grams = parseFloat($scope.selected.gramsDisplay);
                    $scope.selected.foodToAdd.fat = parseFloat($scope.selected.fatDisplay);
                }
                $modalInstance.close($scope.selected);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };

            var showMacrosChart = function() {
                if($scope.selected.proteinDisplay < 1 && $scope.selected.carbsDisplay < 1 &&
                    $scope.selected.fatDisplay < 1){
                    $scope.selected.proteinDisplay = Math.ceil($scope.selected.proteinDisplay);
                    $scope.selected.carbsDisplay = Math.ceil($scope.selected.carbsDisplay);
                    $scope.selected.fatDisplay = Math.ceil($scope.selected.fatDisplay);
                }


                var config = {};
                config.bindto = "#foodMacrosChart";
                config.data = {};
                config.data.json = {};
                config.data.json.Protein = parseInt($scope.selected.proteinDisplay);
                config.data.json.Carbs = parseInt($scope.selected.carbsDisplay);
                config.data.json.Fat = parseInt($scope.selected.fatDisplay);
                config.axis = {"y": {"label": {"text": "Macros", "position": "outer-middle"}}};
                config.data.types = {"Protein": "pie", "Carbs": "pie", "Fat": "pie"};
                config.size = {width: 200, height: 200};
                $scope.chart = c3.generate(config);

            };



            if(food) {
                window.setTimeout(function () {
                    showMacrosChart()
                }, 100);
            }
        };

        function NotesModalInstanceCtrl($scope, $modalInstance, parentScope, planNotes) {
            $scope.notesToSave = null;
            $scope.parentScope = parentScope;
            $scope.notesToSave = planNotes;

            $scope.selected = {
                notesToSave: $scope.notesToSave
            };

            $scope.ok = function () {
                $modalInstance.close($scope.selected.notesToSave);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };

        function getActivityByDate(planDateIn) {
            planDate = planDateIn;

            var request = $http({
                method: "get",
                url: "/activities/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleActivityByDateSuccess, handleError ) );
        }

//        function getPlanByDate(planDateIn) {
//            planDate = planDateIn;
//
//            var request = $http({
//                method: "get",
//                url: "/plans/" + planDate + '/' + 1 + '/' + 1,
//                params: {
//                    action: "get"
//                }
//
//
//            });
//
//            return request;
//
//            //return( request.then( handlePlanByDateSuccess, handleError ) );
//        }






        // ---
        // PRIVATE METHODS.
        // ---


        function handlePlanByDateSuccess(response){
            if(response.data !== 'null') {
                return response.data;
            }
            else{
                return "empty";
            }
        };

        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleActivityByDateSuccess( response ) {

            return response.data;
        }




        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
'use strict';

angular.module('plans').controller('PlansController', ['$scope', '$stateParams', '$location', '$timeout', 'Authentication', '$modal', '$log', 'Plans', 'Foods', 'NutritionProfile', 'Progress', 'PlansService', 'CoreUtilities', '$routeParams',
    function($scope, $stateParams, $location, $timeout, Authentication, $modal, $log, Plans, Foods, NutritionProfile, Progress, PlansService, CoreUtilities, $routeParams) {
        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        window.plans = $scope.plans;
        $scope.showPlanEditableErrorMsg = false;
        $scope.showTotalsAsPercent = true;
        $scope.editBtnTxt = "Edit";
        $scope.isEditingEnabled = false;
        $scope.isLoading = false;
        $scope.isMoreLoading = false;

        $scope.currentDeficit = 0;
        $scope.authentication = Authentication;
        $scope.meals = [];
        $scope.skipPlans = 0;
        $scope.hideMorePlansLink = false;
        $scope.navPillSelected = 'today';
        $scope.planDateInput = '';

        $scope.logNavPillSelected = 'foods';

        //$scope.allFoods = Foods.query();
        //TODO: put this in server controller and attach to req obj
        CoreUtilities.getUserFoods(user._id, 'null', 0, false).then(function(data){
            $scope.allFoods = data;
        });

        $scope.allFoodsInitial = [];
        var plansToGet = 14;

        $scope.getMobilePlanDateFormat = function(){
            return CoreUtilities.getMobilePlanDateFormat($scope);
        };

        $scope.getDesktopPlanDateFormat = function(){
            return CoreUtilities.getDesktopPlanDateFormat($scope);
        };



        $scope.foodTypes = [
            {id: 1, type: 'Fruit'},
            {id: 2, type: 'Starch'},
            {id: 3, type: 'Meat'},
            {id: 4, type: 'Liquid'},
            {id: 5, type: 'Vegetable'},
            {id: 6, type: 'Dessert'},
            {id: 7, type: 'Yogurt'},
            {id: 8, type: 'Pizza'},
            {id: 9, type: 'Butter/Oil'},
            {id: 10, type: 'Tofu'},
            {id: 11, type: 'Beans'},
            {id: 12, type: 'Alcohol'},
            {id: 13, type: 'Nuts'}
        ];

        $scope.mealTypes = [
            {id: 1, name: 'Breakfast'},
            {id: 2, name: 'Lunch'},
            {id: 3, name: 'Dinner'},
            {id: 4, name: 'Snack'},
            {id: 5, name: null}
        ];

        $scope.checkIfEmptyPlan = function(){
            if($scope.plan && $scope.plan.meals) {
                var isEmptyPlan = true;

                for (var p = 0; p < $scope.plan.meals.length; p++) {
                    var mealCompare = $scope.plan.meals[p];

                    if (mealCompare.foods.length > 0) {
                        isEmptyPlan = false;
                        break;
                    }
                }

                return isEmptyPlan;
            }
        };

//        $scope.getFoodServingTxt = function(food){
//            var servingDesc;
//
//            if(food.servingType == 0){
//                servingDesc = food.servingDescription1;
//            }
//            else{
//                servingDesc = food.servingDescription2;
//            }
//
//            if(servingDesc.toLowerCase().trim() !== '1 serving'){
//                //transform serving size text to represent number of servings
//                // (i.e. 3 servings would be "3 slices", not "1 slice")
//                var splitTxt = servingDesc.split(' ');
//                var firstSplitItem = splitTxt[0];
//
//                var nFirstElement = parseInt(firstSplitItem);
//
//                var finalServingDesc;
//
//                if(nFirstElement){
//                    var finalServings = nFirstElement * food.servings;
//
//                    var lastElement = servingDesc.slice(-1);
//                    var plural = finalServings > 1 && lastElement !== ')' && servingDesc.indexOf(',') === -1 && lastElement !== 'z' ? 's' : '';
//
//                    finalServingDesc = finalServings + servingDesc.substr(1, servingDesc.length) + plural;
//                }
//
//                return finalServingDesc;
//            }
//        };

        $scope.mealTypeClicked = function(meal){
            meal.isVisible = !meal.isVisible;
        };

        $scope.toggleEditing = function(){
            if (!$scope.isEditingEnabled){
                $scope.isEditingEnabled = true;
                $scope.editBtnTxt = "Done";

                for(var m = 0; m < $scope.plan.meals.length; m++){
                    $scope.plan.meals[m].isEditable = true;
                }
            }
            else{
                $scope.isEditingEnabled = false;
                $scope.editBtnTxt = "Edit";

                for(var m = 0; m < $scope.plan.meals.length; m++){
                    $scope.plan.meals[m].isEditable = false;
                }

                $scope.savePlan();
            }
        };

        $scope.enableSorting = function(){
            $('.panel-group').find('.panel-default').removeClass('disabled');
        };

        $scope.disableSorting = function(){
            $('.panel-group').find('.panel-default').addClass('disabled');
        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.plan.meals.splice(end, 0,
                $scope.plan.meals.splice(start, 1)[0]);

            $scope.$apply();

            // $scope.savePlan();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };

        var getPlanDateAsConcat = function(planDateYear, planDateMonth, planDateDay){
            planDateYear = parseInt(planDateYear);
            planDateMonth = parseInt(planDateMonth);
            planDateDay = parseInt(planDateDay);

            return parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));
        };



        $scope.create = function() {
            var planDateAsString = new Date($scope.plan.planDateNonUtc);
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            var plan = new Plans({
                //planDate: planDateAsString,
                planDateForDB: planDateAsString,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                notes: $scope.plan.notes,
                planDateAsMili: planDate.getTime(),
                planDateAsConcat: parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay)),
                meals: $scope.plan.meals
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = new Date(response.planDateAsMili);
                $location.path('plans/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.meals = [];
        };



        $scope.copyPlan = function(planCopyModel){
            var planDateAsString = planCopyModel.planDate;
            var planDateToSave = new Date(planDateAsString);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            var plan = new Plans({
                planDateForDB: planCopyModel.planDate,
                planDateAsConcat: parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay)),
                planDateAsMili: planDateToSave.getTime(),
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                meals: planCopyModel.meals
            });
            plan.$save(function(response) {
                $location.path('plans/' + response._id);
                plan.planDateNonUtc = new Date(response.planDateAsMili);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.createMeal = function(createFoodByDefault, noScrollToBottom){
            var model = {
                name: '',
                type: 1,
                foods: [],
                totalCalories: 0,
                totalCarbohydrates: 0,
                totalFat: 0,
                totalProtein: 0,
                isEditable: true,
                isVisible: true
            };

            $timeout(function(){$scope.setSorting();}, 100);


            $scope.plan.meals.push(model);

            var meal = $scope.plan.meals[$scope.plan.meals.length - 1];

            if(!noScrollToBottom) {
                scrollToBottom();
            }

            if(createFoodByDefault) {
                $scope.createFoodWithDialog(meal, null, true);
            }
            //$scope.createFood(meal);

            //sortableEle.refresh();
        };

        var scrollToBottom = function(){
            $("html, body").animate({ scrollTop: $(document).height() }, 1000);
            $("#content").animate({ scrollTop: $('#content').height() + 700 }, 1000);
        };

//        $scope.editMeal = function(meal){
//           // meal.isEditable = true;
//            meal.isVisible = !meal.isVisible;
//            meal.isMealTypeEditable = true;
//        };
//
//        $scope.saveMeal = function(meal){
//            meal.isMealTypeEditable = false;
//            meal.isVisible = !meal.isVisible;
//        };



        $scope.deleteMeal = function(meal, isMobileDevice){
            if (confirm("Are you sure you want to delete this meal?")) {
                for (var i in $scope.plan.meals) {
                    if ($scope.plan.meals[i] === meal) {
                        $scope.plan.meals.splice(i, 1);
                    }
                }

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                if(isMobileDevice){
                    $scope.savePlan(true);
                }
            }
        };

        $scope.collapseAllMeals = function(plan){
            for(var i = 0; i < plan.meals.length; i++){
                var meal = plan.meals[i];
                meal.isVisible = false;
            }
        };

        $scope.saveFood = function(food){
            food.isEditable = false;
        };

        $scope.editFoodClick = function(food){
            for(var i = 0; i < $scope.plan.meals.length; i++){
                for(var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                    $scope.plan.meals[i].foods[j].isEditable = false;
                }
            }

            food.isEditable = true;


            setSelectedFood(food);
        };

        var setSelectedFood = function(food){
            if (!food.selectedFood._id){
                for(var i = 0; i < $scope.allFoods.length; i++){
                    if (food.selectedFood.foodId === $scope.allFoods[i]._id){
                        food.selectedFood = $scope.allFoods[i];
                        break;
                    }
                }
            }
        };

        $scope.editFood = function(food){
            food.isEditable = true;

            setSelectedFood(food);
        };

        $scope.deleteFood = function(food, meal, isMobileDevice){
            if (confirm("Are you sure you want to delete this food?")) {
                for (var nMeal = 0; nMeal < $scope.plan.meals.length; nMeal++) {
                    if ($scope.plan.meals[nMeal] === meal) {
                        for (var nFood = 0; nFood < meal.foods.length; nFood++) {
                            if (meal.foods[nFood] === food) {
                                meal.foods.splice(nFood, 1);
                            }
                        }
                    }
                }

                CoreUtilities.doMealTotaling(meal);

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                // if(isMobileDevice){
                $scope.savePlan();
                //}
            }

        };

        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.plans) {
                    if ($scope.plans[i] === plan) {
                        $scope.plans.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('plans');
                });
            }
        };

        $scope.savePlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            for(var i = 0; i < $scope.plan.meals.length; i++){
                var meal = $scope.plan.meals[i];

                meal.isEditable = false;

                for (var j = 0; j < meal.foods.length; j++){
                    var food = meal.foods[j];

                    food.isEditable = false;
                }
            }

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

            //callback();
        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('plans');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc);
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;

            plan.planDateForDBAsDate = $scope.plan.planDateNonUtc;
            plan.planDateAsMili = planDate.getTime();
            plan.planDateAsConcat = parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay)),

                plan.$update(function(response) {
                    plan.planDateNonUtc = new Date(plan.planDateYear, plan.planDateMonth, plan.planDateDay);

                    //$location.path('plans/' + plan._id);
                    for (var i = 0; i < $scope.plan.meals.length; i++){
                        for (var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                            $scope.plan.meals[i].foods[j].name = $scope.plan.meals[i].foods[j].selectedFood.name;
                            $scope.plan.meals[i].foods[j].type = $scope.plan.meals[i].foods[j].selectedFood.type;
                            $scope.plan.meals[i].foods[j].foodId = $scope.plan.meals[i].foods[j].selectedFood.foodId;
                        }

                        CoreUtilities.doMealTotaling($scope.plan.meals[i]);
                    }

                    CoreUtilities.calculatePlanTotalMacros($scope.plan);

                    //calculate changed deficit
                    $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);

                    $scope.success = true;
                    $timeout(function () {
                        $scope.success = false;
                    }, 2500);


                    $timeout(function(){$scope.setSorting();}, 100);

                    $scope.editBtnTxt = "Edit";

                }, function(errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
        };

        $scope.find = function(getMorePlans) {
            $scope.navPillSelected = 'history';
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());


            if(!getMorePlans) {
                $scope.isLoading = true;
            }

            $scope.plans = Plans.query({skipPlans: $scope.skipPlans},
                function(data)
                {
                    if(data && data.length > 0) {

                        for (var i = 0; i < $scope.plans.length; i++) {
                            for (var nMeal = 0; nMeal < $scope.plans[i].meals.length; nMeal++) {
                                CoreUtilities.doMealTotaling($scope.plans[i].meals[nMeal]);
                            }

                            CoreUtilities.calculatePlanTotalMacros($scope.plans[i]);

                            var planFullDate = new Date($scope.plans[i].planDateNonUtc);
                            var planDateYear = planFullDate.getFullYear();
                            var planDateMonth = planFullDate.getMonth();
                            var planDateDay = planFullDate.getDate();

                            var planModel = {
                                planDateYear: planDateYear,
                                planDateMonth: planDateMonth,
                                planDateDay: planDateDay,
                                planDateNonUtc: $scope.plans[i].planDateNonUtc || $scope.plans[i].planDate,
                                planDateAsMili: $scope.plans[i].planDateAsMili,
                                planDateAsConcat: $scope.plans[i].planDateAsConcat,
                                calories: $scope.plans[i].totalPlanCalories,
                                protein: $scope.plans[i].totalPlanProtein,
                                carbs: $scope.plans[i].totalPlanCarbs,
                                fat: $scope.plans[i].totalPlanFat,
                                _id: $scope.plans[i]._id
                            };

                            $scope.plansCollection.push(planModel);
                        }

                        if (!getMorePlans) {
                            $scope.isLoading = false;
                        }
                        else {
                            $scope.isMoreLoading = false;
                        }

                        if(data.length < plansToGet){
                            $scope.hideMorePlansLink = true;
                        }
                    }
                    else{
                        $scope.hideMorePlansLink = true;
                        $scope.isMoreLoading = false;
                        $scope.isLoading = false;
                    }

                }
            );


        };

        var setCurrentDeficit = function(){
            var now = new Date(new Date($scope.plan.planDateNonUtc).toUTCString());
            var startDateFormatted = now.getFullYear() + '_' + now.getMonth() + '_' + now.getDate();
            var endDateFormatted = startDateFormatted;

            $scope.progress = Progress.get({
                    progressId: startDateFormatted
                },
                function(u)
                {
                    $scope.currentDeficit = u.deficit || 0;
                }
            );
        };

        var processReturnedPlan = function(){
            $scope.plan.planDateNonUtc = new Date($scope.plan.planDateYear, $scope.plan.planDateMonth, $scope.plan.planDateDay);

            setCurrentDeficit();

            $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

            setPlanMealsTotals();

            fillActivityPlan();

            var now = new Date();
            var year = now.getFullYear();
            var month = now.getMonth();
            var day = now.getDate();

            if(year == $scope.plan.planDateYear && month == $scope.plan.planDateMonth && day == $scope.plan.planDateDay){
                $scope.navPillSelected = 'today';
            }

            $scope.isLoading = false;
        };

        var processNewPlan = function(planDateYear, planDateMonth, planDateDay){
            var planDate;

            if(planDateYear && planDateMonth && planDateDay) {
                planDate = new Date(planDateYear, planDateMonth, planDateDay);
            }
            else{
                planDate = new Date();
            }

            $scope.plan =  {data: null, meals: null, notes: null, planDate: planDate, planDateNonUtc: planDate, planDateYear: planDate.getFullYear(), planDateMonth: planDate.getMonth(), planDateDay: planDate.getDate()  };
            $scope.plan.meals = [];

            $scope.plan.totalPlanCalories = 0;
            $scope.plan.totalPlanCarbsAsPercent = 0;
            $scope.plan.totalPlanFatAsPercent = 0;
            $scope.plan.totalPlanProteinAsPercent = 0;

            if(planDateYear && planDateMonth && planDateDay){
                $scope.plan.planDateAsConcat = getPlanDateAsConcat(planDateYear, planDateMonth, planDateDay);
            }

            //todo use ngRouter instead of this horrible method for extracting url param
            //setPlanDateFromUrlParam();

            //checkIfNewUser();
            $stateParams.planDateForCreate = "";

            createDefaultMealsTemplate();

            fillActivityPlan();

            $scope.plan.moveArrowImgLeft = false;

            $scope.isLoading = false;

            //check for bootstrap tour continue event
            //todo: don't need to specify go to step; just go to whatever tour_current_step is, similar to how i do on dashboard pg
            if(localStorage.tour_current_step =="14") {
                tour.goTo(14);
            }
            else if(localStorage.tour_current_step && !localStorage.tour_end) {
                tour.goTo(6);
            }
        };

        $scope.planInputChange = function(planDateInput){


            var year = planDateInput.getFullYear();
            var month = planDateInput.getMonth();
            var day = planDateInput.getDate();

            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            window.location = '#!/plans/nav/' + planDateAsConcat + '/true';
            // getPlanFromDb(year, month, day, planDateAsConcat);

            $scope.opened = false;
        };

//        $scope.planInputChange = function(){
//            var year = $scope.plan.planDateNonUtc.getFullYear();
//            var month = $scope.plan.planDateNonUtc.getMonth();
//            var day = $scope.plan.planDateNonUtc.getDate();
//
//            var planDateAsConcat = getPlanDateAsConcat(year, month, day);
//
//            getPlanFromDb(year, month, day, planDateAsConcat);
//
//            $scope.opened = false;
//        };

        var getPlanFromDb = function(year, month, day, planDateAsConcat){
            $scope.nutritionProfile = window.user.nutritionProfile;

            if($stateParams.planDateForCreate){
                processNewPlan(year, month, day);

                $scope.isLoading = false;
            }
            else if(planDateAsConcat){
                $scope.plan = Plans.get({
                    planId: planDateAsConcat
                },function(plan){
                    if(!plan || (plan && !plan.planDateYear)) {
                        processNewPlan(year, month, day);
                    }
                    processReturnedPlan();

                    $scope.isLoading = false;
                });
            }
            else if ($stateParams.planId) {
                $scope.plan = Plans.get({
                    planId: $stateParams.planId
                }, function () {
                    processReturnedPlan();
                });
            }
            else{
                processNewPlan();
            }

            $timeout(function(){$scope.setSorting();}, 100);

        };

        $scope.toggleMealVisibility = function(meal){
            meal.isVisible = !meal.isVisible;
        };

        $scope.toggleDayClick = function(direction){
            $scope.isLoading = true;

            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();

            var planDate = new Date(year, month, day);

            if(direction == 'nextDay'){
                planDate = new Date(planDate.setDate(planDate.getDate() + 1));
            }
            else{
                planDate = new Date(planDate.setDate(planDate.getDate() - 1));
            }

            year = planDate.getFullYear();
            month = planDate.getMonth();
            day = planDate.getDate();

            $scope.plan.planDateNonUtc = new Date(year, month, day);

            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            getPlanFromDb(year, month, day, planDateAsConcat);
        };

        $scope.findOneForNav = function(){
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());


            $scope.isLoading = true;

            var planDateAsConcat;

            //extract year, month, day from date parameter
            if($stateParams.planNavDate) {
                var year, month, day;

                var sDateParam = $stateParams.planNavDate.toString();
                year = sDateParam.substr(0, 4);
                month = sDateParam.substr(4, 2);
                day = sDateParam.substr(6, 2);

                planDateAsConcat = new Date(year, month, day);

                year = planDateAsConcat.getFullYear();
                month = planDateAsConcat.getMonth();
                day = planDateAsConcat.getDate();

                planDateAsConcat = getPlanDateAsConcat(year, month, day);

                if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                    $scope.navPillSelected = 'today';
                }
                else{
                    $scope.navPillSelected = 'history';
                }
            }

            getPlanFromDb(year, month, day, planDateAsConcat);
        };

        $scope.findOne = function() {
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());


            $scope.isLoading = true;

            $scope.navPillSelected = 'history';

            var planDateAsConcat;

            //extract year, month, day from date parameter
            if($stateParams.planDate || $stateParams.planDateForCreate) {
                var year, month, day;

                var sDateParam = $stateParams.planDate ? $stateParams.planDate.toString() : $stateParams.planDateForCreate.toString();
                year = sDateParam.substr(0, 4);
                month = sDateParam.substr(4, 2);
                day = sDateParam.substr(6, 2);

                planDateAsConcat = new Date(year, month, day);

                year = planDateAsConcat.getFullYear();
                month = planDateAsConcat.getMonth();
                day = planDateAsConcat.getDate();

                planDateAsConcat = getPlanDateAsConcat(year, month, day);


            }

            if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                $scope.navPillSelected = 'today';
            }

            getPlanFromDb(year, month, day, planDateAsConcat);
        };

        var createDefaultMealsTemplate = function(){
            //create meal template based on what user specified in their nutrition profile
            if($scope.nutritionProfile.templateMeals && $scope.nutritionProfile.templateMeals.length > 0){
                for(var t = 0; t < $scope.nutritionProfile.templateMeals.length; t++){
                    var templateMealItem = $scope.nutritionProfile.templateMeals[t];

                    $scope.createMeal(null, true);

                    $scope.plan.meals[t].isEditable = false;
                    $scope.plan.meals[t].type = $scope.mealTypes[templateMealItem.id - 1].id;
                }
            }
            //create breakfast, lunch, and dinner as default empty meals for plan
            else {
                $scope.createMeal(null, true);
                $scope.createMeal(null, true);
                $scope.createMeal(null, true);

                $scope.plan.meals[0].isEditable = false;
                $scope.plan.meals[1].type = $scope.mealTypes[1].id;
                $scope.plan.meals[1].isEditable = false;
                $scope.plan.meals[2].isEditable = false;
                $scope.plan.meals[2].type = $scope.mealTypes[2].id;
            }
        };

        var setPlanMealsTotals = function(){
            for (var i = 0; i < $scope.plan.meals.length; i++) {
                var carbsTotal = 0, proteinTotal = 0, caloriesTotal = 0, fatTotal = 0, sodiumTotal = 0;

                for (var j = 0; j < $scope.plan.meals[i].foods.length; j++) {
                    $scope.plan.meals[i].foods[j].name = $scope.plan.meals[i].foods[j].selectedFood.name;
                    $scope.plan.meals[i].foods[j].type = $scope.plan.meals[i].foods[j].selectedFood.type;
                    $scope.plan.meals[i].foods[j].foodId = $scope.plan.meals[i].foods[j].selectedFood.foodId;

                    var carbs = $scope.plan.meals[i].foods[j].carbohydrates;

                    carbsTotal += carbs;
                    sodiumTotal += $scope.plan.meals[i].foods[j].sodium;
                    proteinTotal += $scope.plan.meals[i].foods[j].protein;
                    fatTotal += $scope.plan.meals[i].foods[j].fat;
                    caloriesTotal += $scope.plan.meals[i].foods[j].calories;
                }

                $scope.plan.meals[i].totalCarbohydrates = carbsTotal;
                $scope.plan.meals[i].totalCalories = caloriesTotal;
                $scope.plan.meals[i].totalProtein = proteinTotal;
                $scope.plan.meals[i].totalFat = fatTotal;
                $scope.plan.meals[i].totalSodium = sodiumTotal;

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
            }
        };

        var fillActivityPlan = function(){
            var planDate = new Date($scope.plan.planDateNonUtc);
            var year = planDate.getFullYear();
            var month = planDate.getMonth();
            var day = planDate.getDate();

            var planDateForDb =  month + '_' + day + '_' + year;

            PlansService.getActivityByDate(planDateForDb).then(function(data) {
                $scope.activityPlan = data;
            });
        };



        $scope.foodSelectionChange = function(food, meal){
            food.type = food.selectedFood.type;
            food.calories = food.servings * food.selectedFood.calories;
            food.fat = food.servings * food.selectedFood.fat;
            food.protein = food.servings * food.selectedFood.protein;
            food.carbohydrates = food.servings * food.selectedFood.carbohydrates;
            food.grams = food.servings * food.selectedFood.grams;
            food.sodium = food.servings * food.selectedFood.sodium;
            food.fiber = food.servings * food.selectedFood.fiber;
            food.sugar = food.servings * food.selectedFood.sugar;
            food.saturatedFat = food.servings * food.selectedFood.saturatedFat;
            food.vitaminA = food.servings * food.selectedFood.vitaminA;
            food.vitaminC = food.servings * food.selectedFood.vitaminC;
            food.calcium = food.servings * food.selectedFood.calcium;
            food.iron = food.servings * food.selectedFood.iron;
            food.transfat = food.servings * food.selectedFood.transfat;
            food.cholesterol = food.servings * food.selectedFood.cholesterol;
            food.name = food.selectedFood.name;
            food.selectedFood.foodId = food.selectedFood._id;
            food.type = food.selectedFood.type;

            food.servingDescription1 = food.selectedFood.servingDescription1;
            food.servingDescription2 = food.selectedFood.servingDescription2;
            food.servingGrams1 = food.selectedFood.servingGrams1;
            food.servingGrams2 = food.selectedFood.servingGrams2;
            food.servingType = food.selectedFood.servingType;

            food.foodId = food.selectedFood._id;

            CoreUtilities.doMealTotaling(meal);

            CoreUtilities.calculatePlanTotalMacros($scope.plan);

            //calculate changed deficit
            $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
        };

        $scope.foodServingsChange = function(food, meal, newServings){

            if(food.servings !== "" && food.servings !== undefined && food.servings !== "undefined") {
                var servings = parseFloat(newServings || food.servings);

                food.calories = servings * food.selectedFood.calories;
                food.fat = servings * food.selectedFood.fat;
                food.protein = servings * food.selectedFood.protein;
                food.carbohydrates = servings * food.selectedFood.carbohydrates;
                food.sodium = servings * food.selectedFood.sodium;
                food.grams = servings * food.selectedFood.grams;

                if(newServings) {
                    for (var m = 0; m < meal.foods.length; m++) {
                        if (meal.foods[m]._id === food._id) {
                            meal.foods[m] = food;
                            meal.foods[m].servings = newServings;
                            break;
                        }
                    }
                }

                CoreUtilities.doMealTotaling(meal);

                CoreUtilities.calculatePlanTotalMacros($scope.plan);

                //calculate changed deficit
                $scope.currentDeficit = CoreUtilities.calculateDeficit($scope.plan, $scope.activityPlan, $scope.nutritionProfile);
            }
        };

        $scope.toggleTotalsAsPercent = function(){
            $scope.showTotalsAsPercent = !$scope.showTotalsAsPercent;
        };

        $scope.toggleMealVisibility = function(meal){
            meal.isVisible = !meal.isVisible;
        };

        $scope.getMealTypeName = function(type){

            var mealTypeName;

            if(type) {
                for (var i = 0; i < $scope.mealTypes.length; i++) {
                    var mealType = $scope.mealTypes[i];

                    if (mealType.id == type) {
                        mealTypeName = mealType.name;
                        break;
                    }
                }
            }

            //handle custom meal type - name already defined in meal model then
            // if(type === 5){
            //     mealTypeName =
            // }

            return mealTypeName;
        };


        var checkIfPlanEditable = function(){
            var isPlanEditable = false;

            for(var i = 0; i < $scope.plan.meals.length; i++){
                for (var j = 0; j < $scope.plan.meals[i].foods.length; j++){
                    var planMeal = $scope.plan.meals[i];
                    var mealFood = planMeal.foods[j];

                    if (planMeal.isEditable || mealFood.isEditable){
                        isPlanEditable = true;
                        break;
                    }


                }
            }

            return isPlanEditable;
        };

        //sorting code
        // data
        $scope.orderByField = 'planDateAsConcat';
        $scope.reverseSort = true;
        $scope.plansCollection = [];

        $scope.setSorting = function(){
            if (!$scope.isEditingEnabled){
                $('.panel-group').find('.panel-default').addClass('disabled');
                $scope.isEditingEnabled = false;
            }
        };



        $scope.nextPlans =function(){
            $scope.isMoreLoading = true;
            $scope.skipPlans += plansToGet;

            $scope.find(true);
        };

        //dialog code
        $scope.openCopyPlanDialog = function (size) {
            var isPlanEditable = checkIfPlanEditable();

            if (!isPlanEditable) {
                $scope.showPlanEditableErrorMsg = false;

                var modalInstance = $modal.open({
                    templateUrl: 'myModalContent.html',
                    controller: PlansService.ModalInstanceCtrl,
                    //size: size,
                    resolve: {
                        dialogMealsShort: function () {
                            var mealsAry = [];

                            for (var i = 0; i < $scope.plan.meals.length; i++) {
                                var mealModel = {};
                                mealModel.id = $scope.plan.meals[i]._id;
                                mealModel.selected = true;

                                var mealType = $scope.mealTypes[$scope.plan.meals[i].type - 1];

                                if (mealType && mealType.id >= 0) {
                                    mealModel.type = mealType.name;
                                }
                                else {
                                    mealModel.type = 'N/A';
                                }

                                mealsAry.push(mealModel);
                            }

                            return mealsAry;
                        },
                        dialogMealsDetailed: function () {
                            return $scope.plan.meals;
                        },
                        parentScope: function () {
                            return $scope;
                        }
                    }
                });

                modalInstance.result.then(function (planCopyModel) {
                    //$scope.dialogSelectedMealType = selectedItem;
                    $scope.copyPlan(planCopyModel);

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
            else{
                $scope.showPlanEditableErrorMsg = true;
            }
        };


        $scope.createFoodWithDialog = function(mealToUpdate, food){
            var modalInstance = $modal.open({
                templateUrl: 'createFoodModalContent.html',
                controller: PlansService.CreateFoodModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    meal: function(){
                        return mealToUpdate;
                    },
                    meals: function(){
                        return $scope.plan.meals;
                    },
                    food: function(){
                        return food;
                    },
                    CoreUtilities: function(){
                        return CoreUtilities;
                    },
                    getMealTypeName: function(){
                        return $scope.getMealTypeName;
                    },
                    mealTypes: function(){
                        return $scope.mealTypes;
                    },
                    userFoods: function(){
                        return $scope.allFoods;
                    },
                    nutritionPlan: function(){
                        return $scope.plan;
                    }
                }
            });

            var checkIfIncrementingServings = function(meal, food){
                //var isServingsUpdated = false;
                var newServings;

                if(meal.foods && meal.foods.length > 0) {
                    //check if just incrementing servings of food since list already has this food
                    for (var m = 0; m < meal.foods.length; m++) {
                        if (meal.foods[m]._id === food._id) {
                            //meal.foods[m].servings += meal.foods[m].servings;
                            meal.foods[m].servings += parseFloat(food.servings);
                            newServings = meal.foods[m].servings;
                            break;
                        }
                    }
                }

                return newServings;
            };

            var instantiateNewFood = function(foodDetails, servingType, servings){
                var food = {
                    _id: foodDetails._id,
                    name: foodDetails.name,
                    calories: foodDetails.calories,
                    carbohydrates: foodDetails.carbohydrates,
                    protein: foodDetails.protein,
                    fat: foodDetails.fat,
                    sodium: foodDetails.sodium,
                    grams: foodDetails.grams,
                    cholesterol: foodDetails.cholesterol,
                    saturatedFat: foodDetails.saturatedFat,
                    sugar: foodDetails.sugar,
                    fiber: foodDetails.fiber,
                    servingGrams2: foodDetails.servingGrams2,
                    servingGrams1: foodDetails.servingGrams1,
                    servingDescription1: foodDetails.servingDescription1,
                    servingDescription2: foodDetails.servingDescription2,
                    servingType: servingType,
                    servings: servings,
                    isEditable: false
                };

                return food;
            };

            modalInstance.result.then(function (selected) {
                if(!selected.isFoodDelete){
                    var meal = selected.mealSelected;
                    var foodDetails = selected.foodToAdd;
                    var isUpdate = selected.isUpdate;

                    var food = instantiateNewFood(foodDetails, selected.servingType, selected.servings);

                    var selectedFoodDefault = instantiateNewFood(foodDetails, selected.servingType, 1);

                    food.selectedFood = foodDetails.selectedFood ? foodDetails.selectedFood : selectedFoodDefault;

                    if(isUpdate) {
                        var isServingsUpdated = false;

                        if(selected.oldFood._id !== food._id){
                            isServingsUpdated = checkIfIncrementingServings(meal, food);
                        }

                        if(!isServingsUpdated) {
                            for (var m = 0; m < meal.foods.length; m++) {
                                if (meal.foods[m]._id === selected.oldFood._id) {
                                    meal.foods[m] = food;
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        var newServings = checkIfIncrementingServings(meal, food);

                        if(!newServings) {
                            selected.mealSelected.foods.push(food);

                            $scope.foodServingsChange(food, meal);

                            //                        window.setTimeout(function(){
                            //                            food.IsSuggested = true;
                            //                        }, 2000);
                            //                        window.setTimeout(function(){
                            //                            food.IsSuggested = false;
                            //                        }, 3000);
                        }
                        else{
                            $scope.foodServingsChange(food, meal, newServings);
                        }
                    }


                }

                $scope.savePlan();

            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.openNotesDialog = function (notes) {
            var modalInstance = $modal.open({
                templateUrl: 'notesModalContent.html',
                controller: PlansService.NotesModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    planNotes: function(){
                        return $scope.plan.notes
                    }
                }
            });

            modalInstance.result.then(function (notesToSave) {
                $scope.plan.notes = notesToSave;
                $scope.savePlan();
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        }
    }
]);

















//Plans service used for communicating with the plans REST endpoints
angular.module('plans').factory('Plans', ['$resource',
    function($resource) {
        return $resource('plans/:planId', {
            planId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);'use strict';

// Setting up route
angular.module('core').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        // Redirect to home view when route not found
        $urlRouterProvider.otherwise('/');

        // Home state routing
        $stateProvider.
//        state('dashboard', {
//            url: '/dashboard',
//            templateUrl: 'modules/core/views/home.client.view.html'
//        }).
//		state('dashboardForDate', {
//			url: '/dashboard/:dashboardDate',
//			templateUrl: 'modules/core/views/home.client.view.html'
//		}).
            state('home', {
                url: '/',
                templateUrl: 'modules/core/views/home.client.view.html'
            });
    }
]);


/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('core').service(
    "ThermometerChartService",
    function( $http, $q ) {

        // Return public API.
        return({
            buildThermometerChart: buildThermometerChart
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function buildThermometerChart(caloriesIn, goalCalories, chartElementSelector, isUpdate){
            if(isUpdate){
                $(chartElementSelector).empty();
            }

            var data2 = [500, 1000, 1500, 2000, 2500]; //represents calories list

            var borderColor = "rgba(0, 0, 0, 0.39)";
            var deficitColor = "rgb(183, 193, 231)";
            var caloriesInColor = "rgb(69, 151, 69)";
            var deficitFocusColor = "rgb(151, 166, 222)";
            var goalsColor = "orange";
            var borderWidth = .3;

            var budgetLineContainer, budgetLine, budgetCircle;

            var emptyRegionRect, deficitSharpEdgesRect, caloriesInSharpEdgesRect, caloriesInRoundEdgesRect;

            var lineLocations, lineScale, lineElement;

            var div;

            //var caloriesIn = 1250;
            //var goalCalories = 1750;
            var deficit = goalCalories - caloriesIn;

            var pixelsPerCalorie = 7.8125;
            var caloriesInWidth = caloriesIn / pixelsPerCalorie;
            var goalCaloriesWidth = goalCalories / pixelsPerCalorie;

            var width = 305;

            var xScale = d3.scale.linear()
                .domain([0, d3.max(data2)])
                .range([0, width]);


            var mouseOverForToolTip = function(elementToIgnore){
                if(elementToIgnore !== 'deficit'){
                    deficitSharpEdgesRect.style("opacity", .4);
                }

                if(elementToIgnore !== 'caloriesIn'){
                    caloriesInSharpEdgesRect.style("opacity", .2)
                    caloriesInRoundEdgesRect.style("opacity", 0)
                }
                if(elementToIgnore !== 'budget'){
                    budgetCircle.style("opacity", .3)
                    budgetLine.style("opacity", .3)
                }

                emptyRegionRect.style("opacity", .4)
            };

            var mouseOutForToolTip = function(elementToIgnore){
                if(elementToIgnore !== 'deficit'){
                    deficitSharpEdgesRect.style("opacity", 1);
                }

                if(elementToIgnore !== 'caloriesIn'){
                    caloriesInSharpEdgesRect.style("opacity", 1)
                    caloriesInRoundEdgesRect.style("opacity", 1)
                }
                if(elementToIgnore !== 'budget'){
                    budgetCircle.style("opacity", 1)
                    budgetLine.style("opacity", 1)
                }

                emptyRegionRect.style("opacity", 1)
            };

            if(!chartElementSelector){
                chartElementSelector = '.budgetChart';
            }


            //Make an SVG Container
            var svgContainer = d3.select(chartElementSelector)
                .attr({
                    width: 340,
                    height: 130
                });


            //Calorie Text Start
            var setupCalorieText = function(){
                //draw calorie numbers on top of rect
                var textElement = svgContainer.selectAll("g")
                    .data(data2)
                    .enter().append("g")

                textElement.append("text")
                    .attr("x", function(d) { return xScale(d) + 2; })
                    .attr("y", 30)
                    .attr("class", "caloriesLbl")
                    .attr("dy", ".65em")
                    .text(function(d) { return d; });
            }

            //Tooltip Start
            var setupToolTip = function(){
                div = d3.select("body").append("div")
                    .attr("class", "tooltip")
                    .style("opacity", 0);

                var tooltipTest = d3.select("body")
                    .append("div")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden")
                    .text("a simple tooltip");
            };

            var mouseMoveForToolTip = function(){
                return  div.style("left", Math.max(0, d3.event.pageX - 50) + "px")
                    .style("top", (d3.event.pageY + 20) + "px");
            };

            //-------------------- Draw Rects Start ------------------------------------//

            //Draw the empty region Rectangle
            var drawEmptyRegionRect = function(){
                emptyRegionRect = svgContainer.append("rect")
                    .attr({
                        x: 10,
                        y: 50,
                        rx: 15,
                        ry: 15,
                        width: 320,
                        height: 40
                    })
                    .style("stroke", borderColor)
                    .style("stroke-width", borderWidth)
                    .style("fill", "rgb(230, 227, 227)");
            };

            //Draw the deficit sharp edges Rectangle
            var drawDeficitRect = function(){
                deficitSharpEdgesRect = svgContainer.append("rect")
                    .attr({
                        x: caloriesInWidth + 15,
                        y: 50,
                        width: goalCaloriesWidth - caloriesInWidth - 3,
                        height: 40
                    })
                    .on("mousemove", function () {
                        mouseMoveForToolTip();
                    })
                    .on("mouseover", function(d) {
                        div.transition()
                            .duration(20)
                            .style("opacity", .9);
                        div.html("<div class='toolTipColorRegion deficitRegion'>&nbsp;</div> <div class='toolTipLbl'>Calories Needed</div>" + "<div class='toolTipValue'>"  + deficit + "</div>")

                        mouseOverForToolTip('deficit');

                        deficitSharpEdgesRect.style("fill", deficitFocusColor);

                        deficitSharpEdgesRect.style("cursor", "pointer");
                    })
                    .on("mouseout", function(d) {
                        mouseOutForToolTip('deficit');
                        deficitSharpEdgesRect.style("fill", deficitColor);

                        div.transition()
                            .duration(50)
                            .style("opacity", 0);
                    })
                    .style("stroke", borderColor)
                    .style("stroke-width", borderWidth)
                    .style("fill", deficitColor);
            };

            var caloriesInFillColor = "rgb(50, 131, 50)";

            //Draw the calories-in sharp edges Rectangle
            var drawCaloriesInSharpEdgesRect = function(){
                caloriesInSharpEdgesRect = svgContainer.append("rect")
                    .attr({
                        x: 15,
                        y: 50,
                        width: caloriesInWidth,
                        height: 40
                    })
                    .on("mousemove", function () {
                        mouseMoveForToolTip();
                    })
                    .on("mouseover", function(d) {
                        div.transition()
                            .duration(200)
                            .style("opacity", .9);
                        div.html("<div class='toolTipColorRegion caloriesInRegion'>&nbsp;</div><div class='toolTipLbl'>Calories In</div>" + "<div class='toolTipValue'>"  + caloriesIn + "</div>")

                        mouseOverForToolTip('caloriesIn');

                        caloriesInSharpEdgesRect.style("cursor", "pointer");

                        caloriesInSharpEdgesRect.style("fill", caloriesInFillColor);
                        caloriesInRoundEdgesRect.style("fill", caloriesInFillColor);

                    })
                    .on("mouseout", function(d) {
                        mouseOutForToolTip('caloriesIn');

                        caloriesInSharpEdgesRect.style("fill", caloriesInColor);
                        caloriesInRoundEdgesRect.style("fill", caloriesInColor);

                        div.transition()
                            .duration(500)
                            .style("opacity", 0);
                    })
                    .style("stroke", borderColor)
                    .style("stroke-width", borderWidth)
                    .style("fill", caloriesInColor);
            };

            //Draw the calories-in rounded edges Rectangle
            var drawCaloriesInRoundedEdgesRect = function(){
                caloriesInRoundEdgesRect = svgContainer.append("rect")
                    .attr({
                        x: 10,
                        y: 50,
                        rx: 15,
                        ry: 15,
                        width: 15,
                        height: 40
                    })
                    .on("mousemove", function () {
                        mouseOverForToolTip('caloriesIn');

                        div.style("left", Math.max(0, d3.event.pageX - 50) + "px")
                            .style("top", (d3.event.pageY + 20) + "px");
                    })
                    .on("mouseover", function(d) {
                        div.transition()
                            .duration(200)
                            .style("opacity", .9);
                        div.html("<div class='toolTipColorRegion caloriesInRegion'>&nbsp;</div><div class='toolTipLbl'>Calories In</div>" + "<div class='toolTipValue'>"  + caloriesIn + "</div>")

                        caloriesInRoundEdgesRect.style("cursor", "pointer");

                        caloriesInSharpEdgesRect.style("fill", caloriesInFillColor);
                        caloriesInRoundEdgesRect.style("fill", caloriesInFillColor);
                    })
                    .on("mouseout", function(d) {
                        mouseOutForToolTip('caloriesIn');

                        caloriesInSharpEdgesRect.style("fill", caloriesInColor);
                        caloriesInRoundEdgesRect.style("fill", caloriesInColor);

                        div.transition()
                            .duration(500)
                            .style("opacity", 0);
                    })
                    .style("fill", "rgb(69, 151, 69)");
            };
            //-------------------- Draw Rects End ------------------------------------//

            var drawDottedLines = function(){
                lineLocations = [38, 69, 100, 130]; //represents calories list

                lineScale = d3.scale.linear()
                    .domain([0, d3.max(lineLocations)])
                    .range([0, 269]);

                lineElement = svgContainer.selectAll(".line21")
                    .data(lineLocations)
                    .attr("class", "line1")
                    .enter().append("g")

                //draw dotted lines along calorie regions
                lineElement.append("line")
                    .style("stroke-dasharray", ("8,3")) // make the stroke dashed
                    .attr("x1", function(d,i) { return lineScale(d); })
                    .attr("y1", 50)
                    .attr("x2", function(d,i) { return lineScale(d); })
                    .attr("y2", 88)
                    .attr("stroke-width", .7)
                    .attr("stroke", "black");
            };

            var drawBudgetCode = function(){
                budgetLineContainer = svgContainer.append("g")
                    .attr("class", "budgetLine");

                //draw budget line
                budgetLine = budgetLineContainer.append("line")
                    .on("mousemove", function () {
                        mouseMoveForToolTip();
                    })
                    .on("mouseover", function(d) {
                        mouseOverForToolTip('budget');

                        div.transition()
                            .duration(200)
                            .style("opacity", .9);
                        div.html("<div class='toolTipColorRegion goalsRegion'>&nbsp;</div><div class='toolTipLbl'>Goal Calories</div>" + "<div class='toolTipValue'>"  + goalCalories + "</div>")

                        budgetLine.style("cursor", "pointer");
                    })
                    .on("mouseout", function(d) {
                        mouseOutForToolTip('budget');

                        div.transition()
                            .duration(500)
                            .style("opacity", 0);
                    })
                    .attr("x1", goalCaloriesWidth + 13)
                    .attr("y1", 50)
                    .attr("x2", goalCaloriesWidth + 13)
                    .attr("y2", 90)
                    .attr("stroke-width", 3.5)
                    .attr("stroke", goalsColor);


                //Draw the Budget Circle
                budgetCircle = svgContainer.append("circle")
                    .on("mousemove", function () {
                        mouseMoveForToolTip();
                    })
                    .on("mouseover", function(d) {
                        mouseOverForToolTip('budget');

                        div.transition()
                            .duration(200)
                            .style("opacity", .9);
                        div.html("<div class='toolTipColorRegion goalsRegion'>&nbsp;</div><div class='toolTipLbl'>Goal Calories</div>" + "<div class='toolTipValue'>"  + goalCalories + "</div>")

                        budgetCircle.style("cursor", "pointer");
                    })
                    .on("mouseout", function(d) {
                        mouseOutForToolTip('budget');

                        div.transition()
                            .duration(500)
                            .style("opacity", 0);
                    })
                    //.attr("cx", 236)
                    .attr("cx", goalCaloriesWidth + 13)
                    .attr("cy", 95)
                    .attr("fill", goalsColor)
                    .attr("r", 6);
            };

            var setUpChartData = function(){
                setupCalorieText();

                setupToolTip();

                drawEmptyRegionRect();
                drawDeficitRect();
                drawCaloriesInSharpEdgesRect();
                drawCaloriesInRoundedEdgesRect();

                drawDottedLines();

                drawBudgetCode();
            };

            setUpChartData();


        };




    }
);


/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('core').service(
    "CoreDialogsService",
    function( $http, $q ) {

        // Return public API.
        return({
            CreateNutritionProfileInstanceCtrl: CreateNutritionProfileInstanceCtrl,
            StartTourDialogCtrl: StartTourDialogCtrl
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function StartTourDialogCtrl($scope, $modalInstance) {
            $scope.ok = function () {
                $modalInstance.close();
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };


        function CreateNutritionProfileInstanceCtrl($scope, $modalInstance){
            $scope.nutritionProfile = {};

            $scope.sexOptions = [
                'Male',
                'Female'
            ];

            $scope.heightFeetOptions = [ 1, 2, 3, 4, 5, 6, 7, 8];
            $scope.heightInchesOptions = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

            $scope.selected = {
                nutritionProfile: $scope.nutritionProfile,
                deficitTarget: $scope.deficitTarget,
                proteinPercentageTarget: $scope.proteinPercentageTarget,
                carbohydratesPercentageTarget: $scope.carbohydratesPercentageTarget,
                fatPercentageTarget: $scope.fatPercentageTarget,
                age: $scope.age,
                heightFeet: $scope.heightFeet,
                heightInches: $scope.heightInches,
                gender: $scope.gender,
                weight: $scope.weight
            };



            $scope.ok = function () {
                $modalInstance.close($scope.selected);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };


        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleSuccess( response ) {

            return response.data;
        }




        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);


'use strict';
angular.module('core').controller('HeaderController', [
    '$scope',
    'Authentication',
    'Menus',
    function ($scope, Authentication, Menus) {
        $scope.authentication = Authentication;
        $scope.isCollapsed = false;
        $scope.menu = Menus.getMenu('topbar');
        $scope.toggleCollapsibleMenu = function () {
            $scope.isCollapsed = !$scope.isCollapsed;
        };
        // Collapsing the menu after navigation
        $scope.$on('$stateChangeSuccess', function () {
            $scope.isCollapsed = false;
        });
    }
]);
/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('core').service(
    "CoreService",
    function( $http, $q ) {

        var planDate, weeklyPlanDate;
        var dailyDashboardData = {};
        var weeklyDashboardData = {};

        // Return public API.
        return({
            getDailyDashboardData: getDailyDashboardData,
            getWeeklyDashboardData: getWeeklyDashboardData
        });


        // ---
        // PUBLIC METHODS.
        // ---

//        function getDailyDashboardData(planDateIn) {
//            planDate = planDateIn;
//
//            var request = $http({
//                method: "get",
//                url: "/plans/" + planDate + '/' + 1,
//                params: {
//                    action: "get"
//                }
//
//
//            });
//
//            return( request.then( handleNutritionPlanSuccess, handleError ) );
//        }

        function getDailyDashboardData(planDateIn) {
            planDate = planDateIn;

            var request = $http({
                method: "get",
                url: "/core/" + planDate,
                params: {
                    action: "get"
                }


            });

            return( request.then( handleGetDailyDashboardDataSuccess, handleError ) );
        }

        function getWeeklyDashboardData(planDateIn) {
            weeklyPlanDate = planDateIn;


            var request = $http({
                method: "get",
                url: "/plans/" + weeklyPlanDate + '/' + 7,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleWeeklyNutritionPlanSuccess, handleError ) );
        }






        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleNutritionPlanSuccess( response ) {

            dailyDashboardData.nutritionPlan = response.data;

            var request = $http({
                method: "get",
                url: "/activities/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }
            });

            return( request.then( handleActivityPlanSuccess, handleError ) );
        }

        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleWeeklyNutritionPlanSuccess( response ) {

            weeklyDashboardData.weeklyNutritionPlan = response.data;

            return weeklyDashboardData;
        }

        function handleActivityPlanSuccess( response ) {

            dailyDashboardData.activityPlan = response.data;

            var request = $http({
                method: "get",
                url: "/body-stats/" + planDate + '/' + 1,
                params: {
                    action: "get"
                }
            });

            //return dailyDashboardData;
            return( request.then( handleBodystatsSuccess, handleError ) );
        }

        function handleBodystatsSuccess( response ) {
            dailyDashboardData.dailyBodyStats = response.data;

            return dailyDashboardData;
        }

        function handleGetDailyDashboardDataSuccess( response ) {
            dailyDashboardData.dailyBodyStats = response.data.dailyBodyStats;
            dailyDashboardData.nutritionPlan = response.data.nutritionPlan;
            dailyDashboardData.activityPlan = response.data.activityPlan;

            return dailyDashboardData;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);

angular.module('core').controller('HomeController', ['$scope', '$stateParams', 'Authentication', '$location',
    function($scope, $stateParams, Authentication, $location) {
        // This provides Authentication context.
        $scope.authentication = Authentication;

        if($scope.authentication.user){
            $location.path('/dashboard');
        }
    }
]);

















//Menu service used for managing  menus
angular.module('core').service('Menus', [function () {
    // Define a set of default roles
    this.defaultRoles = ['user', 'admin'];
    // Define the menus object
    this.menus = {};
    // A private function for rendering decision
    var shouldRender = function (user) {
        if (user) {
            for (var userRoleIndex in user.roles) {
                for (var roleIndex in this.roles) {
                    if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
                        return true;
                    }
                }
            }
        } else {
            return this.isPublic;
        }
        return false;
    };
    // Validate menu existance
    this.validateMenuExistance = function (menuId) {
        if (menuId && menuId.length) {
            if (this.menus[menuId]) {
                return true;
            } else {
                throw new Error('Menu does not exists');
            }
        } else {
            throw new Error('MenuId was not provided');
        }
        return false;
    };
    // Get the menu object by menu id
    this.getMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        return this.menus[menuId];
    };
    // Add new menu object by menu id
    this.addMenu = function (menuId, isPublic, roles) {
        // Create the new menu
        this.menus[menuId] = {
            isPublic: isPublic || false,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        };
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenu = function (menuId) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Return the menu object
        delete this.menus[menuId];
    };
    // Add menu item object
    this.addMenuItem = function (menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Push new menu item
        this.menus[menuId].items.push({
            title: menuItemTitle,
            link: menuItemURL,
            menuItemType: menuItemType || 'item',
            menuItemClass: menuItemType,
            uiRoute: menuItemUIRoute || '/' + menuItemURL,
            isPublic: isPublic || this.menus[menuId].isPublic,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        });
        // Return the menu object
        return this.menus[menuId];
    };
    // Add submenu item object
    this.addSubMenuItem = function (menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === rootMenuItemURL) {
                // Push new submenu item
                this.menus[menuId].items[itemIndex].items.push({
                    title: menuItemTitle,
                    link: menuItemURL,
                    uiRoute: menuItemUIRoute || '/' + menuItemURL,
                    isPublic: isPublic || this.menus[menuId].isPublic,
                    roles: roles || this.defaultRoles,
                    shouldRender: shouldRender
                });
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeMenuItem = function (menuId, menuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
                this.menus[menuId].items.splice(itemIndex, 1);
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    // Remove existing menu object by menu id
    this.removeSubMenuItem = function (menuId, submenuItemURL) {
        // Validate that the menu exists
        this.validateMenuExistance(menuId);
        // Search for menu item to remove
        for (var itemIndex in this.menus[menuId].items) {
            for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
                if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
                    this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
                }
            }
        }
        // Return the menu object
        return this.menus[menuId];
    };
    //Adding the topbar menu
    this.addMenu('topbar');
}]);'use strict';
// Config HTTP Error Handling
angular.module('users').config([
    '$httpProvider',
    function ($httpProvider) {
        // Set the httpProvider "not authorized" interceptor
        $httpProvider.interceptors.push([
            '$q',
            '$location',
            'Authentication',
            function ($q, $location, Authentication) {
                return {
                    responseError: function (rejection) {
                        switch (rejection.status) {
                            case 401:
                                // Deauthenticate the global user
                                Authentication.user = null;
                                // Redirect to signin page
                                $location.path('signin');
                                break;
                            case 403:
                                // Add unauthorized behaviour
                                break;
                        }
                        return $q.reject(rejection);
                    }
                };
            }
        ]);
    }
]);'use strict';
// Setting up route
angular.module('users').config([
    '$stateProvider',
    function ($stateProvider) {
        // Users state routing
        $stateProvider.state('profile', {
            url: '/settings/profile',
            templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
        }).state('password', {
            url: '/settings/password',
            templateUrl: 'modules/users/views/settings/change-password.client.view.html'
        }).state('accounts', {
            url: '/settings/accounts',
            templateUrl: 'modules/users/views/settings/social-accounts.client.view.html'
        }).state('signup', {
            url: '/signup',
            templateUrl: 'modules/users/views/signup.client.view.html'
        }).state('signin', {
            url: '/signin',
            templateUrl: 'modules/users/views/signin.client.view.html'
        });
    }
]);
'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication', 'UserDataFactory', 'NutritionProfile', 'NutritionProfileUtilities', 'NutritionProfileDialogService', '$modal',
    function($scope, $http, $location, Authentication, UserDataFactory, NutritionProfile, NutritionProfileUtilities, NutritionProfileDialogService, $modal) {
        window.scope = $scope;
        $scope.authentication = Authentication;

        $scope.nutritionProfile = {
            isAdvancedNutrientTargets: false,
            activityLevel: 0,
            deficitTarget: 500,
            proteinPercentageTarget: 20,
            carbohydratesPercentageTarget: 40,
            fatPercentageTarget: 40,
            templateMeals: [
                {id: 1, name: 'Breakfast'},
                {id: 2, name: 'Lunch'},
                {id: 3, name: 'Dinner'}
            ]
        };

        $scope.isAdvancedNutrientTargets = false;
        $scope.macrosRatioSelected = 0;
        $scope.nutrientTargetSettings = 'basic';
        $scope.isMacrosValid = true;

        $scope.credentials = {};

        $scope.userAuthenticated = true;

        $scope.macrosRatioChange = function(macrosRatioSelected){
            NutritionProfileUtilities.macrosRatioChange(macrosRatioSelected, $scope);
        };

        var initializeMacrosSelectList = function(){
            NutritionProfileUtilities.initializeMacrosSelectList($scope);
        };

        $scope.deleteTemplateMeal = function(templateMeal){
            if (confirm("Are you sure you want to delete this Meal?")) {
                for (var i in $scope.nutritionProfile.templateMeals) {
                    if ($scope.nutritionProfile.templateMeals[i] === templateMeal) {
                        $scope.nutritionProfile.templateMeals.splice(i, 1);
                    }
                }

                $scope.update();
            }
        };

        $scope.addMealToTemplateWithDialog = function(){
            var modalInstance = $modal.open({
                templateUrl: 'addMealToTemplateModalContent.html',
                controller: NutritionProfileDialogService.AddMealToTemplateInstanceCtrl,
                //size: size,
                resolve: {
                    parentScope: function () {
                        return $scope;
                    }
                }
            });

            modalInstance.result.then(function (mealToAddToTemplate) {
                $scope.nutritionProfile.templateMeals.push(mealToAddToTemplate);

                $scope.update();

            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.nutritionProfile.templateMeals.splice(end, 0,
                $scope.nutritionProfile.templateMeals.splice(start, 1)[0]);

            $scope.$apply();

            $scope.update();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };



        $scope.templateMeals = [
            {id: 1, name: 'Breakfast'},
            {id: 2, name: 'Lunch'},
            {id: 3, name: 'Dinner'}
        ];



        $scope.activityLevels = [
            {id: 0, name: 'Sedentary'},
            {id: 1, name: 'Lightly Active'},
            {id: 2, name: 'Moderately Active'},
            {id: 3, name: 'Very Active'},
            {id: 4, name: 'Extremely Active'}
        ];

        $scope.weeklyFatLossRate = [
            {id: 250, name: '0.5 Pounds Per Week'},
            {id: 500, name: '1 Pound Per Week'},
            {id: 1000, name: '2 Pounds Per Week'},
        ];

        $scope.macrosRatios = [
            {id: 0, name: '20/40/40 - Protein, Carbs, Fat'},
            {id: 1, name: '20/30/50 - Protein, Carbs, Fat'},
            {id: 2, name: 'Atkins Diet'},
            {id: 3, name: 'South Beach Diet'}
        ];

        $scope.sexOptions = [
            'Male',
            'Female'
        ];

        $scope.heightFeetOptions = [ 1, 2, 3, 4, 5, 6, 7, 8];
        $scope.heightInchesOptions = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];




        $scope.nutrientTargetSettingsChange = function(nutritionTargetSettings){
            NutritionProfileUtilities.nutrientTargetSettingsChange($scope, nutritionTargetSettings);

        };

        $scope.validateNutritionTargets = function(isUpdate, isBasicNutritionSettingsChangeTo){
            var isValid = NutritionProfileUtilities.validateNutritionTargets(isUpdate, isBasicNutritionSettingsChangeTo, $scope);

            return isValid;
        };

        $scope.isValid = true;
        $scope.macroChange = function(){
            $scope.isValid = $scope.validateNutritionTargets();


        };


        $scope.displaySection = 'userInfo';

        $scope.userAuthenticated = false;

        //If user is signed in then redirect back home
        if ($scope.authentication.user) $location.path('/');

        $scope.userInfoNext = function(){
            $scope.displaySection = 'bodyInfo';
        };


        $scope.bodyInfoNext = function(){
            $scope.displaySection = 'targets';
        };
        $scope.bodyInfoBack = function(){
            $scope.displaySection = 'userInfo';
        };

        $scope.targetsNext = function(){
            $scope.displaySection = 'mealsTemplate';
        };
        $scope.targetsBack = function(){
            $scope.displaySection = 'bodyInfo';
        };

        $scope.mealsTemplateBack = function(){
            $scope.displaySection = 'targets';
        };

        $scope.signup = function() {
            $scope.credentials.nutritionProfile = $scope.nutritionProfile;

            $http.post('/auth/signup', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;
                window.user = response;

                //$scope.nutritionProfile = NutritionProfile.get(function (data) {
                //UserDataFactory.setNutritionProfile = data;
                //   window.nutritionProfile = data;
                //    $scope.authentication.nutritionProfile = data;

                //And redirect to the index page
                //    $location.path('/dashboard');
                //});

                $location.path('/dashboard');


            }).error(function(response) {
                $scope.error = response.message;
            });
        };

        $scope.signin = function() {
            $http.post('/auth/signin', $scope.credentials).success(function(response) {
                //If successful we assign the response to the global user model
                $scope.authentication.user = response;
                window.user = response;

//                $scope.nutritionProfile = NutritionProfile.get(function (data) {
//                    //UserDataFactory.setNutritionProfile(data);
//                    window.nutritionProfile = data;
//                    $scope.authentication.nutritionProfile = data;
//
//                    //And redirect to the index page
//                    $location.path('/dashboard');
//                });

                $location.path('/dashboard');

            }).error(function(response) {
                $scope.error = response.message;
            });
        };

        initializeMacrosSelectList();
    }
]);
'use strict';

angular.module('users').controller('SettingsController', ['$scope', '$http', '$location', 'Users', 'Authentication',
    function($scope, $http, $location, Users, Authentication) {
        $scope.user = Authentication.user;

        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        // Check if there are additional accounts
        $scope.hasConnectedAdditionalSocialAccounts = function(provider) {
            for (var i in $scope.user.additionalProvidersData) {
                return true;
            }

            return false;
        };

        // Check if provider is already in use with current user
        $scope.isConnectedSocialAccount = function(provider) {
            return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);
        };

        // Remove a user social account
        $scope.removeUserSocialAccount = function(provider) {
            $scope.success = $scope.error = null;

            $http.delete('/users/accounts', {
                params: {
                    provider: provider
                }
            }).success(function(response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.user = Authentication.user = response;
            }).error(function(response) {
                $scope.error = response.message;
            });
        };

        // Update a user profile
        $scope.updateUserProfile = function() {
            $scope.success = $scope.error = null;
            var user = new Users($scope.user);

            user.$update(function(response) {
                $scope.success = true;
                Authentication.user = response;
                window.user = response;
            }, function(response) {
                $scope.error = response.data.message;
            });
        };

        // Change user password
        $scope.changeUserPassword = function() {
            $scope.success = $scope.error = null;

            $http.post('/users/password', $scope.passwordDetails).success(function(response) {
                // If successful show success message and clear form
                $scope.success = true;
                $scope.passwordDetails = null;
            }).error(function(response) {
                $scope.error = response.message;
            });
        };
    }
]);
// Authentication service for user variables
angular.module('users').factory('Authentication', [function () {
    var _this = this;
    _this._data = { user: window.user };
    return _this._data;
}]);'use strict';
// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', [
    '$resource',
    function ($resource) {
        return $resource('users', {}, { update: { method: 'PUT' } });
    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('foods').config(['$stateProvider',
    function($stateProvider) {
        // Foods state routing
        $stateProvider.
            state('listFoods', {
                url: '/foods',
                templateUrl: 'modules/foods/views/list-foods.client.view.html'
            }).
            state('createFood', {
                url: '/foods/create',
                templateUrl: 'modules/foods/views/create-food.client.view.html'
            }).
            state('viewFood', {
                url: '/foods/:foodId',
                templateUrl: 'modules/foods/views/view-food.client.view.html'
            }).
            state('editFood', {
                url: '/foods/:foodId/edit',
                templateUrl: 'modules/foods/views/edit-food.client.view.html'
            });
    }
]);

/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('foods').controller('FoodsParentContainerController', ['$scope', '$stateParams', '$location', 'Authentication', 'Foods', 'CoreUtilities',
    function($scope, $stateParams, $location, Authentication, Foods, CoreUtilities) {
        window.scope = $scope;


        $scope.selectedTab = 'myFoods';

        $scope.selectTab = function(tabName){
            $scope.selectedTab = tabName;
        };



    }
]);

/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('foods').controller('FoodsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Foods', 'CoreUtilities',
    function($scope, $stateParams, $location, Authentication, Foods, CoreUtilities) {
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        // $scope.authentication = Authentication;
        $scope.servings = 1;

        $scope.skipFoods = 0;

        $scope.successLoading = false;
        $scope.isLoading = false;

        $scope.selectedTab = 'allFoods';

        $scope.selectTab = function(tabName){
            $scope.selectedTab = tabName;
        };

        $scope.foodTypes = [
            {id: 1, type: 'Fruit'},
            {id: 2, type: 'Starch'},
            {id: 3, type: 'Meat'},
            {id: 4, type: 'Liquid'},
            {id: 5, type: 'Vegetable'},
            {id: 6, type: 'Dessert'},
            {id: 7, type: 'Yogurt'},
            {id: 8, type: 'Pizza'},
            {id: 9, type: 'Butter/Oil'},
            {id: 10, type: 'Tofu'},
            {id: 11, type: 'Beans'},
            {id: 12, type: 'Alcohol'},
            {id: 13, type: 'Nuts'}
        ];

        $scope.groceryStores = [
            {id: 1, store: 'Trader Joes'},
            {id: 2, store: 'Wholefoods'},
            {id: 3, store: 'Foodtown'}
        ];

        $scope.importFoodsFromExcel = function(){
            CoreUtilities.importFoodsFromExcel().then(function(){
                $scope.successLoading = true;
            });
        };

        $scope.foodFilterInput = '';

        $scope.foodInputChange = function(){
            $scope.isLoading = true;

            CoreUtilities.getFoods($scope.foodFilterInput, 0, false).then(function (data) {
                $scope.foods = data;
                $scope.isLoading = false;
            });
        };

        $scope.moreFoods = function(){
            $scope.isMoreLoading = true;
            $scope.skipFoods += 8;

            var filterTxt = $scope.foodFilterInput || 'null';

            CoreUtilities.getFoods(filterTxt, $scope.skipFoods, false).then(function (data) {
                for(var f = 0; f < data.length; f++){
                    $scope.foods.push(data[f]);
                }
                $scope.isMoreLoading = false;
            });
        };

        $scope.servingsChange = function(food){
            if ($scope.servings > 0) {
                food.gramsDisplay = $scope.servings * food.grams;
                food.caloriesDisplay = $scope.servings * food.calories;
                food.fatDisplay = $scope.servings * food.fat;
                food.saturatedFatDisplay = $scope.servings * food.saturatedFat;
                food.transfatDisplay = $scope.servings * food.transfat;
                food.cholesterolDisplay = $scope.servings * food.cholesterol;
                food.sodiumDisplay = $scope.servings * food.sodium;
                food.carbohydratesDisplay = $scope.servings * food.carbohydrates;
                food.fiberDisplay = $scope.servings * food.fiber;
                food.sugarDisplay = $scope.servings * food.sugar;
                food.proteinDisplay = $scope.servings * food.protein;
                food.vitaminADisplay = $scope.servings * food.vitaminA;
                food.vitaminCDisplay = $scope.servings * food.vitaminC;
                food.calciumDisplay = $scope.servings * food.calcium;
                food.ironDisplay = $scope.servings * food.iron;

                $scope.totalFatDailyPercentageDisplay = (food.fatDisplay / 65) * 100;
                $scope.saturatedFatDailyPercentageDisplay = (food.saturatedFatDisplay / 20) * 100;
                $scope.cholesterolDailyPercentageDisplay = (food.cholesterolDisplay / 300) * 100;
                $scope.sodiumDailyPercentageDisplay = (food.sodiumDisplay / 2400) * 100;
                $scope.totalCarbohydratesDailyPercentageDisplay = (food.carbohydratesDisplay / 300) * 100;
                $scope.fiberDailyPercentageDisplay = (food.fiberDisplay / 25) * 100;
            }

        };

        $scope.create = function() {
            var food = new Foods({
                foodToken: '-1',
                name: $scope.food.name,
                calories: $scope.food.calories,
                protein: $scope.food.protein,
                fat: $scope.food.fat,
                carbohydrates: $scope.food.carbohydrates,
                grams: $scope.food.grams,
                type: $scope.food.type,
                groceryStore: $scope.food.groceryStore,
                sodium: $scope.food.sodium,
                fiber: $scope.food.fiber,
                sugar: $scope.food.sugar,
                cholesterol: $scope.food.cholesterol,
                vitaminA: $scope.food.vitaminA,
                vitaminC: $scope.food.vitaminC,
                calcium: $scope.food.calcium,
                iron: $scope.food.iron,
                saturatedFat: $scope.food.saturatedFat,
                transfat: $scope.food.transfat,
                servingDescription1: $scope.food.servingDescription1,
                servingDescription2: $scope.food.servingDescription2,
                servingGrams2: $scope.food.servingGrams2
                //milliliters: $scope.milliliters
            });
            food.$save(function(response) {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            this.food.name = '';
            this.food.groceryStore = 0;
            this.food.sodium = '';
            this.food.saturatedFat = '';
            this.food.fiber = '';
            this.food.sugar = '';
            this.food.transfat = '';
            this.food.vitaminA = '';
            this.food.vitaminC = '';
            this.food.cholesterol = '';
            this.food.calcium = '';
            this.food.iron = '';
            this.food.calories = '';
            this.food.protein = '';
            this.food.fat = '';
            this.food.carbohydrates = '';
            this.food.grams = '';
            this.food.type = '';

            //this.milliliters = '';
        };

        $scope.update = function() {
            var food = $scope.food;

            if(!food.foodToken){
                food.foodToken = '-1';
            }

            food.$update(function() {
                $location.path('foods');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.remove = function(food) {
            if (confirm("Are you sure you want to delete this food?")) {
                if (food) {
                    food.$remove();

                    for (var i in $scope.foods) {
                        if ($scope.foods[i] === food) {
                            $scope.foods.splice(i, 1);
                        }
                    }
                } else {
                    $scope.food.$remove(function () {
                        $location.path('foods');
                    });
                }
            }
        };

        $scope.find = function() {
            $scope.isLoading = true;

            CoreUtilities.getFoods('null', 0).then(function (data) {
                $scope.foods = data;
                $scope.isLoading = false;
            });

            $scope.isUserAdmin = isUserAdmin();
        };

        var isUserAdmin = function(){
            return user.roles.indexOf('admin') !== -1 ? true : false;
        };

        $scope.findOne = function() {
            $scope.food = Foods.get({
                foodId: $stateParams.foodId
            },function(){
                $scope.isUserAdmin = isUserAdmin();

                $scope.calculateDailyPercentages($scope.food);

                if($scope.food.isImported){
                    $scope.food.vitaminA = ($scope.food.vitaminA / 900) * 100;
                    $scope.food.vitaminC = ($scope.food.vitaminC / 75)  * 100;
                    $scope.food.iron = ($scope.food.iron / 15) * 100;
                    $scope.food.calcium = ($scope.food.calcium / 1000) * 100;
                }

                $scope.food.gramsDisplay = $scope.food.grams;
                $scope.food.caloriesDisplay = $scope.food.calories;
                $scope.food.fatDisplay = $scope.food.fat;
                $scope.food.saturatedFatDisplay = $scope.food.saturatedFat;
                $scope.food.transfatDisplay = $scope.food.transfat;
                $scope.food.cholesterolDisplay = $scope.food.cholesterol;
                $scope.food.sodiumDisplay = $scope.food.sodium;
                $scope.food.carbohydratesDisplay = $scope.food.carbohydrates;
                $scope.food.fiberDisplay = $scope.food.fiber;
                $scope.food.sugarDisplay = $scope.food.sugar;
                $scope.food.proteinDisplay = $scope.food.protein;
                $scope.food.vitaminADisplay = $scope.food.vitaminA;
                $scope.food.vitaminCDisplay = $scope.food.vitaminC;
                $scope.food.calciumDisplay = $scope.food.calcium;
                $scope.food.ironDisplay = $scope.food.iron;
                $scope.food.type = parseInt($scope.food.type) >= 0 ? parseInt($scope.food.type) : 0;
                $scope.food.typeDisplay = $scope.foodTypes[$scope.food.type].type;
                $scope.food.servingDescription1Display = $scope.food.servingDescription1;
                $scope.food.servingDescription2Display = $scope.food.servingDescription2;
                $scope.food.servingGrams2Display = $scope.food.servingGrams2;


                $scope.totalFatDailyPercentageDisplay = $scope.totalFatDailyPercentage;
                $scope.saturatedFatDailyPercentageDisplay = $scope.saturatedFatDailyPercentage;
                $scope.cholesterolDailyPercentageDisplay = $scope.cholesterolDailyPercentage;
                $scope.sodiumDailyPercentageDisplay = $scope.sodiumDailyPercentage;
                $scope.totalCarbohydratesDailyPercentageDisplay = $scope.totalCarbohydratesDailyPercentage;
                $scope.fiberDailyPercentageDisplay = $scope.fiberDailyPercentage;

                showDailyMacrosChart();


            });
        };

        $scope.calculateDailyPercentages = function(food) {
            $scope.totalFatDailyPercentage = (food.fat / 65) * 100;
            $scope.saturatedFatDailyPercentage = (food.saturatedFat / 20) * 100;
            $scope.cholesterolDailyPercentage = (food.cholesterol / 300) * 100;
            $scope.sodiumDailyPercentage = (food.sodium / 2400) * 100;
            $scope.totalCarbohydratesDailyPercentage = (food.carbohydrates / 300) * 100;
            $scope.fiberDailyPercentage = (food.fiber / 25) * 100;
        };

        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#macrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.food.proteinDisplay);
            config.data.json.carbs = parseInt($scope.food.carbohydratesDisplay);
            config.data.json.fat = parseInt($scope.food.fatDisplay);
            config.axis = {"y":{"label":{"text":"Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 280, height: 280};
            $scope.chart = c3.generate(config);
        };

    }
]);
/**
 * Created by jason on 8/10/14.
 */
'use strict';

//Foods service used for communicating with the foods REST endpoints
angular.module('foods').factory('Foods', ['$resource',
    function($resource) {
        return $resource('foods/:foodId', {
            foodId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);


/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('nutritionProfile');


/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Nutrition Profile service used for communicating with the Nutrition Profile REST endpoint
angular.module('nutritionProfile').factory('NutritionProfile', ['$resource',
    function($resource) {

        return $resource('nutritionProfile', {
            // nutritionProfileId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });

    }
]);


/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('nutritionProfile').config(['$stateProvider',
    function($stateProvider) {
        // nutritionProfile state routing
        $stateProvider.
            state('listNutritionProfile', {
                url: '/nutritionProfile',
                templateUrl: 'modules/nutrition-profile/views/edit-nutritionProfile.client.view.html'
            }).
            state('nutritionTargets', {
                url: '/nutritionProfile/nutrientTargets',
                templateUrl: 'modules/nutrition-profile/views/nutritionTargets.client.view.html'
            }).
            state('bodyInfo', {
                url: '/nutritionProfile/bodyInfo',
                templateUrl: 'modules/nutrition-profile/views/bodyInfo.client.view.html'
            }).
            state('mealsTemplate', {
                url: '/nutritionProfile/mealsTemplate',
                templateUrl: 'modules/nutrition-profile/views/mealsTemplate.client.view.html'
            }).
            state('customizations', {
                url: '/nutritionProfile/customizations',
                templateUrl: 'modules/nutrition-profile/views/customizations.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('plans').service(
    "NutritionProfileDialogService",
    function( $http, $q ) {

        // Return public API.
        return({
            AddMealToTemplateInstanceCtrl: AddMealToTemplateInstanceCtrl
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function AddMealToTemplateInstanceCtrl($scope, $modalInstance){
            $scope.mealsDict = [
                {id: 1, name: 'Breakfast'},
                {id: 2, name: 'Lunch'},
                {id: 3, name: 'Dinner'},
                {id: 4, name: 'Snack'}
            ];

            $scope.selectedMealForTemplate = 3;

            $scope.selected = {
                selectedMealForTemplate: $scope.selectedMealForTemplate
            };



            $scope.ok = function () {
                var selectedModel = $scope.mealsDict[$scope.selected.selectedMealForTemplate - 1];

                $modalInstance.close(selectedModel);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };


        };



    }
);


/**
 * Created by jason on 9/4/14.
 */
/**
 * Created by jason on 8/10/14.
 */

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module(ApplicationConfiguration.applicationModuleName).service(
    "NutritionProfileUtilities",
    function( $http, $q, $timeout ) {

        // Return public API.
        return({

            nutrientTargetSettingsChange: nutrientTargetSettingsChange,
            validateNutritionTargets: validateNutritionTargets,
            macrosRatioChange: macrosRatioChange,
            initializeMacrosSelectList: initializeMacrosSelectList
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function macrosRatioChange(macrosRatioSelected, $scope){
            switch(macrosRatioSelected){
                //20/40/40 - Protein, Carbs, Fat
                case 0:
                    $scope.nutritionProfile.proteinPercentageTarget = 20;
                    $scope.nutritionProfile.carbohydratesPercentageTarget = 40;
                    $scope.nutritionProfile.fatPercentageTarget = 40;
                    break;
                //20/30/50 - Protein, Carbs, Fat
                case 1:
                    $scope.nutritionProfile.proteinPercentageTarget = 20;
                    $scope.nutritionProfile.carbohydratesPercentageTarget = 30;
                    $scope.nutritionProfile.fatPercentageTarget = 50;
                    break;
                //Atkins Diet
                case 2:
                    $scope.nutritionProfile.proteinPercentageTarget = 42;
                    $scope.nutritionProfile.carbohydratesPercentageTarget = 15;
                    $scope.nutritionProfile.fatPercentageTarget = 43;
                    break;
                //South Beach Diet
                case 3:
                    $scope.nutritionProfile.proteinPercentageTarget = 30;
                    $scope.nutritionProfile.carbohydratesPercentageTarget = 40;
                    $scope.nutritionProfile.fatPercentageTarget = 30;
                    break;
            }
        };

        function initializeMacrosSelectList($scope){
            if($scope.nutritionProfile.proteinPercentageTarget == 20 &&
                $scope.nutritionProfile.carbohydratesPercentageTarget == 40 &&
                $scope.nutritionProfile.fatPercentageTarget == 40){
                $scope.macrosRatioSelected = 0;
            }
            else if($scope.nutritionProfile.proteinPercentageTarget == 20 &&
                $scope.nutritionProfile.carbohydratesPercentageTarget == 30 &&
                $scope.nutritionProfile.fatPercentageTarget == 50){
                $scope.macrosRatioSelected = 1;
            }
            else if($scope.nutritionProfile.proteinPercentageTarget == 42 &&
                $scope.nutritionProfile.carbohydratesPercentageTarget == 15 &&
                $scope.nutritionProfile.fatPercentageTarget == 43){
                $scope.macrosRatioSelected = 2;
            }
            else{
                $scope.macrosRatioSelected = 3;
            }
        };


        function initializeBasicNutritionSettings($scope){

            $scope.nutritionProfile.deficitTarget = 500;
            $scope.nutritionProfile.isAdvancedNutrientTargets = false;
            $scope.nutritionProfile.activityLevel = 0;
            $scope.macrosRatioSelected = 0;

            $scope.nutritionProfile.proteinPercentageTarget = 20;
            $scope.nutritionProfile.carbohydratesPercentageTarget = 40;
            $scope.nutritionProfile.fatPercentageTarget = 40;
        };

        function nutrientTargetSettingsChange($scope, nutritionTargetSettings){
            if(nutritionTargetSettings === 'advanced'){
                $scope.nutritionProfile.isAdvancedNutrientTargets = true;
            }
            else{
                initializeBasicNutritionSettings($scope);

                $scope.validateNutritionTargets(false, true);
            }

            if($scope.update) {
                $scope.update();
            }
        };

        function validateNutritionTargets(isUpdate, isBasicNutritionSettingsChangeTo, $scope){
            if($scope.nutritionProfile.isAdvancedNutrientTargets || isBasicNutritionSettingsChangeTo) {
                if (parseFloat($scope.nutritionProfile.proteinPercentageTarget) + parseFloat($scope.nutritionProfile.carbohydratesPercentageTarget) +
                    parseFloat($scope.nutritionProfile.fatPercentageTarget) !== 100) {
                    $scope.isMacrosValid = false;

                    return false;
                }
                $scope.isMacrosValid = true;

                if (!isUpdate) {
                    $scope.isMacrosChangeValid = true;
                    $timeout(function () {
                        $scope.isMacrosChangeValid = false;
                    }, 3000);
                }
            }

            return true;
        };


        function handleSuccess( response ) {

            //dailyDashboardData.activityPlan = response.data;

            // return dailyDashboardData;

            return response.data;
        }


        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);
/**
 * Created by jason on 9/4/14.
 */
/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('nutritionProfile').controller('NutritionProfileController', ['$scope', '$stateParams', '$location', 'Authentication', 'NutritionProfile', '$timeout', '$modal', 'NutritionProfileDialogService', 'Users', 'NutritionProfileUtilities',
    function($scope, $stateParams, $location, Authentication, NutritionProfile, $timeout, $modal, NutritionProfileDialogService, Users, NutritionProfileUtilities) {
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.isAdvancedNutrientTargets = false;
        $scope.macrosRatioSelected = 0;
        $scope.nutrientTargetSettings = 'basic';
        $scope.isMacrosValid = true;

        $scope.userAuthenticated = true;

        $scope.templateMeals = [
            {id: 1, name: 'Breakfast'},
            {id: 2, name: 'Lunch'},
            {id: 3, name: 'Dinner'}
        ];

        $scope.activityLevels = [
            {id: 0, name: 'Sedentary'},
            {id: 1, name: 'Lightly Active'},
            {id: 2, name: 'Moderately Active'},
            {id: 3, name: 'Very Active'},
            {id: 4, name: 'Extremely Active'}
        ];

        $scope.weeklyFatLossRate = [
            {id: 250, name: '0.5 Pounds Per Week'},
            {id: 500, name: '1 Pound Per Week'},
            {id: 1000, name: '2 Pounds Per Week'},
        ];

        $scope.macrosRatios = [
            {id: 0, name: '20/40/40 - Protein, Carbs, Fat'},
            {id: 1, name: '20/30/50 - Protein, Carbs, Fat'},
            {id: 2, name: 'Atkins Diet'},
            {id: 3, name: 'South Beach Diet'}
        ];

        $scope.sexOptions = [
            'Male',
            'Female'
        ];

        $scope.heightFeetOptions = [ 1, 2, 3, 4, 5, 6, 7, 8];
        $scope.heightInchesOptions = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];


        $scope.nutritionProfileParameters = {
            showSubmitButton: true
        };

        $scope.nutrientTargetSettingsChange = function(nutritionTargetSettings){
            NutritionProfileUtilities.nutrientTargetSettingsChange($scope, nutritionTargetSettings);
        };

        $scope.macrosRatioChange = function(macrosRatioSelected){
            NutritionProfileUtilities.macrosRatioChange(macrosRatioSelected, $scope);

            $scope.update();
        };

        $scope.macroChange = function(){
            var isValid = $scope.validateNutritionTargets();

            if(isValid) {
                $scope.update();
            }
        };

        $scope.validateNutritionTargets = function(isUpdate, isBasicNutritionSettingsChangeTo){
            var isValid = NutritionProfileUtilities.validateNutritionTargets(isUpdate, isBasicNutritionSettingsChangeTo, $scope);

            return isValid;
        };

        $scope.update = function() {
            if(window.user) {
                $scope.isMacrosValid = $scope.validateNutritionTargets(true);

                if ($scope.isMacrosValid) {
                    var nutritionProfile = $scope.nutritionProfile;

                    if (window.user) {
                        var userToSave = new Users(window.user);

                        userToSave.nutritionProfile = nutritionProfile;

                        userToSave.$update(function (data) {
                            $scope.nutritionProfile = data.nutritionProfile;
                            Authentication.user = user;
                            Authentication.user.nutritionProfile = data.nutritionProfile;
                            window.user = user;
                            $scope.success = true;

                            $timeout(function () {
                                $scope.success = false;
                            }, 3000);
                        }, function (errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    }
                }
            }

        };

        var initializeMacrosSelectList = function(){
            NutritionProfileUtilities.initializeMacrosSelectList($scope);
        };

        $scope.findOne = function () {
            if(window.user) {
                $scope.nutritionProfile = window.user.nutritionProfile;

                //if(!$scope.nutritionProfile){
                //$scope.nutritionProfile = {};
                //initializeBasicNutritionSettings();
                //}


                if (!$scope.nutritionProfile.templateMeals || $scope.nutritionProfile.templateMeals.length == 0) {
                    $scope.nutritionProfile.templateMeals = [];

                    for (var m = 0; m < $scope.templateMeals.length; m++) {
                        $scope.nutritionProfile.templateMeals.push($scope.templateMeals[m]);
                    }
                }

                if (!$scope.nutritionProfile.isAdvancedNutrientTargets) {
                    $scope.nutritionProfile.isAdvancedNutrientTargets = false;
                    $scope.nutrientTargetSettings = 'basic';

                    if (!$scope.nutritionProfile.activityLevel && $scope.nutritionProfile.activityLevel !== 0) {
                        $scope.nutritionProfile.activityLevel = 0;
                    }

                    if (!$scope.nutritionProfile.deficitTarget) {
                        $scope.nutritionProfile.deficitTarget = 500;
                    }

                    //initialize macros select list selection
                    initializeMacrosSelectList();
                }
                else {
                    $scope.nutrientTargetSettings = 'advanced';
                }
            }
        };

        $scope.deleteTemplateMeal = function(templateMeal){
            if (confirm("Are you sure you want to delete this Meal?")) {
                for (var i in $scope.nutritionProfile.templateMeals) {
                    if ($scope.nutritionProfile.templateMeals[i] === templateMeal) {
                        $scope.nutritionProfile.templateMeals.splice(i, 1);
                    }
                }

                $scope.update();
            }
        };

        $scope.addMealToTemplateWithDialog = function(){
            var modalInstance = $modal.open({
                templateUrl: 'addMealToTemplateModalContent.html',
                controller: NutritionProfileDialogService.AddMealToTemplateInstanceCtrl,
                //size: size,
                resolve: {
                    parentScope: function () {
                        return $scope;
                    }
                }
            });

            modalInstance.result.then(function (mealToAddToTemplate) {
                $scope.nutritionProfile.templateMeals.push(mealToAddToTemplate);

                $scope.update();

            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.sortableStartCallback = function(e, ui) {
            ui.item.data('start', ui.item.index());
        };
        $scope.sortableUpdateCallback = function(e, ui) {
            var start = ui.item.data('start'),
                end = ui.item.index();

            $scope.nutritionProfile.templateMeals.splice(end, 0,
                $scope.nutritionProfile.templateMeals.splice(start, 1)[0]);

            $scope.$apply();

            $scope.update();
        };

        $scope.sortableOptions = {
            start: $scope.sortableStartCallback,
            update: $scope.sortableUpdateCallback
        };


    }
]);
'use strict';


/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('manageUserItems');



/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Setting up route
angular.module('manageUserItems').config(['$stateProvider',
    function($stateProvider) {
        // nutritionProfile state routing
        $stateProvider.
            state('listManageUserItems', {
                url: '/manageUserItems',
                templateUrl: 'modules/manageUserItems/views/edit-manageUserItems.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/4/14.
 */
/**
 * Created by jason on 8/10/14.
 */
'use strict';

// Nutrition Profile service used for communicating with the Nutrition Profile REST endpoint
angular.module('manageUserItems').factory('ManageUserItems', ['$resource',
    function($resource) {

        return $resource('manageUserItems', {
            // nutritionProfileId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });

    }
]);


/**
 * Created by jason on 9/4/14.
 */
/**
 * Created by jason on 8/10/14.
 */
'use strict';

angular.module('manageUserItems').controller('ManageUserItemsController', ['$scope', '$stateParams', 'Authentication', '$timeout', 'CoreUtilities', 'ManageUserItems', '$location',
    function($scope, $stateParams, Authentication, $timeout, CoreUtilities, ManageUserItems, $location) {
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.isLoading = false;
        $scope.skipFoods = 0;
        $scope.foodSearchTxt = '';
        $scope.userFoodsDisplay = [];

        $scope.update = function(isDelete) {
            var userFoods = $scope.userFoodsModel;

            userFoods.$save(function () {
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);

                if(isDelete){
                    $location.path('foods');
                }
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.foodInputChange = function(){
            $scope.userFoodsDisplay = CoreUtilities.filterMyFoods(false, $scope.userFoodsModel.userFoods, $scope.foodSearchTxt, $scope.skipFoods);

        };

        $scope.clearFoodInput = function(){
            $scope.foodSearchTxt = '';

            $scope.userFoodsDisplay = [];

            for(var f = 0; f < $scope.userFoodsModel.userFoods.length; f++){
                $scope.userFoodsDisplay.push($scope.userFoodsModel.userFoods[f]);
            }
        };

        $scope.deleteFood = function(food){
            if (confirm("Are you sure you want to delete this food in your My Foods list?")) {
                //remove food from all user foods
                for (var i in $scope.userFoodsModel.userFoods) {
                    if ($scope.userFoodsModel.userFoods[i] === food) {
                        $scope.userFoodsModel.userFoods.splice(i, 1);
                    }
                }

                //remove food from user foods displayed on screen currently
                for (var i in $scope.userFoodsDisplay) {
                    if ($scope.userFoodsDisplay[i] === food) {
                        $scope.userFoodsDisplay.splice(i, 1);
                    }
                }

                $scope.update(true);
            }
        };

        $scope.findOne = function () {
            $scope.isLoading = true;

            $scope.userFoodsModel = ManageUserItems.get({
                userId: user ? user._id : null
            }, function (data) {
                for(var f = 0; f < data.userFoods.length; f++){
                    $scope.userFoodsDisplay.push(data.userFoods[f]);
                }

                $scope.isLoading = false;


            });

        };



    }
]);
// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('activities');

/**
 * Created by jason on 9/8/14.
 */
// Configuring the Articles module
angular.module('activities').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        //Menus.addMenuItem('topbar', 'Activities', 'activities', 'dropdown', '/activities(/create)?');
        //Menus.addMenuItem('topbar', 'Activities', 'activities', '/activities');
        Menus.addMenuItem('topbar', 'Log', 'plans/nav', '/plans/nav');
        Menus.addMenuItem('topbar', 'Foods Database', 'foods', '/foods');
        // Menus.addSubMenuItem('topbar', 'activities', 'List Activities', 'activities');
        //Menus.addSubMenuItem('topbar', 'activities', 'New Activity', 'activities/create');
    }
]);

// Configuring the Articles module
angular.module('foods').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        // Menus.addMenuItem('topbar', 'Foods', 'foods', 'dropdown', '/foods(/create)?');
        //Menus.addMenuItem('topbar', 'Foods Database', 'foods', '/foods');
        // Menus.addSubMenuItem('topbar', 'foods', 'List Foods', 'foods');
        //Menus.addSubMenuItem('topbar', 'foods', 'New Food', 'foods/create');
    }
]);

/**
 * Created by jason on 9/8/14.
 */

'use strict';

// Setting up route
angular.module('activities').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listActivities', {
                url: '/activities',
                templateUrl: 'modules/activities/views/list-activities.client.view.html'
            }).
            state('createActivity', {
                url: '/activities/create',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('createActivity2', {
                url: '/activities/create/:planDateForCreate',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
            state('viewActivity', {
                url: '/activities/:activityId',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            }).
//            state('editActivity', {
//                url: '/activities/:activityId/edit',
//                templateUrl: 'modules/activities/views/edit-activity.client.view.html'
//            }).
            state('navActivity', {
                url: '/activities/nav/:planDateAsConcat',
                templateUrl: 'modules/activities/views/edit-nav-activity.client.view.html'
            }).
            state('viewActivityWithHistory', {
                url: '/activities/nav/:planDateAsConcat/:isHistory',
                templateUrl: 'modules/activities/views/edit-nav-activity.client.view.html'
            }).
            state('viewActivityForDate', {
                url: '/activities/:planDate/:planDateChangeDirection/:dayRange',
                templateUrl: 'modules/activities/views/view-activity.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/9/14.
 */

'use strict';

//Activities service used for communicating with the activities REST endpoints
angular.module('activities').factory('Activities', ['$resource',
    function($resource) {
        return $resource('activities/:activityId', {
            activityId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

/**
 * Created by jason on 9/12/14.
 */
// I act a repository for the remote friend collection.
angular.module('plans').service(
    "ActivitiesDialogService",
    function( $http, $q ) {

        // Return public API.
        return({
            CreateExerciseInstanceCtrl: CreateExerciseInstanceCtrl,
            CreateInjuriesInstanceCtrl: CreateInjuriesInstanceCtrl,
            NotesModalInstanceCtrl: NotesModalInstanceCtrl,
            StepsModalInstanceCtrl: StepsModalInstanceCtrl
        });


        // ---
        // PUBLIC METHODS.
        // ---

        function StepsModalInstanceCtrl($scope, $modalInstance, parentScope, dailySteps) {
            $scope.notesToSave = null;
            $scope.parentScope = parentScope;
            $scope.dailySteps = dailySteps;

            $scope.selected = {
                dailySteps: $scope.dailySteps
            };

            $scope.ok = function () {
                $modalInstance.close($scope.selected.dailySteps);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };

        function NotesModalInstanceCtrl($scope, $modalInstance, parentScope, planNotes) {
            $scope.notesToSave = null;
            $scope.parentScope = parentScope;
            $scope.notesToSave = planNotes;

            $scope.selected = {
                notesToSave: $scope.notesToSave
            };

            $scope.ok = function () {
                $modalInstance.close($scope.selected.notesToSave);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };

        function CreateInjuriesInstanceCtrl($scope, $modalInstance, injury){
            $scope.painLevelList = [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
            ];

            $scope.selectedPainLevel = $scope.painLevelList[0];
            $scope.injuryNotes = '';
            $scope.injuryLocation = '';

            $scope.selected = {
                painLevel: $scope.selectedPainLevel,
                injuryNotes: $scope.injuryNotes,
                injuryLocation: $scope.injuryLocation,
                isUpdate: injury ? true : false,

            };

            if(injury){
                $scope.selected.painLevel = injury.painLevel;
                $scope.selected.injuryNotes = injury.injuryNotes;
                $scope.selected.injuryLocation = injury.injuryLocation;
                $scope.selected._id = injury._id;
            }

            $scope.ok = function () {
                $modalInstance.close($scope.selected);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };

        function CreateExerciseInstanceCtrl($scope, $modalInstance, parentScope, activityTypes, activityTypesDictionary, activity, dailySteps, showExerciseDetailsImmediately, hideDailyStepsSection) {
            $scope.intensityList = [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
            ];

            $scope.parentScope = parentScope;
            $scope.activityTypes = activityTypes;
            $scope.activityTypesDictionary = activityTypesDictionary;
            $scope.selectedActivityType = activityTypes[0];
            $scope.newActivity = activity ? activity : {};
            $scope.activitySearchTxt = '';
            $scope.dailySteps = dailySteps ? dailySteps : null;
            $scope.hideDailyStepsSection = hideDailyStepsSection;
            $scope.sectionToDisplay = dailySteps ? 'dailySteps' : false;

            $scope.isActivityEndurance = function(activity){
                if(activity) {
                    var activityTypeId = activity.activityType || activity.id;

                    var type = $scope.activityTypesDictionary[activityTypeId].type;

                    return type === 0;
                }
            };

            $scope.selected = {
                activity: $scope.newActivity,
                dailySteps: $scope.dailySteps,
                activitySearchTxt: $scope.activitySearchTxt,
                sectionToSave: $scope.sectionToDisplay
            };

            if(dailySteps){
                $scope.sectionToDisplay = 'dailySteps';
                $scope.selected.activity.isUpdate = false;
            }
            else if(activity){
                $scope.sectionToDisplay = 'exerciseDetails';
                $scope.newActivity.isUpdate = true;
                $scope.selectedActivityType = activityTypesDictionary[activity.activityType];
                $scope.selected.activity.isCardio = $scope.isActivityEndurance(activity);
            }
            else if (showExerciseDetailsImmediately){
                $scope.sectionToDisplay = 'exercises';
                $scope.newActivity.isUpdate = false;

            }
            else{
                $scope.sectionToDisplay = 'categories';
                $scope.selected.activity.isUpdate = false;
            }





            $scope.activitiesNav = function(){
                $scope.sectionToDisplay = 'categories';
            };

            $scope.dailyStepsSelected = function(){
                $scope.sectionToDisplay = 'dailySteps';
            };

            $scope.exercisesSelected = function(){
                $scope.sectionToDisplay = 'exercises';
            };

//            $scope.changeActivity = function(activity){
//                if(activity) {
//                    $scope.sectionToDisplay = 'exercises';
//                }
//                else{
//                    $scope.sectionToDisplay = 'categories';
//                }
//            };



//            if(activity){
//                $scope.showActivityDetails = true;
//                $scope.newActivity.isUpdate = true;
//                $scope.selectedActivityType = activityTypesDictionary[activity.activityType];
//                $scope.selected.activity.isCardio = $scope.isActivityEndurance(activity);
//            }
//            else{
//                $scope.showActivityDetails = false;
//                $scope.selected.activity.isUpdate = false;
//            }

            $scope.isActivityDistanceRelated = function(activity){
                var activityTypeId = activity.activityType;

                var type = $scope.activityTypesDictionary[activityTypeId].name;

                return type === 'Running' || type === 'Walking';
            };

            $scope.activityInputChange = function(){

            };

            $scope.activitySelectionChange = function(activity){
                $scope.selected.activity.id = activity.id;
                $scope.selected.activity.activityType = activity.id;
                $scope.selectedActivityType = activity;
                $scope.sectionToDisplay = 'exerciseDetails';

                $scope.selected.activity.isCardio = $scope.isActivityEndurance(activity);
            };



            $scope.ok = function () {
//                if($scope.sectionToDisplay == 'dailySteps'){
//                    $modalInstance.close($scope.selected.dailySteps);
//                }
//                else if($scope.sectionToDisplay == 'exerciseDetails'){
//                    $modalInstance.close($scope.selected.activity);
//                }

                $modalInstance.close($scope.selected);
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        };






        // ---
        // PRIVATE METHODS.
        // ---


        // I transform the successful response, unwrapping the application data
        // from the API response payload.
        function handleActivityByDateSuccess( response ) {

            return response.data;
        }




        // I transform the error response, unwrapping the application dta from
        // the API response payload.
        function handleError( response ) {

            // The API response from the server should be returned in a
            // nomralized format. However, if the request was not handled by the
            // server (or what not handles properly - ex. server error), then we
            // may have to normalize it on our end, as best we can.
            if (
                ! angular.isObject( response.data ) ||
                ! response.data.message
                ) {

                return( $q.reject( "An unknown error occurred." ) );

            }

            // Otherwise, use expected error message.
            return( $q.reject( response.data.message ) );

        }


    }
);

/**
 * Created by jason on 9/8/14.
 */

'use strict';

angular.module('activities').controller('ActivitiesController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'Activities', 'NutritionProfile', '$modal', 'ActivitiesDialogService', 'CoreUtilities',
    function($scope, $stateParams, $timeout, $location, Authentication, Activities, NutritionProfile, $modal, ActivitiesDialogService, CoreUtilities) {
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.showPlanEditableErrorMsg = false;

        $scope.showInjuriesSection = false;
        // $scope.showNotesSection = true;
        $scope.dailyStepsEntered = false;
        $scope.injuriesVisible = false;
        $scope.isLoading = false;
        $scope.logNavPillSelected = 'activities';

        $scope.authentication = Authentication;


        $scope.activityTypeCategories = [
            'Endurance', 'Strength', 'Balance', 'Flexibility', 'DailySteps'
        ];

        $scope.getMobilePlanDateFormat = function(){
            return CoreUtilities.getMobilePlanDateFormat($scope);
        };



        $scope.planExistsInDb = false;
        // $scope.planDateParam = $routeParams.planDateForCreate;


        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'},
            {id: 33, type: 4, name: 'Daily Steps'}

        ];

        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.environments = [
            {id: 0, name: 'Outdoors'},
            {id: 1, name: 'Indoors'}
        ];



        $scope.directionList = ['Ascending', 'Descending'];

//        $scope.activityFieldsList = ['planDate', 'steps', 'weight', 'duration', 'distance', 'averageHeartRate',
//            'activityType', 'averageSpeed', 'intensity', ];

        $scope.selectedDirection = 'Descending';

        $scope.calculateTotalCaloriesBurned = function(){
            var total = 0;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];
                var calories = activity.caloriesBurned;

                total += calories;
            }

            if($scope.plan.dailySteps > 0) {
                var stepsCaloriesBurned = calculateCaloriesForSteps($scope.plan.dailySteps);

                $scope.plan.dailyStepsCaloriesBurned = stepsCaloriesBurned;

                total += stepsCaloriesBurned;
            }

            $scope.plan.totalCaloriesBurned = total || 0;
        };

        var calculateCaloriesForSteps = function(steps){
            if(steps > 0){
                var weight = $scope.nutritionProfile.weight;

                var caloriesBurnedInMile = 0.57 * weight;
                var stepsInMiles = steps / 2000;

                var caloriesBurned = stepsInMiles * caloriesBurnedInMile;

                return caloriesBurned;
            }
        };

        //formulate for calculating calories burned for men:
        // [(Age x 0.2017) — (Weight x 0.09036) + (Heart Rate x 0.6309) — 55.0969] x Time / 4.184.
        //formulate for calculating calories burned for women:
        // [(Age x 0.074) — (Weight x 0.05741) + (Heart Rate x 0.4472) — 20.4022] x Time / 4.184.
        $scope.calculateCalories = function(activity){
            var age = $scope.nutritionProfile.age;
            var weight = $scope.nutritionProfile.weight;
            var heightFeet = $scope.nutritionProfile.heightFeet;
            var heightInches = $scope.nutritionProfile.heightInches;
            var totalHeight = (heightFeet * 12) + heightInches;
            var gender = $scope.nutritionProfile.sex;

            var averageHeartRate = parseInt(activity.averageHeartRate);
            var duration = parseInt(activity.duration);

            var caloriesBurned = 0;

            if(duration > 0) {
                if (!averageHeartRate){
                    averageHeartRate = 120;
                }

                if (gender === 'Male') {
                    caloriesBurned = (((age * 0.2017) - (weight * 0.09036) + (averageHeartRate * 0.6309) - 55.0969) * duration) / 4.184;
                }
                else {
                    caloriesBurned = (((age * 0.074) - (weight * 0.05741) + (averageHeartRate * 0.4472) - 20.4022) * duration) / 4.184;

                }
            }
            else{
                if(!averageHeartRate || averageHeartRate <= 0){
                    caloriesBurned = calculateCaloriesForSteps(activity.steps);
                }
            }

            activity.caloriesBurned = caloriesBurned;

            $scope.calculateTotalCaloriesBurned();
        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.dailyStepsChange = function(){
            $scope.calculateTotalCaloriesBurned();

            $scope.saveActivityPlan();
        };



        $scope.create = function() {
            var planDateAsString = new Date($scope.plan.planDateNonUtc);
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            var planDateYear = planDateYear;
            var planDateMonth = planDateMonth;
            var planDateDay = planDateDay;

            var plan = new Activities({
                planDateForDB: planDateAsString,
                planDateAsMili: planDate.getTime(),
                planDateAsConcat: parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay)),
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                totalCaloriesBurned: $scope.plan.totalCaloriesBurned,
                activities: $scope.plan.activities,
                notes: $scope.plan.notes,
                notesVisible: $scope.plan.notesVisible,
                injuries: $scope.plan.injuries,
                dailySteps: parseInt($scope.plan.dailySteps),
                dailyStepsCaloriesBurned: $scope.plan.dailyStepsCaloriesBurned
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = response.planDateAsMili;
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.totalCaloriesBurned = 0;
            $scope.plan.activities = [];
        };

        $scope.copyPlan = function(planCopyModel){
            var plan = new Activities({
                planDate: planCopyModel.planDate,
                activities: planCopyModel.activities
            });
            plan.$save(function(response) {
                $location.path('activities/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.deleteActivity = function(activity){
            if (confirm("Are you sure you want to delete this activity?")) {
                for (var i in $scope.plan.activities) {
                    if ($scope.plan.activities[i] === activity) {
                        $scope.plan.activities.splice(i, 1);
                    }
                }

                $scope.saveActivityPlan();
            }
        };

        $scope.deleteInjury = function(injury){
            if (confirm("Are you sure you want to delete this injury?")) {
                for (var i in $scope.plan.injuries) {
                    if ($scope.plan.injuries[i] === injury) {
                        $scope.plan.injuries.splice(i, 1);
                    }
                }

                $scope.saveActivityPlan();
            }
        };

        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.activities) {
                    if ($scope.activities[i] === plan) {
                        $scope.activities.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('activities');
                });
            }
        };

        $scope.saveActivityPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            for(var i = 0; i < $scope.plan.activities.length; i++){
                var activity = $scope.plan.activities[i];

                activity.isEditable = false;

                var isStrengthActivity = $scope.activityTypesDictionary[activity.activityType].type === 1;

                if (isStrengthActivity){
                    activity.steps = 0;
                    activity.averageSpeed = 0;
                    activity.distance = 0;
                }
            }

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('activities');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc).toUTCString();
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;

            plan.dailySteps = parseInt($scope.plan.dailySteps);
            // plan.totalCaloriesBurned = plan.totalCaloriesBurned;
            //plan.dailyStepsCaloriesBurned = plan.dailyStepsCaloriesBurned;
            plan.planDateAsMili = planDate.getTime();
            plan.planDateAsConcat = parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));

            plan.$update(function(response) {
                plan.planDateNonUtc = new Date(plan.planDateYear, plan.planDateMonth, plan.planDateDay);
                $scope.planExistsInDb = false;
                $scope.success = true;

                $timeout(function () {
                    $scope.success = false;
                }, 3000);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            $scope.isLoading = true;
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());
            $scope.navPillSelected = 'history';

            $scope.activities = Activities.query(
                function(u, getResponseHeaders)
                {
                    $scope.isLoading = false;


                }
            );


        };

        $scope.getLocationsForInjuries = function(activity){
            var injuryLocationsTxt = '';

            for(var i = 0; i < activity.injuries.length; i++){
                var activityInjury = activity.injuries[i];

                if(activityInjury.injuryLocation){
                    if(i == 0){
                        injuryLocationsTxt = injuryLocationsTxt + '(' + activityInjury.injuryLocation;

                    }

                    else {
                        injuryLocationsTxt = injuryLocationsTxt + ', ' + activityInjury.injuryLocation;
                    }
                }
            }

            if(injuryLocationsTxt.length > 0){
                injuryLocationsTxt = injuryLocationsTxt + ')';
            }

            return injuryLocationsTxt;
        };

        var scrollToBottom = function(){
            $("html, body").animate({ scrollTop: $(document).height() }, 1000);
            $("#content").animate({ scrollTop: $('#content').height() + 700 }, 1000);
        };

        //todo: put in service
        var getPlanDateAsConcat = function(planDateYear, planDateMonth, planDateDay){
            planDateYear = parseInt(planDateYear);
            planDateMonth = parseInt(planDateMonth);
            planDateDay = parseInt(planDateDay);

            return parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));
        };

        var processNewPlan = function(year, month, day, suppressAutoSave){
            if($stateParams.planDateForCreate) {
                var planDateForCreate = $stateParams.planDateForCreate;

                year = planDateForCreate.substr(0, 4);
                month = planDateForCreate.substr(4, 2);
                day = planDateForCreate.substr(6, 2);

                $stateParams.planDateForCreate = "";
            }

            if(!year && !month && !day){
                var now = new Date();
                year = now.getFullYear();
                month = now.getMonth();
                day = now.getDate();
            }

            $scope.plan =  {data: null, activities: null, planDate: new Date(year, month, day), planDateNonUtc: new Date(year, month, day), planDateYear: year, planDateMonth: month, planDateDay: day, planDateAsConcat: getPlanDateAsConcat(year, month, day)};
            $scope.plan.activities = [];
            $scope.plan.notesVisible = false;
            $scope.plan.injuriesVisible = false;

            $scope.nutritionProfile = window.user.nutritionProfile;

            //$scope.nutritionProfile = NutritionProfile.get(function () {
//                $scope.calculateTotalCaloriesBurned();
//
//                if(!suppressAutoSave) {
//                    $scope.saveActivityPlan();
//                }
            //});

            $scope.calculateTotalCaloriesBurned();

            if(!suppressAutoSave) {
                $scope.saveActivityPlan();
            }

            if(localStorage.tour_current_step && !localStorage.tour_end) {
                tour.goTo(15);
            }
        };

        var processReturnedPlan = function(){
            $scope.plan.planDateNonUtc = new Date($scope.plan.planDateYear, $scope.plan.planDateMonth, $scope.plan.planDateDay);

            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();

            var now = new Date();

            if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                $scope.navPillSelected = 'today';
            }
            else{
                $scope.navPillSelected = 'history';
            }


            $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

            if($scope.plan.injuries && $scope.plan.injuries.length > 0){
                $scope.injuriesVisible = true;
                $scope.showInjuriesSection = true;
            }

            $scope.calculateTotalCaloriesBurned();
        };

        var getPlanFromDb = function(year, month, day, planDateAsConcat, suppressAutoSave){
            $scope.isLoading = true;

            $scope.nutritionProfile = window.user.nutritionProfile;

            if(planDateAsConcat){
                $scope.plan = Activities.get({
                    activityId: planDateAsConcat
                },function(plan){
                    if(!plan || (plan && !plan.planDateYear)) {
                        processNewPlan(year, month, day, suppressAutoSave);
                    }
                    processReturnedPlan();
                });
            }
            else if ($stateParams.activityId) {
                $scope.plan = Activities.get({
                    activityId: $stateParams.activityId
                }, function () {
                    processReturnedPlan();
                });
            }
            else if($stateParams.planDateForCreate){
                processNewPlan(year, month, day);
            }
            else{
                processNewPlan();
            }

            $scope.isLoading = false;
        };

        $scope.planInputChange = function(planDateInput){
            var year = planDateInput.getFullYear();
            var month = planDateInput.getMonth();
            var day = planDateInput.getDate();

            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            window.location = '#!/activities/nav/' + planDateAsConcat + '/true';

            $scope.opened = false;
        };

        $scope.toggleDayClick = function(direction){
            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();

            var planDate = new Date(year, month, day);

            if(direction == 'nextDay'){
                planDate = new Date(planDate.setDate(planDate.getDate() + 1));
            }
            else{
                planDate = new Date(planDate.setDate(planDate.getDate() - 1));
            }

            year = planDate.getFullYear();
            month = planDate.getMonth();
            day = planDate.getDate();

            $scope.plan.planDateNonUtc = new Date(year, month, day);

            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            getPlanFromDb(year, month, day, planDateAsConcat, true);
        };



        $scope.findOne = function() {
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());

            if ($stateParams.activityId) {
                getPlanFromDb();
            }
            else{
                processNewPlan();
            }

            $scope.isExercisesOpen = true;
        };

        $scope.getDesktopPlanDateFormat = function(){
            return CoreUtilities.getDesktopPlanDateFormat($scope);
        };

        $scope.findOneForNav = function(){
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());

            if ($stateParams.planDateAsConcat) {
                var planDateAsConcat = $stateParams.planDateAsConcat;
                var year = planDateAsConcat.substr(0, 4);
                var month = planDateAsConcat.substr(4, 2);
                var day = planDateAsConcat.substr(6, 2);

                var planDate = new Date(year, month, day);

                year = planDate.getFullYear();
                month = planDate.getMonth();
                day = planDate.getDate();

                if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                    $scope.navPillSelected = 'today';
                }
                else{
                    $scope.navPillSelected = 'history';
                }

                getPlanFromDb(year, month, day, planDateAsConcat, true);
            }

            $scope.isExercisesOpen = true;
        };

        $scope.createInjuryWithDialog = function(injury){

            var modalInstance = $modal.open({
                templateUrl: 'createInjuriesModalContent.html',
                controller: ActivitiesDialogService.CreateInjuriesInstanceCtrl,
                resolve: {
                    injury: function(){
                        return injury;
                    }
                }
            });

            modalInstance.result.then(function (selected) {
                var injuryModel = {
                    painLevel: selected.painLevel,
                    injuryNotes: selected.injuryNotes,
                    injuryLocation: selected.injuryLocation
                };

                if(selected.isUpdate){
                    for(var i = 0; i < $scope.plan.injuries.length; i++){
                        if($scope.plan.injuries[i]._id == selected._id){
                            var injuryToUpdate = $scope.plan.injuries[i];

                            injuryToUpdate.painLevel = injuryModel.painLevel;
                            injuryToUpdate.injuryNotes = injuryModel.injuryNotes;
                            injuryToUpdate.injuryLocation = injuryModel.injuryLocation;
                        }
                    }
                }
                else {
                    $scope.plan.injuries.push(injuryModel);
                }

                $scope.injuriesVisible = true;

                $scope.saveActivityPlan();
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.updateInjury = function(injury){
            $scope.createInjuryWithDialog(injury);
        };

        $scope.addInjury = function(){
            $scope.createInjuryWithDialog();
        };

        $scope.createInjuries = function(){
            $scope.showInjuriesSection = true;
            $scope.injuriesVisible = true;

            $scope.createInjuryWithDialog();
        };

        $scope.openNotesDialog = function () {
            var modalInstance = $modal.open({
                templateUrl: 'notesModalContent.html',
                controller: ActivitiesDialogService.NotesModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    planNotes: function(){
                        return $scope.plan.notes
                    }
                }
            });

            modalInstance.result.then(function (notesToSave) {
                $scope.plan.notes = notesToSave;
                $scope.saveActivityPlan();
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.createActivityWithDialog = function(activity, dailySteps, showExerciseDetailsImmediately){
            var modalInstance = $modal.open({
                templateUrl: 'createExerciseModalContent.html',
                controller: ActivitiesDialogService.CreateExerciseInstanceCtrl,
                //size: size,
                resolve: {
                    activity: function(){
                        return activity
                    },
                    activityTypes: function () {
                        return $scope.activityTypes;
                    },
                    activityTypesDictionary: function () {
                        return $scope.activityTypesDictionary;
                    },
                    dailySteps: function () {
                        return dailySteps;
                    },
                    parentScope: function () {
                        return $scope;
                    },
                    showExerciseDetailsImmediately: function(){
                        return showExerciseDetailsImmediately;
                    },
                    hideDailyStepsSection: function(){
                        return $scope.plan.dailySteps > 0;
                    }
                }
            });

            modalInstance.result.then(function (selected) {
                if(selected.dailySteps){
                    $scope.plan.dailySteps = selected.dailySteps;
                    $scope.calculateTotalCaloriesBurned();
                    $scope.saveActivityPlan();
                }
                else{
                    var newActivityModel = selected.activity;
                    if(newActivityModel.isUpdate){
                        for(var i = 0; i < $scope.plan.activities.length; i++){
                            if($scope.plan.activities[i]._id == newActivityModel._id){
                                $scope.plan.activities[i] = newActivityModel;
                            }
                        }
                    }
                    else {
                        $scope.plan.activities.push(newActivityModel);
                    }

                    $scope.calculateCalories(newActivityModel);

                    $scope.saveActivityPlan();
                }
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };


        $scope.openStepsDialog = function () {
            var modalInstance = $modal.open({
                templateUrl: 'stepsModalContent.html',
                controller: ActivitiesDialogService.StepsModalInstanceCtrl,

                resolve: {
                    parentScope: function () {
                        return $scope;
                    },
                    dailySteps: function(){
                        return $scope.plan.dailySteps
                    }
                }
            });

            modalInstance.result.then(function (dailySteps) {
                $scope.plan.dailySteps = dailySteps;
                $scope.calculateTotalCaloriesBurned();
                $scope.saveActivityPlan();
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        //sorting code
        // data
        $scope.orderByField = 'planDateAsConcat';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('bodyStats');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('bodyStats').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        //Menus.addMenuItem('topbar', 'Body Stats', 'bodyStats', 'dropdown', '/body-stats(/create)?');
       // Menus.addMenuItem('topbar', 'Body Stats', 'body-stats', '/body-stats');
        //Menus.addSubMenuItem('topbar', 'bodyStats', 'List Body Stats', 'body-stats');
        //Menus.addSubMenuItem('topbar', 'bodyStats', 'New Body Stat', 'body-stats/create');
    }
]);
/**
 * Created by jason on 9/19/14.
 */
'use strict';

// Setting up route
angular.module('bodyStats').config(['$stateProvider',
    function($stateProvider) {
        // Activities state routing
        $stateProvider.
            state('listBodyStats', {
                url: '/body-stats',
                templateUrl: 'modules/body-stats/views/list-body-stats.client.view.html'
            }).
            state('createBodyStat', {
                url: '/body-stats/create',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('createBodyStat2', {
                url: '/body-stats/create/:planDateForCreate',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).

            state('viewBodyStat', {
                url: '/body-stats/:bodyStatId',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            }).
            state('navWeight', {
                url: '/body-stats/nav/:planDateAsConcat',
                templateUrl: 'modules/body-stats/views/edit-nav-body-stats.client.view.html'
            }).
            state('viewWeightWithHistory', {
                url: '/body-stats/nav/:planDateAsConcat/:isHistory',
                templateUrl: 'modules/body-stats/views/edit-nav-body-stats.client.view.html'
            }).
            state('viewBodyStatForDate', {
                url: '/body-stats/:planDate/:planDateChangeDirection/:dayRange',
                templateUrl: 'modules/body-stats/views/view-body-stat.client.view.html'
            });
    }
]);

/**
 * Created by jason on 9/19/14.
 */

'use strict';

//Body Stats service used for communicating with the body stats REST endpoints
angular.module('bodyStats').factory('BodyStats', ['$resource',
    function($resource) {
        return $resource('body-stats/:bodyStatId', {
            bodyStatId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

/**
 * Created by jason on 9/19/14.
 */
'use strict';

angular.module('bodyStats').controller('BodyStatsController', ['$scope', '$stateParams', '$timeout', '$location', 'Authentication', 'BodyStats', 'CoreUtilities',
    function($scope, $stateParams, $timeout, $location, Authentication, BodyStats, CoreUtilities) {
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.showPlanEditableErrorMsg = false;
        $scope.logNavPillSelected = 'weight';

        $scope.authentication = Authentication;


        $scope.directionList = ['Ascending', 'Descending'];
        $scope.selectedDirection = 'Descending';

        $scope.getMobilePlanDateFormat = function(){
            return CoreUtilities.getMobilePlanDateFormat($scope);
        };

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        $scope.getDesktopPlanDateFormat = function(){
            return CoreUtilities.getDesktopPlanDateFormat($scope);
        };

        $scope.create = function() {
//            var planDateAsString = $scope.plan.planDateNonUtc.toUTCString();
//            var planDate = new Date(planDateAsString);
//
//            var planSplit = planDate.toISOString().substr(0, 10).split('-');
//            var planDateYear = parseInt(planSplit[0]);
//            var planDateMonth = parseInt(planSplit[1]) - 1;
//            var planDateDay = parseInt(planSplit[2]);
            var planDateAsString = new Date($scope.plan.planDateNonUtc);
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            var planDateYear = planDateYear;
            var planDateMonth = planDateMonth;
            var planDateDay = planDateDay;

            var plan = new BodyStats({
                planDateForDB: planDateAsString,
                planDateYear: planDateYear,
                planDateMonth: planDateMonth,
                planDateDay: planDateDay,
                planDateAsMili: planDate.getTime(),
                planDateAsConcat: parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay)),
                weight: $scope.plan.weight,
                bodyFatPercentage: $scope.plan.bodyFatPercentage
            });
            plan.$save(function(response) {
                plan.planDateNonUtc = new Date($scope.plan.planDateYear, $scope.plan.planDateMonth, $scope.plan.planDateDay)
                $location.path('body-stats/' + response._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });

            $scope.plan.planDate = '';
            $scope.plan.bodyFatPercentage = 0;
            $scope.plan.weight = 0;
        };


        $scope.remove = function(plan) {
            if (plan) {
                plan.$remove();

                for (var i in $scope.bodyStats) {
                    if ($scope.bodyStats[i] === plan) {
                        $scope.bodyStats.splice(i, 1);
                    }
                }
            } else {
                $scope.plan.$remove(function() {
                    $location.path('body-stats');
                });
            }
        };

        $scope.saveBodyStatPlan = function(){
            $scope.showPlanEditableErrorMsg = false;

            if (!$scope.plan._id){
                $scope.create();
            }
            else{
                $scope.update();
            }

        };

        $scope.deletePlan = function(plan){
            if (confirm("Are you sure you want to delete this plan?")) {
                plan.$delete(function () {
                    console.log("plan deleted");
                    $location.path('body-stats');
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.update = function() {
            var plan = $scope.plan;

            var planDateAsString = new Date($scope.plan.planDateNonUtc);
            var planDate = new Date(planDateAsString);
            var planDateToSave = new Date($scope.plan.planDateNonUtc);
            var planDateYear = planDateToSave.getFullYear();
            var planDateMonth = planDateToSave.getMonth();
            var planDateDay = planDateToSave.getDate();

            plan.planDateYear = planDateYear;
            plan.planDateMonth = planDateMonth;
            plan.planDateDay = planDateDay;

            plan.planDateAsMili = planDate.getTime();
            plan.planDateAsConcat = parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));
            plan.weight = plan.weight;
            plan.bodyFatPercentage = plan.bodyFatPercentage;

            plan.$update(function(response) {
                plan.planDateNonUtc = new Date(plan.planDateYear, plan.planDateMonth, plan.planDateDay);
                $scope.success = true;

                $timeout(function(){$scope.success = false;}, 3000);


            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.find = function() {
            var now = new Date();

            $scope.navPillSelected = 'history';

            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());

            $scope.bodyStats = BodyStats.query(
                function(u, getResponseHeaders)
                {

                }
            );
        };

        var getPlanDateAsConcat = function(planDateYear, planDateMonth, planDateDay){
            planDateYear = parseInt(planDateYear);
            planDateMonth = parseInt(planDateMonth);
            planDateDay = parseInt(planDateDay);

            return parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));
        };

        var processReturnedPlan = function(){
            var now = new Date();

            $scope.plan.planDateNonUtc = new Date($scope.plan.planDateYear, $scope.plan.planDateMonth, $scope.plan.planDateDay);

            $scope.isUserAdmin = $scope.plan.userRoles && $scope.plan.userRoles.indexOf('admin') !== -1 ? true : false;

            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();

            if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                $scope.navPillSelected = 'today';
            }
            else{
                $scope.navPillSelected = 'history';
            }
        };

        var processNewPlan = function(dateYear, dateMonth, dateDay, suppressAutoSave){
            if($stateParams.planDateForCreate) {
                var planDateForCreate = $stateParams.planDateForCreate;

                dateYear = planDateForCreate.substr(0, 4);
                dateMonth = planDateForCreate.substr(4, 2);
                dateDay = planDateForCreate.substr(6, 2);
            }
            else if(!dateYear && !dateMonth && !dateDay){
                var now = new Date();
                dateYear = now.getFullYear();
                dateMonth = now.getMonth();
                dateDay = now.getDate();
            }

            $scope.plan =  {weight: null, bodyFatPercentage: null, planDate: new Date(dateYear, dateMonth, dateDay), planDateNonUtc: new Date(dateYear, dateMonth, dateDay), planDateYear: dateYear, planDateMonth: dateMonth, planDateDay: dateDay, planDateAsConcat: getPlanDateAsConcat(dateYear, dateMonth, dateDay)};

            if(!suppressAutoSave) {
                $scope.saveBodyStatPlan();
            }
            //if(localStorage.tour_current_step && !localStorage.tour_end) {
            //    tour.goTo(15);
            //}
        };

        var getPlanFromDb = function(year, month, day, planDateAsConcat, suppressAutoSave){
            $scope.isLoading = true;

            if(planDateAsConcat){
                $scope.plan = BodyStats.get({
                    bodyStatId: planDateAsConcat
                },function(plan){
                    if(!plan || (plan && !plan.planDateYear)) {
                        processNewPlan(year, month, day, suppressAutoSave);
                    }
                    processReturnedPlan();
                });
            }
            else if ($stateParams.bodyStatId) {
                $scope.plan = BodyStats.get({
                    bodyStatId: $stateParams.bodyStatId
                }, function () {
                    processReturnedPlan();
                });
            }
            else if($stateParams.planDateForCreate){
                processNewPlan(year, month, day);
            }
            else{
                processNewPlan();
            }

            $scope.isLoading = false;

        };

        $scope.planInputChange = function(planDateInput){
            var year = planDateInput.getFullYear();
            var month = planDateInput.getMonth();
            var day = planDateInput.getDate();

            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            window.location = '#!/body-stats/nav/' + planDateAsConcat + '/true';

            $scope.opened = false;
        };

        $scope.toggleDayClick = function(direction){
            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();

            var planDate = new Date(year, month, day);

            if(direction == 'nextDay'){
                planDate = new Date(planDate.setDate(planDate.getDate() + 1));
            }
            else{
                planDate = new Date(planDate.setDate(planDate.getDate() - 1));
            }

            year = planDate.getFullYear();
            month = planDate.getMonth();
            day = planDate.getDate();

            $scope.plan.planDateNonUtc = new Date(year, month, day);

            //todo: put this in service
            var planDateAsConcat = getPlanDateAsConcat(year, month, day);

            getPlanFromDb(year, month, day, planDateAsConcat, true);
        };

        $scope.findOne = function() {
            var now = new Date();

            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());

            if ($stateParams.bodyStatId) {
                $scope.plan = BodyStats.get({
                    bodyStatId: $stateParams.bodyStatId
                }, function (u, getResponseHeaders) {
                    processReturnedPlan();
                });
            }
            else{
                processNewPlan();
            }
        };


        $scope.findNavOne = function(){
            var now = new Date();
            $scope.todayDateAsConcat = getPlanDateAsConcat(now.getFullYear(), now.getMonth(), now.getDate());

            var planDateAsConcat = $stateParams.planDateAsConcat;
            var year = planDateAsConcat.substr(0, 4);
            var month = planDateAsConcat.substr(4, 2);
            var day = planDateAsConcat.substr(6, 2);

            var planDate = new Date(year, month, day);

            var year = planDate.getFullYear();
            var month = planDate.getMonth();
            var day = planDate.getDate();

            if(year === now.getFullYear() && month === now.getMonth() && day === now.getDate()){
                $scope.navPillSelected = 'today';
            }
            else{
                $scope.navPillSelected = 'history';
            }

            $scope.plan = BodyStats.get({
                bodyStatId: planDateAsConcat
            },function(plan){
                if(!plan || (plan && !plan.planDateYear)) {
                    processNewPlan(year, month, day, true);
                }
                processReturnedPlan();
            });
        };



        //sorting code
        // data
        $scope.orderByField = 'planDateAsConcat';
        $scope.reverseSort = true;
        scope.plansCollection = [];



    }
]);
/**
 * Created by jason on 9/4/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('progress');

/**
 * Created by jason on 9/19/14.
 */
// Configuring the Body module
angular.module('progress').run(['Menus',
    function(Menus) {
        // Set top bar menu items
        Menus.addMenuItem('topbar', 'Progress', 'progress', '/progress');
        // Menus.addSubMenuItem('topbar', 'progress', 'Show Progress', 'progress');
        //Menus.addSubMenuItem('topbar', 'progress', 'New Body Stat', 'body-stats/create');
    }
]);

'use strict';

// Setting up route
angular.module('progress').config(['$stateProvider',
    function($stateProvider) {
        // progress state routing
        $stateProvider.
            state('listProgress', {
                url: '/progress',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('createProgress', {
                url: '/progress/create',
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('viewProgress', {
                url: '/progress/:progressId',
                //templateUrl: 'modules/progress/views/view-progress.client.view.html'
                templateUrl: 'modules/progress/views/view-progress.client.view.html'
            }).
            state('editProgress', {
                url: '/progress/:progressId/edit',
                //templateUrl: 'modules/progress/views/edit-progress.client.view.html'
                templateUrl: 'modules/progress/views/create-progress.client.view.html'
            });
    }
]);

'use strict';

//progress service used for communicating with the progress REST endpoints
angular.module('progress').factory('Progress', ['$resource',
    function($resource) {
        return $resource('progress/:progressId', {
            progressId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]);

'use strict';

angular.module('progress').controller('ProgressController', ['$scope', '$stateParams', '$location', 'Authentication', 'Progress', 'BodyStats',
    function($scope, $stateParams, $location, Authentication, Progress, BodyStats) {
        window.scope = $scope;

        $scope.authentication = Authentication;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.isLoading = false;

        $scope.durationList = [
            {value: 1, text: '1 Month'},
            {value: 3, text: '3 Months'},
            {value: 6, text: '6 Months'},
            {value: 9, text: '9 Months'},
            {value: 12, text: '1 Year'},

        ];

        $scope.endDate = new Date();
        $scope.startDate = new Date();

        $scope.selectedDurationChange = function(){
            var selectedDuration = $scope.selectedDuration;
            var now = new Date();

            //get last day of current month
            $scope.endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);

            //calculate number of months back from current month
            $scope.startDate = new Date(now.getFullYear(), now.getMonth() - selectedDuration, 1);
        };

        $scope.selectedDuration = $scope.durationList[0].value;
        $scope.selectedDurationChange();

        $scope.openStartDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.startDateOpened = true;
        };

        $scope.openEndDate = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.endDateOpened = true;
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');



        $scope.find = function() {
            $scope.isLoading = true;
            var startDateFormatted = $scope.startDate.getFullYear() + '_' + $scope.startDate.getMonth() + '_' + $scope.startDate.getDate();
            var endDateFormatted = $scope.endDate.getFullYear() + '_' + $scope.endDate.getMonth() + '_' + $scope.endDate.getDate();

            $scope.progress = Progress.query({
                    startDate: startDateFormatted,
                    endDate: endDateFormatted
                },
                function(u, getResponseHeaders)
                {
                    var plans = u;

                    BodyStats.query({
                            startDate: startDateFormatted,
                            endDate: endDateFormatted
                        },
                        function(u, getResponseHeaders)
                        {
                            var bodyStats = u;

                            getChartData(plans, bodyStats);
                            $scope.isLoading = false;
                        });
                }
            );
        };

        var getWeightListForPlan = function(bodyStats, plan){
            var isPlanWeightMatchFound = false;
            var bodyStatsNonZeroList = [];
            var weightList = [];

            for(var b = 0; b < bodyStats.length; b++){
                var bodyStatFromDb = bodyStats[b];

                if (plan.planDateYear == bodyStatFromDb.planDateYear &&
                    plan.planDateMonth == bodyStatFromDb.planDateMonth &&
                    plan.planDateDay == bodyStatFromDb.planDateDay) {

                    bodyStatsNonZeroList.push(bodyStatFromDb.weight);

                    weightList.push(bodyStatFromDb.weight);

                    isPlanWeightMatchFound = true;
                }

            }

            if(!isPlanWeightMatchFound){
                var mostRecentWeight;

                if(bodyStatsNonZeroList.length > 0) {
                    mostRecentWeight = bodyStatsNonZeroList[bodyStatsNonZeroList.length - 1];
                }
                else{
                    mostRecentWeight = bodyStats[0].weight;
                }

                weightList.push(mostRecentWeight);

                bodyStatsNonZeroList.push(mostRecentWeight);
            }

            return weightList;
        };

        var getChartData = function(plans, bodyStats) {
            var fatList = [];
            var carbsList = [];
            var proteinList = [];
            var caloriesList = [];
            var dateListCalories = [];
            var dateListDeficit = [];
            var dateListMacros = [];
            var dateListWeight = [];
            var deficitList = [];
            var weightListForMacros = [];
            var weightListForCalories = [];
            var weightListForDeficit = [];
            var weightListForWeight = [];

            for(var i = 0; i < plans.length; i++){
                var dayItem = plans[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                proteinList.push(parseInt(dayItem.totalPlanProteinAsPercent));
                carbsList.push(parseInt(dayItem.totalPlanCarbsAsPercent));
                fatList.push(parseInt(dayItem.totalPlanFatAsPercent));
                caloriesList.push(parseInt(dayItem.totalPlanCalories));
                deficitList.push(parseInt(dayItem.deficit));
                dateListCalories.push(dayDate);
                dateListDeficit.push(dayDate);
                dateListMacros.push(dayDate);


                var planWeightList = getWeightListForPlan(bodyStats, dayItem, true);

                weightListForMacros.push(planWeightList);
                weightListForCalories.push(planWeightList);
                weightListForDeficit.push(planWeightList);

            }

            for(var w = 0; w < bodyStats.length; w++){
                var bodyStatItem = bodyStats[w];

                weightListForWeight.push(bodyStatItem.weight);

                var dayDate = bodyStatItem.planDateYear + '-' + (bodyStatItem.planDateMonth + 1) + '-' + bodyStatItem.planDateDay;

                dateListWeight.push(dayDate);
            }

            var macrosModel = {proteinList: proteinList, carbsList: carbsList, fatList: fatList, datesList: dateListMacros, weightList: weightListForMacros};

            bindMacrosChart(macrosModel);

            var caloriesModel = {caloriesList: caloriesList, datesList: dateListCalories, weightList: weightListForCalories};

            bindCaloriesChart(caloriesModel);

            var deficitModel = {deficitList: deficitList, datesList: dateListDeficit, weightList: weightListForDeficit};

            bindDeficitChart(deficitModel);

            var weightModel = {datesList: dateListWeight, weightList: weightListForWeight};

            bindWeightChart(weightModel);
        };

        var bindDeficitChart = function(deficit){
            var configDeficit = {};
            configDeficit.bindto = '#deficitChart';

            var tickCount = deficit.datesList.length;

            if(deficit.datesList.length >= 7){
                tickCount = 7;
            }

            deficit.deficitList.splice(0, 0, "Deficit");
            deficit.weightList.splice(0, 0, "Weight");
            deficit.datesList.splice(0, 0, "x");

            configDeficit.data = {
                x: 'x',
                columns: [
                    deficit.datesList,
                    deficit.deficitList,
                    deficit.weightList
                ]
            };

            configDeficit.axis = {
                "x":
                {
                    type: 'timeseries',
                    tick: {
                        count: tickCount,
                        format: '%Y-%m-%d'
                    }
                },
                "y":
                {
                    "label":
                    {
                        "text":"Deficit",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };

            configDeficit.data.axes = {
                Deficit: 'y',
                Weight: 'y2'
            };

            configDeficit.data.types={"Deficit":"line","Weight":"line"};
            configDeficit.size = {width: 1000, height: 220};
            $scope.deficitChart = c3.generate(configDeficit);
        };

        var bindCaloriesChart = function(calories){
            var configCalories = {};
            configCalories.bindto = '#caloriesChart';
            configCalories.data = {};

            calories.caloriesList.splice(0, 0, "Calories");
            calories.weightList.splice(0, 0, "Weight");
            calories.datesList.splice(0, 0, "x");

            var tickCount = calories.datesList.length;

            if(calories.datesList.length >= 7){
                tickCount = 7;
            }

            configCalories.data = {
                x: 'x',
                columns: [
                    calories.datesList,
                    calories.caloriesList,
                    calories.weightList
                ]
            };


            configCalories.axis = {
                "x":
                {
                    type: 'timeseries',
                    tick: {
                        count: tickCount,
                        format: '%Y-%m-%d'
                    }
                },
                "y":
                {
                    "label":
                    {
                        "text":"Calories",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };

            configCalories.data.axes = {
                Calories: 'y',
                Weight: 'y2'
            };

            configCalories.data.types={"Calories":"line","Weight":"line"};
            configCalories.size = {width: 1000, height: 220};
            $scope.caloriesChart = c3.generate(configCalories);
        };

        var bindMacrosChart = function(macros){
            var configMacros = {};
            configMacros.bindto = '#macrosChart';
            configMacros.data = {};

            macros.proteinList.splice(0, 0, "Protein");
            macros.weightList.splice(0, 0, "Weight");
            macros.carbsList.splice(0, 0, "Carbs");
            macros.fatList.splice(0, 0, "Fat");
            macros.datesList.splice(0, 0, "x");

            var tickCount = macros.datesList.length;

            if(macros.datesList.length >= 7){
                tickCount = 7;
            }



            configMacros.data = {
                x: 'x',
                columns: [
                    macros.datesList,
                    macros.proteinList,
                    macros.carbsList,
                    macros.fatList,
                    macros.weightList
                ]
            };

            configMacros.axis = {
                "x":
                {
                    type: 'timeseries',
                    tick: {
                        count: tickCount,
                        format: '%Y-%m-%d'
                    }
                },
                "y":
                {
                    "label":
                    {
                        "text":"Macros",
                        "position":"outer-middle"
                    }
                },
                "y2": {
                    show: true,
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };
            configMacros.data.axes = {
                Protein: 'y',
                Carbs: 'y',
                Fat: 'y',
                Weight: 'y2'
            };
            configMacros.data.types={"Protein":"line", "Carbs": "line", "Fat": "line","Weight":"line"};
            configMacros.size = {width: 1000, height: 220};
            $scope.macrosChart = c3.generate(configMacros);
        };

        var bindWeightChart = function(weight){
            var config = {};
            config.bindto = '#weightChart';
            config.data = {};

            var tickCount = weight.weightList.length;

            if(weight.weightList.length >= 7){
                tickCount = 7;
            }

            weight.weightList.splice(0, 0, "Weight");
            weight.datesList.splice(0, 0, "x");



            config.data = {
                x: 'x',
                columns: [
                    weight.datesList,
                    weight.weightList
                ]
            };

            config.axis = {
                "x":
                {
                    type: 'timeseries',
                    tick: {
                        count: tickCount,
                        format: '%Y-%m-%d'
                    }

                },
                "y":
                {
                    "label":
                    {
                        "text":"Weight (lbs)",
                        "position":"outer-middle"
                    }
                }
            };

            config.data.types={"Weight":"line"};
            config.size = {width: 955, height: 220};
            $scope.weightChart = c3.generate(config);
        };

    }
]);

/**
 * Created by jason on 9/8/14.
 */
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('dashboard');

'use strict';

// Setting up route
angular.module('dashboard').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        // Redirect to home view when route not found
        $urlRouterProvider.otherwise('/');

        // Home state routing
        $stateProvider.
            state('dashboard', {
                url: '/dashboard',
                templateUrl: 'modules/dashboard/views/dashboard.client.view.html'
            }).
            state('dashboardForDate', {
                url: '/dashboard/:dashboardDate',
                templateUrl: 'modules/dashboard/views/dashboard.client.view.html'
            });
    }
]);

'use strict';


angular.module('dashboard').controller('DashboardController', ['$scope', '$stateParams', 'Authentication', 'Activities', 'CoreService', 'NutritionProfile', 'Progress', 'ThermometerChartService', '$modal', 'CoreDialogsService', '$location', 'CoreUtilities', 'Users',
    function($scope, $stateParams, Authentication, Activities, CoreService, NutritionProfile, Progress, ThermometerChartService, $modal, CoreDialogsService, $location, CoreUtilities, Users) {
        // This provides Authentication context.
        $scope.authentication = Authentication;
        window.scope = $scope;

        $scope.user = Authentication.user;

        $scope.user = user;
        // If user is not signed in then redirect back home
        if (!$scope.user) $location.path('/');

        $scope.plan = {};
        $scope.isDailyDashboardLoading = false;
        $scope.isWeeklyDashboardLoading = false;

        var additionalCaloriesExpended = 300;
        $scope.activityPlan = null;
        $scope.nutritionPlan = null;

        $scope.nutritionProfile = window.user.nutritionProfile;

        $scope.nutritionProfileParameters = {
            showSubmitButton: false
        };

        var startTour = function(){
            $scope.openTourDialog();
        };

        $scope.openTourDialog = function (size) {
            var modalInstance = $modal.open({
                templateUrl: 'startTourDialog.html',
                controller: CoreDialogsService.StartTourDialogCtrl,
                //size: size,
                resolve: {
                    parentScope: function () {
                        return $scope;
                    }
                }
            });

            modalInstance.result.then(function (planCopyModel) {
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.dateFormatOptions = {
            weekday: "long", year: "numeric", month: "short",
            day: "numeric"
        };

        $scope.showTargetsNav = true;
        $scope.mobileTargetsClick = function(){
            $scope.showTargetsNav = false;

            if($scope.nutritionPlan) {
                showDailyMacrosChartForMobile();
            }

            showTargetMacrosChartForMobile();
            buildThermometerChart(false, '.budgetChartForMobile');

        };
        $scope.homeNavClick = function(){
            $scope.showTargetsNav = true;

        };


        var createNutritionProfileWithDialog = function(){
            var modalInstance = $modal.open({
                templateUrl: 'createNutritionProfileModalContent.html',
                controller: CoreDialogsService.CreateNutritionProfileInstanceCtrl,
                resolve: {
                    parent: function(){
                        return $scope;
                    }
                }
            });

            modalInstance.result.then(function (selected) {
                if(window.user) {
                    var userToSave = new Users(window.user);

                    var nutritionProfile = {
                        proteinPercentageTarget: selected.nutritionProfile.proteinPercentageTarget,
                        carbohydratesPercentageTarget: selected.nutritionProfile.carbohydratesPercentageTarget,
                        fatPercentageTarget: selected.nutritionProfile.fatPercentageTarget,
                        deficitTarget: selected.nutritionProfile.deficitTarget,
                        age: selected.nutritionProfile.age,
                        sex: selected.nutritionProfile.sex,
                        weight: selected.nutritionProfile.weight,
                        heightFeet: selected.nutritionProfile.heightFeet,
                        heightInches: selected.nutritionProfile.heightInches,
                        restingHeartRate: selected.nutritionProfile.restingHeartRate,
                        bodyFatPercentage: selected.nutritionProfile.bodyFatPercentage
                    };

                    userToSave.nutritionProfile = nutritionProfile;

                    userToSave.$update(function (data) {
                        $scope.nutritionProfile = data.nutritionProfile;
                        Authentication.user = user;
                        Authentication.nutritionProfile = data.nutritionProfile;
                        //Authentication.user.nutritionProfile.isCreate = false;
                        //$scope.nutritionProfile.isCreate = false;
                        window.user = user;
                        $scope.success = true;

                        startTour();

                        $timeout(function () {
                            $scope.success = false;
                        }, 3000);
                    }, function (errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                }



//                var nutritionProfile = new NutritionProfile({
//                    proteinPercentageTarget: selected.nutritionProfile.proteinPercentageTarget,
//                    carbohydratesPercentageTarget: selected.nutritionProfile.carbohydratesPercentageTarget,
//                    fatPercentageTarget: selected.nutritionProfile.fatPercentageTarget,
//                    deficitTarget: selected.nutritionProfile.deficitTarget,
//                    age: selected.nutritionProfile.age,
//                    sex: selected.nutritionProfile.sex,
//                    weight: selected.nutritionProfile.weight,
//                    heightFeet: selected.nutritionProfile.heightFeet,
//                    heightInches: selected.nutritionProfile.heightInches,
//                    restingHeartRate: selected.nutritionProfile.restingHeartRate,
//                    bodyFatPercentage: selected.nutritionProfile.bodyFatPercentage
//                });
//                nutritionProfile.$save(function(response) {
//                    $scope.nutritionProfile = response;
//                    startTour();
//                }, function(errorResponse) {
//                    $scope.error = errorResponse.data.message;
//                });
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.weeklyDashboardView = 'charts';
        $scope.dailyDashboardView = 'dailyCharts';

        //TODO: move into service
        $scope.activityTypes = [
            {id: 0, type: 0, name: 'Ballet'},
            {id: 1, type: 0, name: 'Baseball'},
            {id: 2, type: 0, name: 'Basketball'},
            {id: 3, type: 0, name: 'Biking'},
            {id: 4, type: 0, name: 'Boxing'},
            {id: 5, type: 0, name: 'Canoeing, Kayaking, or other Rowing'},
            {id: 6, type: 0, name: 'Crossfit'},
            {id: 7, type: 0, name: 'Diving'},
            {id: 8, type: 0, name: 'Football'},
            {id: 9, type: 0, name: 'Hiking'},
            {id: 10, type: 0, name: 'Hockey'},
            {id: 11, type: 0, name: 'Jumping rope'},
            {id: 12, type: 0, name: 'Martial Arts'},
            {id: 13, type: 2, name: 'Meditation'},
            {id: 14, type: 1, name: 'Powerlifting'},
            {id: 15, type: 1, name: 'Rock Climbing'},
            {id: 16, type: 0, name: 'Running'},
            {id: 17, type: 0, name: 'Skateboarding'},
            {id: 18, type: 0, name: 'Skating (Ice or Roller)'},
            {id: 19, type: 0, name: 'Skiing or Snowboarding'},
            {id: 20, type: 0, name: 'Soccer'},
            {id: 21, type: 0, name: 'Stairmaster'},
            {id: 22, type: 3, name: 'Stretching'},
            {id: 23, type: 0, name: 'Surfing'},
            {id: 24, type: 0, name: 'Swimming'},
            {id: 25, type: 0, name: 'Tai Chi'},
            {id: 26, type: 0, name: 'Tennis or other Racket sport'},
            {id: 27, type: 0, name: 'Volleyball'},
            {id: 28, type: 0, name: 'Walking'},
            {id: 29, type: 0, name: 'Water Aerobics'},
            {id: 30, type: 1, name: 'Weight Lifting'},
            {id: 31, type: 0, name: 'Wrestling'},
            {id: 32, type: 3, name: 'Yoga'},
            {id: 33, type: 4, name: 'Daily Steps'}


        ];

        var getPlanDateAsConcat = function(planDateYear, planDateMonth, planDateDay){
            planDateYear = parseInt(planDateYear);
            planDateMonth = parseInt(planDateMonth);
            planDateDay = parseInt(planDateDay);

            return parseInt(planDateYear + '' + (planDateMonth < 10 ? '0' + planDateMonth : planDateMonth) + '' + (planDateDay < 10 ? '0' + planDateDay : planDateDay));
        };

        var setDashboardDateFromUrl = function(){
            var dateParam = $stateParams.dashboardDate;
            var sDateParam = dateParam.toString();
            var year = sDateParam.substr(0, 4);
            var month = sDateParam.substr(4, 2);
            var day = sDateParam.substr(6, 2);
            $scope.plan.planDateNonUtc = new Date(year, month, day);
            $scope.planDateForDb = month + '_' + day + '_' + year;
            $scope.planDateForCreate = getPlanDateAsConcat(year, month, day);
            //$scope.planDateForDb = getPlanDateAsConcat(planDateYear, planDateMonth, planDateDay);
            $scope.planDateDisplay = ($scope.plan.planDateNonUtc.getMonth() + 1) + '/' + $scope.plan.planDateNonUtc.getDate() + '/' + $scope.plan.planDateNonUtc.getFullYear();
        };

        var initializePlanDate = function(){
            if($stateParams.dashboardDate) {
                setDashboardDateFromUrl();
            }
            else {
                var todaysDate = (new Date()).toUTCString();
                var dt = new Date(todaysDate);
                var year = dt.getFullYear();
                var month = dt.getMonth();
                var day = dt.getDate();

                $scope.plan.planDateNonUtc = new Date(todaysDate);
                $scope.planDateForDb = month + '_' + day + '_' + year;
                $scope.planDateForCreate = getPlanDateAsConcat(year, month, day);
                $scope.planDateDisplay = (month + 1) + '/' + day + '/' + year;
            }
        };

        initializePlanDate();

        //TODO: move into service
        $scope.activityTypesDictionary = [];
        for(var i = 0; i < $scope.activityTypes.length; i++) {
            var activityTypeDictModel = {
                name: $scope.activityTypes[i].name,
                type: $scope.activityTypes[i].type
            };

            $scope.activityTypesDictionary.push(activityTypeDictModel);
        }

        $scope.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = true;
        };


        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.initDate = new Date('2016-15-20');

        //initialize weekly plan dates to send to DB
        var dWeeklyPlanDate = new Date();
        var dayOfWeek = dWeeklyPlanDate.getDay();
        var year = dWeeklyPlanDate.getFullYear();
        var month = dWeeklyPlanDate.getMonth();
        var day = dWeeklyPlanDate.getDate();
        day = day - dayOfWeek;
        var startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        var endWeeklyDt;

        var checkIfChangeWeeklyData = function(){
            var endWeeklyYear = endWeeklyDt.getFullYear();
            var endWeeklyMonth = endWeeklyDt.getMonth();
            var endWeeklyDay = endWeeklyDt.getDate();
            var endWeeklyDateMili = (new Date(endWeeklyYear, endWeeklyMonth, endWeeklyDay)).getTime();

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();
            var startWeeklyDateMili = (new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay)).getTime();

            var currentWeeklyYear = $scope.plan.planDateNonUtc.getFullYear();
            var currentWeeklyMonth = $scope.plan.planDateNonUtc.getMonth();
            var currentWeeklyDay = $scope.plan.planDateNonUtc.getDate();

            var currentWeeklyDateMili = (new Date(currentWeeklyYear, currentWeeklyMonth, currentWeeklyDay)).getTime();

            var currentExceedsEndDt = currentWeeklyDateMili > endWeeklyDateMili;

            var currentBelowStartDt = false;
            if(!currentExceedsEndDt){
                currentBelowStartDt = currentWeeklyDateMili < startWeeklyDateMili;
            }

            if(currentExceedsEndDt || currentBelowStartDt){
                setNewWeeklyStartDt();
            }

            return currentExceedsEndDt || currentBelowStartDt;
        };



        var setNewWeeklyStartDt = function(){
            var dayOfWeek = $scope.plan.planDateNonUtc.getDay();
            var year = $scope.plan.planDateNonUtc.getFullYear();
            var month = $scope.plan.planDateNonUtc.getMonth();
            var day = $scope.plan.planDateNonUtc.getDate();
            day = day - dayOfWeek;
            startWeeklyDt = new Date((new Date(year, month, day)).toUTCString());
        };

        $scope.planInputChange = function(newValue){
            // $scope.plan.planDateNonUtc = newValue;
            $scope.planDateForDb = $scope.plan.planDateNonUtc.getMonth() + '_' + $scope.plan.planDateNonUtc.getDate() + '_' + $scope.plan.planDateNonUtc.getFullYear();
            $scope.planDateDisplay = ($scope.plan.planDateNonUtc.getMonth() + 1) + '/' + $scope.plan.planDateNonUtc.getDate() + '/' + $scope.plan.planDateNonUtc.getFullYear();
            $scope.planDateForCreate = getPlanDateAsConcat($scope.plan.planDateNonUtc.getFullYear(), $scope.plan.planDateNonUtc.getMonth(), $scope.plan.planDateNonUtc.getDate());

            $scope.getDailyDashboardData(true, false);

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }

            $scope.opened = false;
        };

        $scope.toggleDayClick = function(direction, isMobile){
            if(direction == 'nextDay'){
                scope.nextDayClick(isMobile);
            }
            else{
                scope.prevDayClick(isMobile);
            }
        };

        $scope.nextDayClick = function(isMobile){
            $scope.plan.planDateNonUtc = new Date($scope.plan.planDateNonUtc.setDate($scope.plan.planDateNonUtc.getDate() + 1));
            $scope.planDateForDb = $scope.plan.planDateNonUtc.getMonth() + '_' + $scope.plan.planDateNonUtc.getDate() + '_' + $scope.plan.planDateNonUtc.getFullYear();
            $scope.planDateForCreate = getPlanDateAsConcat($scope.plan.planDateNonUtc.getFullYear(), $scope.plan.planDateNonUtc.getMonth(), $scope.plan.planDateNonUtc.getDate());
            $scope.planDateDisplay = ($scope.plan.planDateNonUtc.getMonth() + 1) + '/' + $scope.plan.planDateNonUtc.getDate() + '/' + $scope.plan.planDateNonUtc.getFullYear();

            $scope.getDailyDashboardData(true, isMobile);

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        $scope.prevDayClick = function(isMobile){
            $scope.plan.planDateNonUtc = new Date($scope.plan.planDateNonUtc.setDate($scope.plan.planDateNonUtc.getDate() - 1));
            $scope.planDateForDb = $scope.plan.planDateNonUtc.getMonth() + '_' + $scope.plan.planDateNonUtc.getDate() + '_' + $scope.plan.planDateNonUtc.getFullYear();
            $scope.planDateForCreate = getPlanDateAsConcat($scope.plan.planDateNonUtc.getFullYear(), $scope.plan.planDateNonUtc.getMonth(), $scope.plan.planDateNonUtc.getDate());
            $scope.planDateDisplay = ($scope.plan.planDateNonUtc.getMonth() + 1) + '/' + $scope.plan.planDateNonUtc.getDate() + '/' + $scope.plan.planDateNonUtc.getFullYear();

            $scope.getDailyDashboardData(true, isMobile);

            var reloadWeeklyData = checkIfChangeWeeklyData();

            if(reloadWeeklyData){
                $scope.getWeeklyDashboardData();
            }
        };

        var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];



        $scope.getWeeklyDashboardData = function()
        {
            $scope.isWeeklyDashboardLoading = true;

            var startWeeklyYear = startWeeklyDt.getFullYear();
            var startWeeklyMonth = startWeeklyDt.getMonth();
            var startWeeklyDay = startWeeklyDt.getDate();

            $scope.weeklyDateDisplay = (startWeeklyMonth + 1) + '/' + startWeeklyDay;

            endWeeklyDt = new Date(startWeeklyYear, startWeeklyMonth, startWeeklyDay);
            endWeeklyDt.setDate(endWeeklyDt.getDate() + 6);

            var startDateFormatted = startWeeklyYear + '_' + startWeeklyMonth + '_' + startWeeklyDay;
            var endDateFormatted = endWeeklyDt.getFullYear() + '_' + endWeeklyDt.getMonth() + '_' + endWeeklyDt.getDate();

            $scope.progress = Progress.query({
                    startDate: startDateFormatted,
                    endDate: endDateFormatted
                },
                function(u, getResponseHeaders)
                {


                    if(u.length > 0) {
                        $scope.weeklyNutritionPlanList = u;
                        var weeklyProteinTotal = 0;
                        var weeklyCarbsTotal = 0;
                        var weeklyFatTotal = 0;
                        var weeklyCaloriesTotal = 0;
                        var weeklyDeficitTotal = 0;

                        var len = $scope.weeklyNutritionPlanList.length;

                        for (var w = 0; w < len; w++) {
                            var item = $scope.weeklyNutritionPlanList[w];

                            var dPlanDate = new Date(item.planDateYear, item.planDateMonth, item.planDateDay);
                            var planDateDayOfWeek = days[dPlanDate.getDay()];
                            item.dayOfWeek = planDateDayOfWeek;


                            weeklyProteinTotal += item.totalPlanProteinAsPercent;
                            weeklyCarbsTotal += item.totalPlanCarbsAsPercent;
                            weeklyFatTotal += item.totalPlanFatAsPercent;
                            weeklyCaloriesTotal += item.totalPlanCalories;
                            weeklyDeficitTotal += item.deficit;
                        }

                        $scope.weeklyProteinAverage = weeklyProteinTotal / len;
                        $scope.weeklyCarbsAverage = weeklyCarbsTotal / len;
                        $scope.weeklyFatAverage = weeklyFatTotal / len;
                        $scope.weeklyCaloriesAverage = weeklyCaloriesTotal / len;
                        $scope.weeklyDeficitAverage = weeklyDeficitTotal / len;

                        getWeeklyMacrosChartData();

                        showWeeklyCaloriesDeficitChart();

                        showAverageWeeklyMacrosChart();
                    }
                    else{
                        $scope.weeklyNutritionPlanList = null;
                    }

                    $scope.isWeeklyDashboardLoading = false;
                }
            );
        };

        var buildThermometerChart = function(isUpdate, isMobile){
            var chartElement;

            if(isMobile){
                chartElement = '.budgetChartForMobile';
            }
            else{
                chartElement = '.budgetChart';
            }

            var caloriesIn = 0;

            if($scope.nutritionPlan){
                caloriesIn = parseFloat($scope.nutritionPlan.totalPlanCalories.toFixed(0));
            }

            var deficitTarget = $scope.nutritionProfile.deficitTarget;
            $scope.deficit = CoreUtilities.calculateDeficit($scope.nutritionPlan, $scope.activityPlan, $scope.nutritionProfile);

            var goalCalories = parseFloat((($scope.deficit - deficitTarget) + caloriesIn).toFixed(0));
            $scope.goalCalories = goalCalories;
            ThermometerChartService.buildThermometerChart(caloriesIn, goalCalories, chartElement, isUpdate);
        };

        var setupActivitiesForDailyDashboard = function(data){
            if(data.activityPlan){
                $scope.activityPlan = data.activityPlan;

                if($scope.activityPlan.dailySteps > 0){
                    var dailyStepsModel = {
                        name: 'Daily Steps',
                        steps: $scope.activityPlan.dailySteps,
                        activityType: 33,
                        caloriesBurned: $scope.activityPlan.dailyStepsCaloriesBurned
                    };

                    $scope.activityPlan.activities.push(dailyStepsModel);
                }

                if($scope.nutritionProfile.isAdvancedNutrientTargets) {
                    $scope.totalCaloriesBurned = $scope.activityPlan.totalCaloriesBurned + additionalCaloriesExpended;
                }
                else{
                    var bmr = CoreUtilities.calculateBmr($scope.nutritionProfile);
                    $scope.totalCaloriesBurned = CoreUtilities.calculateCaloriesOut($scope.nutritionProfile, bmr) - bmr;
                }
            }
            else{
                $scope.activityPlan = null;

                if($scope.nutritionProfile.isAdvancedNutrientTargets) {
                    $scope.totalCaloriesBurned = additionalCaloriesExpended;
                }
                else{
                    var bmr = CoreUtilities.calculateBmr($scope.nutritionProfile);
                    $scope.totalCaloriesBurned = CoreUtilities.calculateCaloriesOut($scope.nutritionProfile, bmr) - bmr;
                }
            }
        };

        var setupNutritionPlanForDailyDashboard = function(data){
            if (data.nutritionPlan){
                var plan = data.nutritionPlan;
                for (var nMeal = 0; nMeal < plan.meals.length; nMeal++){
                    doMealTotaling(plan.meals[nMeal]);
                }

                calculatePlanTotalMacros(plan);

                $scope.nutritionPlan = plan;

                $scope.isUserAdmin = $scope.nutritionPlan.userRoles && $scope.nutritionPlan.userRoles.indexOf('admin') !== -1 ? true : false;

            }
            else{
                $scope.nutritionPlan = null;
            }
        };

        $scope.getDailyDashboardData = function(isUpdate, isMobile) {
            $scope.isDailyDashboardLoading = true;

            CoreService.getDailyDashboardData($scope.planDateForDb).then(function(data){
                var dPlanDate = new Date($scope.plan.planDateNonUtc.getFullYear(), $scope.plan.planDateNonUtc.getMonth(), $scope.plan.planDateNonUtc.getDate());
                var planDateDayOfWeek = days[dPlanDate.getDay()];
                $scope.planDayOfWeek = planDateDayOfWeek;

                setupNutritionPlanForDailyDashboard(data);

                setupActivitiesForDailyDashboard(data);

                if($scope.nutritionPlan) {
                    if(isMobile){
                        showDailyMacrosChartForMobile();
                    }
                    else{
                        showDailyMacrosChart();
                    }
                }

                buildThermometerChart(isUpdate, isMobile);

                if(!data.dailyBodyStats){
                    $scope.showEnterDailyWeight = true;
                }
                else{
                    $scope.showEnterDailyWeight = false;

                    $scope.dailyBodyStats = data.dailyBodyStats;
                }

                if(localStorage.tour_current_step) {
                    var tourStep = parseInt(localStorage.tour_current_step);
                    tour.goTo(tourStep);
                }

                $scope.isDailyDashboardLoading = false;
            });
        };

        $scope.initializeDashboardData = function(){
            if($scope.nutritionProfile.age && $scope.nutritionProfile.heightFeet && $scope.nutritionProfile.sex) {
                $scope.bmr = CoreUtilities.calculateBmr($scope.nutritionProfile);

                setNewWeeklyStartDt();

                $scope.getDailyDashboardData();

                $scope.getWeeklyDashboardData();
            }
            else{
                createNutritionProfileWithDialog();
            }
        };

        var showWeeklyCaloriesDeficitChart = function() {
            var caloriesList = [];
            var deficitList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                caloriesList.push(dayItem.totalPlanCalories);
                deficitList.push(parseInt(dayItem.deficit));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyCaloriesChart';
            config.data = {};
            config.data.json = {};
            config.data.json.calories = caloriesList;
            config.data.json.deficit = deficitList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"calories":"bar", "deficit": "bar"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        var showDailyMacrosChart = function() {
            var config = {};
            config.bindto = '#dailyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = $scope.nutritionPlan.totalPlanProteinAsPercent;
            config.data.json.carbs = $scope.nutritionPlan.totalPlanCarbsAsPercent;
            config.data.json.fat = $scope.nutritionPlan.totalPlanFatAsPercent;
            config.axis = {"y":{"label":{"text":"Daily Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 190, height: 190};
            // config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var showDailyMacrosChartForMobile = function(){
            //todo: don't duplicate this code here - it's basically the same as above
            var config = {};
            config.bindto = '#dailyMacrosChartForMobile';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = $scope.nutritionPlan.totalPlanProteinAsPercent;
            config.data.json.carbs = $scope.nutritionPlan.totalPlanCarbsAsPercent;
            config.data.json.fat = $scope.nutritionPlan.totalPlanFatAsPercent;
            config.axis = {"y":{"label":{"text":"Daily Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 180, height: 180};
            // config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var showTargetMacrosChartForMobile = function(){
            //todo: don't duplicate this code here - it's basically the same as above
            var config = {};
            config.bindto = '#targetMacrosChartForMobile';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = $scope.nutritionProfile.proteinPercentageTarget;
            config.data.json.carbs = $scope.nutritionProfile.carbohydratesPercentageTarget;
            config.data.json.fat = $scope.nutritionProfile.fatPercentageTarget;
            config.axis = {"y":{"label":{"text":"Daily Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 180, height: 180};
            // config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var showAverageWeeklyMacrosChart = function() {
            var config = {};
            config.bindto = '#weeklyAverageMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.protein = parseInt($scope.weeklyProteinAverage);
            config.data.json.carbs = parseInt($scope.weeklyCarbsAverage);
            config.data.json.fat = parseInt($scope.weeklyFatAverage);
            config.axis = {"y":{"label":{"text":"Weekly Macros","position":"outer-middle"}}};
            config.data.types={"protein":"pie", "carbs": "pie", "fat": "pie"};
            config.size = {width: 220, height: 220};
            $scope.chart = c3.generate(config);
        };

        var getWeeklyMacrosChartData = function() {
            var fatList = [];
            var carbsList = [];
            var proteinList = [];
            var datesList = [];

            for(var i = 0; i < $scope.weeklyNutritionPlanList.length; i++){
                var dayItem = $scope.weeklyNutritionPlanList[i];

                var dayDate = dayItem.planDateYear + '-' + (dayItem.planDateMonth + 1) + '-' + dayItem.planDateDay;

                proteinList.push(parseInt(dayItem.totalPlanProteinAsPercent));
                carbsList.push(parseInt(dayItem.totalPlanCarbsAsPercent));
                fatList.push(parseInt(dayItem.totalPlanFatAsPercent));
                datesList.push(dayDate);
            }

            var config = {};
            config.bindto = '#weeklyMacrosChart';
            config.data = {};
            config.data.json = {};
            config.data.json.Protein = proteinList;
            config.data.json.Carbs = carbsList;
            config.data.json.Fat = fatList;
            config.axis = {
                "x":
                {
                    type: 'category',
                    categories: datesList
                },
                "y":
                {
                    "label":
                    {
                        "text":"",
                        "position":"outer-middle"
                    }
                }
            };
            config.data.types={"Protein":"line", "Carbs": "line", "Fat": "line"};
            config.size = {width: 450, height: 220};
            $scope.chart = c3.generate(config);
        };

        //TODO: move into service
        var doMealTotaling = function(meal){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0, sodiumTotal = 0;

            for(var i = 0; i < meal.foods.length; i++){
                var foodCarbs = meal.foods[i].carbohydrates;

                carbsTotal += foodCarbs;
                fatTotal += meal.foods[i].fat;
                proteinTotal += meal.foods[i].protein;
                caloriesTotal += meal.foods[i].calories;
                sodiumTotal += meal.foods[i].sodium;
            }

            meal.totalCarbohydrates = carbsTotal;
            meal.totalProtein = proteinTotal;
            meal.totalCalories = caloriesTotal;
            meal.totalFat = fatTotal;
            meal.totalSodium = sodiumTotal;
        };

        //TODO: move into service
        var calculatePlanTotalMacros = function(plan){
            var carbsTotal = 0, fatTotal = 0, proteinTotal = 0, caloriesTotal = 0;

            for (var i = 0; i < plan.meals.length; i++){
                carbsTotal += plan.meals[i].totalCarbohydrates;
                fatTotal += plan.meals[i].totalFat;
                proteinTotal += plan.meals[i].totalProtein;
                caloriesTotal += plan.meals[i].totalCalories;
            }

            plan.totalPlanCarbs = carbsTotal;
            plan.totalPlanFat = fatTotal;
            plan.totalPlanProtein = proteinTotal;
            plan.totalPlanCalories = caloriesTotal;

            //calculate totals as percent
            var macroTotals = carbsTotal + fatTotal + proteinTotal;
            plan.totalPlanCarbsAsPercent = (carbsTotal / macroTotals) * 100;
            plan.totalPlanFatAsPercent = (fatTotal / macroTotals) * 100;
            plan.totalPlanProteinAsPercent = (proteinTotal / macroTotals) * 100;
        };
    }


]);















